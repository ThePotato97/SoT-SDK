#pragma once

// SOT: Sea of Thieves (1.0) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.Actor
// 0x0440 (0x0468 - 0x0028)
class AActor : public UObject
{
public:
	struct FActorTickFunction                          PrimaryActorTick;                                         // 0x0028(0x0050) (CPF_Edit, CPF_DisableEditOnInstance)
	float                                              CustomTimeDilation;                                       // 0x0078(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAllowRemovalFromServerWhenCollisionMerged : 1;           // 0x007C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bHidden : 1;                                              // 0x007C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net BITFIELD: 0202)
	unsigned char                                      bNetTemporary : 1;                                        // 0x007C(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bNetStartup : 1;                                          // 0x007C(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                 // 0x007C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 1010)
	unsigned char                                      bAlwaysRelevant : 1;                                      // 0x007C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance BITFIELD: 2020)
	unsigned char                                      bReplicateMovement : 1;                                   // 0x007C(0x0001) (CPF_Edit, CPF_Net, CPF_DisableEditOnInstance BITFIELD: 4040)
	unsigned char                                      bTearOff : 1;                                             // 0x007C(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bExchangedRoles : 1;                                      // 0x007D(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bPendingNetUpdate : 1;                                    // 0x007D(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bNetLoadOnClient : 1;                                     // 0x007D(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0404)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                // 0x007D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance BITFIELD: 0808)
	unsigned char                                      bBlockInput : 1;                                          // 0x007D(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 1010)
	unsigned char                                      bUnknown007D_4040 : 1;                                    // 0x007D(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bActorEnableCollision : 1;                                // 0x007D(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bUnknown007E_0101 : 1;                                    // 0x007E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstanceMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown007E_0202 : 1;                                    // 0x007E(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown007E_0404 : 1;                                    // 0x007E(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bReplicates : 1;                                          // 0x007E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 0808)
	struct FScriptMulticastDelegate                    OnPreNetOwnershipChange;                                  // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0090(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	class AActor*                                      Owner;                                                    // 0x0098(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EActorSpawnRestrictions>               SpawnRestrictions;                                        // 0x00A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FRepMovement                                ReplicatedMovement;                                       // 0x00A4(0x0034) (CPF_Edit, CPF_Net, CPF_DisableEditOnInstance)
	struct FRepAttachment                              AttachmentReplication;                                    // 0x00D8(0x0040) (CPF_Net, CPF_Transient)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0118(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput;                                         // 0x011A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InputPriority;                                            // 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInputComponent*                             InputComponent;                                           // 0x0120(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TEnumAsByte<EInputConsumeOptions>                  InputConsumeOption;                                       // 0x0128(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x012C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                NetTag;                                                   // 0x0130(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NetUpdateTime;                                            // 0x0134(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NetUpdateFrequency;                                       // 0x0138(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetPriority;                                              // 0x013C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LastNetUpdateTime;                                        // 0x0140(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x0144(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                             // 0x014C(0x0001) (CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bCanBeDamaged : 1;                                        // 0x014C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bActorIsBeingDestroyed : 1;                               // 0x014C(0x0001) (CPF_Transient, CPF_DuplicateTransient BITFIELD: 0404)
	unsigned char                                      bCollideWhenPlacing : 1;                                  // 0x014C(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                   // 0x014C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bRelevantForNetworkReplays : 1;                           // 0x014C(0x0001) ( BITFIELD: 2020)
	TEnumAsByte<ESpawnActorCollisionHandlingMethod>    SpawnCollisionHandlingMethod;                             // 0x0150(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
	class APawn*                                       Instigator;                                               // 0x0158(0x0008) (CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class AActor*>                              Children;                                                 // 0x0160(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class USceneComponent*                             RootComponent;                                            // 0x0170(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class AMatineeActor*>                       ControllingMatineeActors;                                 // 0x0178(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              InitialLifeSpan;                                          // 0x0188(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;              // 0x0190(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	TArray<struct FName>                               Layers;                                                   // 0x0198(0x0010) (CPF_ZeroConstructor)
	struct FActorPtr                                   ParentComponentActor;                                     // 0x01A8(0x0008)
	TArray<TWeakObjectPtr<class AActor>>               ChildComponentActors;                                     // 0x01B0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bUnknown01C0_0101 : 1;                                    // 0x01C0(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown01C0_0202 : 1;                                    // 0x01C0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown01C0_0404 : 1;                                    // 0x01C0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown01C0_0808 : 1;                                    // 0x01C0(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bActorSeamlessTraveled : 1;                               // 0x01C0(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bIgnoresOriginShifting : 1;                               // 0x01C0(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bEnableAutoLODGeneration : 1;                             // 0x01C0(0x0001) (CPF_Edit BITFIELD: 4040)
	unsigned char                                      UnknownData04[0x7];                                       // 0x01C1(0x0007) MISSED OFFSET
	TArray<struct FName>                               Tags;                                                     // 0x01C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FName                                       Feature;                                                  // 0x01D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	uint64_t                                           HiddenEditorViews;                                        // 0x01E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTakeAnyDamage;                                          // 0x01E8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakePointDamage;                                        // 0x01F8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorBeginOverlap;                                      // 0x0208(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorEndOverlap;                                        // 0x0218(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x0228(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x0238(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0248(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x0258(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x0268(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x0278(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x0288(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x0298(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnActorHit;                                               // 0x02A8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyed;                                              // 0x02B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData05[0x58];                                      // 0x02C8(0x0058) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnEndPlay;                                                // 0x0320(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bDoOverlapNotifiesOnLoad;                                 // 0x0330(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0xBF];                                      // 0x0331(0x00BF) MISSED OFFSET
	TArray<class UActorComponent*>                     BlueprintCreatedComponents;                               // 0x03F0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UActorComponent*>                     InstanceComponents;                                       // 0x0400(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData07[0x58];                                      // 0x0410(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Actor")); }
		return ptr;
	}


	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AActor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AActor* NewOwner);
	void SetLifeSpan(float InLifespan);
	void SetIgnoreNetTransformUpdates(bool bInIgnoreNetTransformUpdates);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	bool SetActorRotation(const struct FRotator& NewRotation);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveHit(class UPrimitiveComponent* MyComp, class AActor* Other, class UPrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void ReceiveActorOnReleased();
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked();
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void OnRep_Role();
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void OnDestroyedDynamicMulticastEvent__DelegateSignature(class AActor* DeletedActor);
	void MakeNoise(float Loudness, class APawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UMaterialInstanceDynamic* MakeMIDForMaterial(class UMaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class APlayerController* PC);
	void K2_OnBecomeViewTarget(class APlayerController* PC);
	class USceneComponent* K2_GetRootComponent();
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DestroyComponent(class UActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachRootComponentToActor(class AActor* InParentActor, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsOverlappingActor(class AActor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasNetOwner();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AActor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	class AActor* GetParentActor();
	class AActor* GetOwner();
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	float GetLifeSpan();
	class UObject* GetInterfaceImplementer(class UClass* InterfaceClass);
	class AController* GetInstigatorController();
	class APawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FKey& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FKey& InputAxisKey);
	float GetHorizontalDotProductTo(class AActor* OtherActor);
	float GetHorizontalDistanceTo(class AActor* OtherActor);
	float GetDotProductTo(class AActor* OtherActor);
	float GetDistanceTo(class AActor* OtherActor);
	TArray<class UActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UActorComponent*> GetComponentsByClass(class UClass* ComponentClass);
	void GetComponentInterfacesByClass(class UClass* InterfaceClass, TArray<class UActorComponent*>* OutInterfaces);
	class UActorComponent* GetComponentInterfaceByClass(class UClass* InterfaceClass);
	class UActorComponent* GetComponentByClass(class UClass* ComponentClass);
	class AActor* GetAttachParentActor();
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class APlayerController* PlayerController);
	void DisableInput(class APlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AttachRootComponentToNoReplication(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void AttachActorToActorNoReplication(class AActor* InParentActor, const struct FName& InSocketName, bool bWeldSimulatedBodies);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	class UActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class Engine.DataAsset
// 0x0000 (0x0028 - 0x0028)
class UDataAsset : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DataAsset")); }
		return ptr;
	}

};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UBlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlueprintFunctionLibrary")); }
		return ptr;
	}

};


// Class Engine.ActorComponent
// 0x00A8 (0x00D0 - 0x0028)
class UActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FActorComponentTickFunction                 PrimaryComponentTick;                                     // 0x0030(0x0050) (CPF_Edit, CPF_DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                            // 0x0080(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0090(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      bUnknown00A0_0101 : 1;                                    // 0x00A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_DisableEditOnInstanceMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00A0_0202 : 1;                                    // 0x00A0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00A0_0404 : 1;                                    // 0x00A0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bReplicates : 1;                                          // 0x00A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_DisableEditOnInstance BITFIELD: 0808)
	unsigned char                                      bNetAddressable : 1;                                      // 0x00A0(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bUnknown00A0_2020 : 1;                                    // 0x00A0(0x0001) (CPF_DeprecatedMANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown00A0_4040 : 1;                                    // 0x00A0(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown00A0_8080 : 1;                                    // 0x00A0(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUnknown00A1_0101 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00A1_0202 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00A1_0404 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown00A1_0808 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown00A1_1010 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown00A1_2020 : 1;                                    // 0x00A1(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bCreatedByConstructionScript : 1;                         // 0x00A1(0x0001) (CPF_Deprecated BITFIELD: 4040)
	unsigned char                                      bInstanceComponent : 1;                                   // 0x00A1(0x0001) (CPF_Deprecated BITFIELD: 8080)
	unsigned char                                      bAutoActivate : 1;                                        // 0x00A2(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bIsActive : 1;                                            // 0x00A2(0x0001) (CPF_Net, CPF_Transient BITFIELD: 0202)
	unsigned char                                      bEditableWhenInherited : 1;                               // 0x00A2(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0404)
	unsigned char                                      bUnknown00A2_0808 : 1;                                    // 0x00A2(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bWantsBeginPlay : 1;                                      // 0x00A2(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bUnknown00A2_2020 : 1;                                    // 0x00A2(0x0001) (CPF_EditMANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown00A2_4040 : 1;                                    // 0x00A2(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown00A2_8080 : 1;                                    // 0x00A2(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUnknown00A3_0101 : 1;                                    // 0x00A3(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00A3_0202 : 1;                                    // 0x00A3(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00A3_0404 : 1;                                    // 0x00A3(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bNeedsLoadForClient : 1;                                  // 0x00A3(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bNeedsLoadForServer : 1;                                  // 0x00A3(0x0001) (CPF_Edit BITFIELD: 1010)
	TEnumAsByte<EComponentCreationMethod>              CreationMethod;                                           // 0x00A4(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x00A5(0x000B) MISSED OFFSET
	TArray<struct FSimpleMemberReference>              UCSModifiedProperties;                                    // 0x00B0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ActorComponent")); }
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickEnabled(bool bEnabled);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AActor* GetOwner();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AActor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class Engine.SceneComponent
// 0x0210 (0x02E0 - 0x00D0)
class USceneComponent : public UActorComponent
{
public:
	class USceneComponent*                             AttachParent;                                             // 0x00D0(0x0008) (CPF_ExportObject, CPF_Net, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class USceneComponent*>                     AttachChildren;                                           // 0x00D8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	struct FName                                       AttachSocketName;                                         // 0x00E8(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRequiresCustomLocation : 1;                              // 0x00F0(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bAbsoluteLocation : 1;                                    // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net BITFIELD: 0202)
	unsigned char                                      bAbsoluteTranslation : 1;                                 // 0x00F0(0x0001) (CPF_Deprecated BITFIELD: 0404)
	unsigned char                                      bAbsoluteRotation : 1;                                    // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net BITFIELD: 0808)
	unsigned char                                      bAbsoluteScale : 1;                                       // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net BITFIELD: 1010)
	unsigned char                                      bVisible : 1;                                             // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net BITFIELD: 2020)
	unsigned char                                      bHiddenInGame : 1;                                        // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 4040)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                           // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;            // 0x00F1(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bUseAttachParentBound : 1;                                // 0x00F1(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bComponentIsUnionOfChildren : 1;                          // 0x00F1(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bUnknown00F1_0808 : 1;                                    // 0x00F1(0x0001) (CPF_TransientMANUAL_ADD_BIT 0808)
	unsigned char                                      bWorldToComponentUpdated : 1;                             // 0x00F1(0x0001) (CPF_Transient BITFIELD: 1010)
	TWeakObjectPtr<class APhysicsVolume>               PhysicsVolume;                                            // 0x00F4(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xF4];                                      // 0x00FC(0x00F4) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x01F0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x01FC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0208(0x0028) MISSED OFFSET
	struct FVector                                     RelativeScale3D;                                          // 0x0230(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x023C(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<EComponentMobility>                    Mobility;                                                 // 0x0248(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0249(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x16];                                      // 0x024A(0x0016) MISSED OFFSET
	struct FVector                                     ComponentVelocity;                                        // 0x0260(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    PhysicsVolumeChangedDelegate;                             // 0x0270(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0280(0x0010) MISSED OFFSET
	unsigned char                                      CacheRootVelocity;                                        // 0x0290(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0291(0x0007) MISSED OFFSET
	TArray<struct FName>                               SocketVelocitiesToCache;                                  // 0x0298(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData06[0x38];                                      // 0x02A8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneComponent")); }
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	void SnapTo(class USceneComponent* InParent, const struct FName& InSocketName);
	bool SharesBasis(class USceneComponent* Other);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	bool K2_TryGetCachedSocketVelocity(const struct FName& SocketName, struct FVector* OutVelocity);
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_AttachTo(class USceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class APhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class USceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class USceneComponent*>* Children);
	class USceneComponent* GetChildComponent(int ChildIndex);
	class USceneComponent* GetAttachParent();
	struct FTransform GetAttachedBasisTransform();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.AnimNotify
// 0x0008 (0x0030 - 0x0028)
class UAnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimNotify")); }
		return ptr;
	}


	bool Received_Notify(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	struct FString GetNotifyName();
};


// Class Engine.AnimInstance
// 0x0418 (0x0440 - 0x0028)
class UAnimInstance : public UObject
{
public:
	float                                              DeltaTime;                                                // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class USkeleton*                                   CurrentSkeleton;                                          // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FAnimTickRecord>                     UngroupedActivePlayers;                                   // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FAnimGroupInstance>                  SyncGroups;                                               // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FActiveVertexAnim>                   VertexAnims;                                              // 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bWarnAboutBlueprintUsage;                                 // 0x0069(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                     // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                         // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                           // 0x0090(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateEntered;                                           // 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateExited;                                            // 0x00B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStateInitialised;                                       // 0x00C0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAnimUpdated;                                            // 0x00D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData02[0x70];                                      // 0x00E0(0x0070) MISSED OFFSET
	unsigned char                                      bQueueMontageEvents;                                      // 0x0150(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xF7];                                      // 0x0151(0x00F7) MISSED OFFSET
	TArray<struct FAnimNotifyEvent>                    ActiveAnimNotifyState;                                    // 0x0248(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x100];                                     // 0x0258(0x0100) MISSED OFFSET
	int16_t                                            SlotNodeInitializationCounter;                            // 0x0358(0x0002) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int16_t                                            GraphTraversalCounter;                                    // 0x035A(0x0002) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x54];                                      // 0x035C(0x0054) MISSED OFFSET
	unsigned char                                      bBoneCachesInvalidated;                                   // 0x03B0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x8F];                                      // 0x03B1(0x008F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimInstance")); }
		return ptr;
	}


	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	class APawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	class UAnimMontage* PlaySlotAnimationAsDynamicMontage(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime);
	float PlaySlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_Stop(float InBlendOutTime, class UAnimMontage* Montage);
	void Montage_SetPlayRate(class UAnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UAnimMontage* Montage);
	float Montage_Play(class UAnimMontage* MontageToPlay, float InPlayRate);
	void Montage_Pause(class UAnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UAnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UAnimMontage* Montage);
	bool Montage_IsPlaying(class UAnimMontage* Montage);
	bool Montage_IsActive(class UAnimMontage* Montage);
	struct FName Montage_GetCurrentSection(class UAnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	bool IsPlayingSlotAnimation(class UAnimSequenceBase* Asset, const struct FName& SlotNodeName);
	float GetSyncGroupPosition(const struct FName& Name);
	float GetStateWeight(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	class USkeletalMeshComponent* GetOwningComponent();
	class AActor* GetOwningActor();
	float GetMaxPlayingAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetMaxAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	float GetCurrentStateElapsedTime(int MachineIndex);
	float GetAnimAssetPlayerTimeFromEndFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFromEnd(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerTimeFraction(class UAnimationAsset* AnimAsset, float CurrentTime);
	float GetAnimAssetPlayerLength(class UAnimationAsset* AnimAsset);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintUninitializeAnimation();
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void AnimNotify_Sound(class UAnimNotify* Notify);
};


// Class Engine.CameraComponent
// 0x0560 (0x0840 - 0x02E0)
class UCameraComponent : public USceneComponent
{
public:
	float                                              FieldOfView;                                              // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AspectRatio;                                              // 0x02F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x02F4(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                // 0x02F4(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x02F4(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x02F8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x02FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0300(0x0530) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUseControllerViewRotation : 1;                           // 0x0830(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0831(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraComponent")); }
		return ptr;
	}


	struct FVector ProjectWorldLocation(const struct FVector& WorldLocation, const struct FIntPoint& ViewDimensions);
	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.Pawn
// 0x0060 (0x04C8 - 0x0468)
class APawn : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	unsigned char                                      bUnknown0468_0101 : 1;                                    // 0x0468(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0468_0202 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0468_0404 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0468_0808 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0468_1010 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0468_2020 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0468_4040 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0468_8080 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseControllerRotationPitch : 1;                          // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUseControllerRotationYaw : 1;                            // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bUseControllerRotationRoll : 1;                           // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                       // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	float                                              BaseEyeHeight;                                            // 0x0474(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer;                                        // 0x0478(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAutoPossessAI>                        AutoPossessAI;                                            // 0x0479(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x047A(0x0006) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                        // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerState*                                PlayerState;                                              // 0x0488(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      RemoteViewPitch;                                          // 0x0490(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0491(0x0007) MISSED OFFSET
	class AController*                                 LastHitBy;                                                // 0x0498(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AController*                                 Controller;                                               // 0x04A0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET
	struct FVector                                     ControlInputVector;                                       // 0x04B0(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     LastControlInputVector;                                   // 0x04BC(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Pawn")); }
		return ptr;
	}


	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue);
	void ReceiveUnpossessed(class AController* OldController);
	void ReceivePossessed(class AController* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AActor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UPawnMovementComponent* GetMovementComponent();
	class AActor* GetMovementBaseActor(class APawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AController* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};


// Class Engine.Character
// 0x0188 (0x0650 - 0x04C8)
class ACharacter : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x04C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCharacterMovementComponent*                 CharacterMovement;                                        // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x04D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FBasedMovementInfo                          BasedMovement;                                            // 0x04E0(0x0030)
	struct FBasedMovementInfo                          ReplicatedBasedMovement;                                  // 0x0510(0x0030) (CPF_Net)
	struct FVector                                     BaseTranslationOffset;                                    // 0x0540(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x054C(0x0004) MISSED OFFSET
	struct FQuat                                       BaseRotationOffset;                                       // 0x0550(0x0010) (CPF_IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x0560(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInBaseReplication;                                       // 0x0561(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CrouchedEyeHeight;                                        // 0x0564(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                          // 0x0568(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net BITFIELD: 0101)
	unsigned char                                      bPressedJump : 1;                                         // 0x0568(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bClientUpdating : 1;                                      // 0x0568(0x0001) (CPF_Transient BITFIELD: 0404)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x0568(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      bClientResimulateRootMotion : 1;                          // 0x0568(0x0001) (CPF_Transient BITFIELD: 1010)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x0568(0x0001) ( BITFIELD: 2020)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                          // 0x0568(0x0001) (CPF_Transient BITFIELD: 4040)
	float                                              JumpKeyHoldTime;                                          // 0x056C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x0570(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0574(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                        // 0x0578(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0588(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                               // 0x0598(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData03[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET
	struct FRootMotionMovementParams                   ClientRootMotionParams;                                   // 0x05B0(0x0040) (CPF_Transient)
	TArray<struct FSimulatedRootMotionReplicatedMove>  RootMotionRepMoves;                                       // 0x05F0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FRepRootMotionMontage                       RepRootMotion;                                            // 0x0600(0x0040) (CPF_Net)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0640(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Character")); }
		return ptr;
	}


	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UAnimMontage* AnimMontage);
	void SetReplicateMovement(bool bInReplicateMovement);
	float PlayAnimMontage(class UAnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FHitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<EMovementMode> PrevMovementMode, TEnumAsByte<EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	class UAnimMontage* GetCurrentMontage();
	void Crouch(bool bClientSimulation);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	bool CanJumpInternal();
	bool CanJump();
};


// Class Engine.MovementComponent
// 0x0048 (0x0118 - 0x00D0)
class UMovementComponent : public UActorComponent
{
public:
	class USceneComponent*                             UpdatedComponent;                                         // 0x00D0(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	class UPrimitiveComponent*                         UpdatedPrimitive;                                         // 0x00D8(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E0(0x0004) MISSED OFFSET
	struct FVector                                     Velocity;                                                 // 0x00E4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bConstrainToPlane : 1;                                    // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 0101)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                  // 0x00F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 0202)
	TEnumAsByte<EPlaneConstraintAxisSetting>           PlaneConstraintAxisSetting;                               // 0x00F4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     PlaneConstraintNormal;                                    // 0x00F8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                                    // 0x0104(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                // 0x0110(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                          // 0x0110(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                        // 0x0110(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0111(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MovementComponent")); }
		return ptr;
	}


	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class USceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(TEnumAsByte<EPlaneConstraintAxisSetting> NewAxisSetting);
	void PhysicsVolumeChanged(class APhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* OutHit);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	TEnumAsByte<EPlaneConstraintAxisSetting> GetPlaneConstraintAxisSetting();
	class APhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
};


// Class Engine.NavMovementComponent
// 0x0030 (0x0148 - 0x0118)
class UNavMovementComponent : public UMovementComponent
{
public:
	struct FNavAgentProperties                         NavAgentProps;                                            // 0x0118(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                   // 0x0130(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FMovementProperties                         MovementState;                                            // 0x0134(0x0004)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	unsigned char                                      UseDefaultNavWalkingSearchRadiusScale;                    // 0x0140(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UseDefaultNavWalkingSearchHeightScale;                    // 0x0141(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0142(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavMovementComponent")); }
		return ptr;
	}


	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
	struct FVector GetActorFeetLocation();
};


// Class Engine.PawnMovementComponent
// 0x0008 (0x0150 - 0x0148)
class UPawnMovementComponent : public UNavMovementComponent
{
public:
	class APawn*                                       PawnOwner;                                                // 0x0148(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PawnMovementComponent")); }
		return ptr;
	}


	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class APawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};


// Class Engine.CharacterMovementComponent
// 0x03B0 (0x0500 - 0x0150)
class UCharacterMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0150(0x0018) MISSED OFFSET
	class ACharacter*                                  CharacterOwner;                                           // 0x0168(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GravityScale;                                             // 0x0170(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x0174(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0178(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x017C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x0180(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x0184(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementMode;                                             // 0x0188(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x0189(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x26];                                      // 0x018A(0x0026) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x01B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeed;                                             // 0x01B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeedBackwards;                                    // 0x01B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkBackwardsMinAngle;                                    // 0x01BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WalkBackwardsMaxAngle;                                    // 0x01C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x01C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x01C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x01CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x01D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x01D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxChargeAcceleration;                                    // 0x01D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x01DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x01E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                          // 0x01E4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnInstance BITFIELD: 0101)
	float                                              BrakingDecelerationWalking;                               // 0x01E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x01EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x01F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x01F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControl;                                               // 0x01F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x01FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x0200(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x0204(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x0208(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x020C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x0210(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x0214(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x0218(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x0224(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x0224(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x0224(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x0224(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x0224(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x0224(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x0224(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_EditConst BITFIELD: 4040)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x0224(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x0225(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x0225(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x0225(0x0001) ( BITFIELD: 0404)
	class USceneComponent*                             DeferredUpdatedMoveComponent;                             // 0x0228(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0230(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x0234(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Mass;                                                     // 0x0238(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnablePhysicsInteraction;                                // 0x023C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTouchForceScaledToMass;                                  // 0x023D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPushForceScaledToMass;                                   // 0x023E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bScalePushForceToVelocity;                                // 0x023F(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StandingDownwardForceScale;                               // 0x0240(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0244(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0248(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x024C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x0250(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0254(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0258(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x025C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NetMoveDelta;                                             // 0x0260(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bForceBraking : 1;                                        // 0x0264(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              CrouchedSpeedMultiplier;                                  // 0x0268(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              UpperImpactNormalScale;                                   // 0x026C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     Acceleration;                                             // 0x0270(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x027C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                                    // 0x0288(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x0294(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x02A0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02A4(0x0008) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x02AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x02B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x02B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x02BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x02C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFindFloorResult                            CurrentFloor;                                             // 0x02C4(0x008C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst)
	TEnumAsByte<EMovementMode>                         DefaultLandMovementMode;                                  // 0x0350(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode;                                 // 0x0351(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMovementMode>                         GroundMovementMode;                                       // 0x0352(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bJustTeleported : 1;                                      // 0x0354(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_Transient, CPF_EditConst BITFIELD: 2020)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x0354(0x0001) (CPF_Transient BITFIELD: 4040)
	unsigned char                                      bBasedMovementUpdateReceived : 1;                         // 0x0354(0x0001) (CPF_Transient BITFIELD: 8080)
	unsigned char                                      bMovementUpdateReceived : 1;                              // 0x0355(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x0355(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bNotifyApex : 1;                                          // 0x0355(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bCheatFlying : 1;                                         // 0x0355(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x0355(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst BITFIELD: 1010)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x0355(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_DisableEditOnTemplate, CPF_EditConst BITFIELD: 2020)
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x0355(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x0355(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x0356(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x0356(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bPreventSimulatedFloorChecks : 1;                         // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bPreventNavMeshFalling : 1;                               // 0x0356(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x0357(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x0357(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x0357(0x0001) (CPF_Transient BITFIELD: 0404)
	unsigned char                                      bUnknown0357_1010 : 1;                                    // 0x0357(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 1010)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x0357(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0358(0x0010) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x0368(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x036C(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x0378(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x037C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x0380(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x0384(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x0388(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x038C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x98];                                      // 0x0398(0x0098) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x0430(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x0434(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x0438(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x043C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x0440(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0444(0x0004) MISSED OFFSET
	struct FCharacterMovementComponentPreClothTickFunction PreClothComponentTick;                                    // 0x0448(0x0050)
	unsigned char                                      UnknownData06[0x14];                                      // 0x0498(0x0014) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x04AC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRootMotionMovementParams                   RootMotionParams;                                         // 0x04B0(0x0040) (CPF_Transient)
	unsigned char                                      bWasSimulatingRootMotion;                                 // 0x04F0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0xF];                                       // 0x04F1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CharacterMovementComponent")); }
		return ptr;
	}


	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerMoveOld(float OldTimeStamp, const struct FVector_NetQuantize10& OldAccel, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char OldMoveFlags);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FVector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float TimeStamp, const struct FVector_NetQuantize10& InAccel, const struct FVector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UPrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	bool IsWalking();
	bool IsWalkable(const struct FHitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UPrimitiveComponent* GetMovementBase();
	float GetMaxJumpHeight();
	float GetMaxAcceleration();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class ACharacter* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClientVeryShortAdjustPosition(float TimeStamp, const struct FVector& NewLoc, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float TimeStamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FVector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UPrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float TimeStamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UPrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float TimeStamp);
	void CapsuleTouched(class AActor* Other, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& Force);
};


// Class Engine.Controller
// 0x0060 (0x04C8 - 0x0468)
class AController : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	class APawn*                                       Pawn;                                                     // 0x0470(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	class ACharacter*                                  Character;                                                // 0x0480(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerState*                                PlayerState;                                              // 0x0488(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x0490(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FRotator                                    ControlRotation;                                          // 0x0498(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAttachToPawn : 1;                                        // 0x04A4(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0101)
	unsigned char                                      UnknownData02[0xB];                                       // 0x04A5(0x000B) MISSED OFFSET
	struct FName                                       StateName;                                                // 0x04B0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                    // 0x04B8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Controller")); }
		return ptr;
	}


	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ReceiveInstigatedAnyDamage(float Damage, class UDamageType* DamageType, class AActor* DamagedActor, class AActor* DamageCauser);
	void Possess(class APawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AActor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class APawn* K2_GetPawn();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AActor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class APlayerController* CastToPlayerController();
};


// Class Engine.PlayerController
// 0x0278 (0x0740 - 0x04C8)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x04C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D0(0x0008) MISSED OFFSET
	class APawn*                                       AcknowledgedPawn;                                         // 0x04D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x04E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET
	class AHUD*                                        MyHUD;                                                    // 0x04F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APlayerCameraManager*                        PlayerCameraManager;                                      // 0x04F8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      PlayerCameraManagerClass;                                 // 0x0500(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoManageActiveCameraTarget;                            // 0x0508(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    TargetViewRotation;                                       // 0x050C(0x000C) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0518(0x0010) MISSED OFFSET
	TArray<class AActor*>                              HiddenActors;                                             // 0x0528(0x0010) (CPF_ZeroConstructor)
	float                                              LastSpectatorStateSynchTime;                              // 0x0538(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                                // 0x053C(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                                // 0x0548(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ClientCap;                                                // 0x0554(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCheatManager*                               CheatManager;                                             // 0x0558(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      CheatClass;                                               // 0x0560(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPlayerInput*                                PlayerInput;                                              // 0x0568(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FActiveForceFeedbackEffect>          ActiveForceFeedbackEffects;                               // 0x0570(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData03[0x80];                                      // 0x0580(0x0080) MISSED OFFSET
	unsigned char                                      bUnknown0600_0202 : 1;                                    // 0x0600(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConstMANUAL_ADD_BIT 0202)
	unsigned char                                      bPlayerIsWaiting : 1;                                     // 0x0600(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst BITFIELD: 0404)
	unsigned char                                      NetPlayerIndex;                                           // 0x0604(0x0001) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      bHasVoiceHandshakeCompleted;                              // 0x0605(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UNetConnection*                              PendingSwapConnection;                                    // 0x0608(0x0008) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	class UNetConnection*                              NetConnection;                                            // 0x0610(0x0008) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0618(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x0624(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x0628(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InputRollScale;                                           // 0x062C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bEnableClickEvents : 1;                                   // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bEnableTouchEvents : 1;                                   // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bEnableMouseOverEvents : 1;                               // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bEnableTouchOverEvents : 1;                               // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bForceFeedbackEnabled : 1;                                // 0x0630(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	TEnumAsByte<EMouseCursor>                          DefaultMouseCursor;                                       // 0x0634(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMouseCursor>                          CurrentMouseCursor;                                       // 0x0635(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel;                                 // 0x0636(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel;                                 // 0x0637(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x0638(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceFeedbackIntensity;                                   // 0x063C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x88];                                      // 0x0640(0x0088) MISSED OFFSET
	class UInputComponent*                             InactiveStateInputComponent;                              // 0x06C8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x18];                                      // 0x06D0(0x0018) MISSED OFFSET
	class UTouchInterface*                             CurrentTouchInterface;                                    // 0x06E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x30];                                      // 0x06F0(0x0030) MISSED OFFSET
	class ASpectatorPawn*                              SpectatorPawn;                                            // 0x0720(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     SpawnLocation;                                            // 0x0728(0x000C) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0734(0x0004) MISSED OFFSET
	unsigned char                                      bIsLocalPlayerController;                                 // 0x0738(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint16_t                                           SeamlessTravelCount;                                      // 0x073A(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x073C(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInCinematicMode;                                         // 0x073E(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerController")); }
		return ptr;
	}


	bool WasInputKeyJustReleased(const struct FKey& Key);
	bool WasInputKeyJustPressed(const struct FKey& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect(TEnumAsByte<EControllerHand> Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetHapticsByValue(float Frequency, float Amplitude, TEnumAsByte<EControllerHand> Hand);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class USceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateCamera(const struct FVector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class APawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UHapticFeedbackEffect* HapticEffect, TEnumAsByte<EControllerHand> Hand, float Scale);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<EDynamicForceFeedbackAction> Action, const struct FLatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& URL);
	bool IsSeamlessTravelInProgress();
	bool IsPossessingServerAcknowledgedPawn();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsInputKeyDown(const struct FKey& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class ASpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FKey& Key);
	void GetInputTouchState(TEnumAsByte<ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FKey& Key);
	void GetInputAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FKey& Key);
	class AHUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<ETouchIndex> FingerIndex, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<ETouchIndex> FingerIndex, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, struct FHitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FKey& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class APlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake);
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientSeamlessTravelComplete();
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class APawn* NewPawn);
	void ClientRestart(class APawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerState* RelatedPlayerState_2, class APlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class USoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback(class UForceFeedbackEffect* ForceFeedbackEffect, bool bLooping, const struct FName& Tag);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FUniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class Engine.CheatManager
// 0x0050 (0x0078 - 0x0028)
class UCheatManager : public UObject
{
public:
	class ADebugCameraController*                      DebugCameraControllerRef;                                 // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DebugCameraControllerClass;                               // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0038(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CheatManager")); }
		return ptr;
	}


	void WidgetReflector();
	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TextureAtlasVisualizer();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void Slomo(float T);
	void SetWorldOrigin();
	void SetNavDrawDistance(float DrawDistance);
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void RebuildNavigation();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void FontAtlasVisualizer();
	void Fly();
	void FlushLog();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DestroyTarget();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};


// Class Engine.Engine
// 0x09D0 (0x09F8 - 0x0028)
class UEngine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UFont*                                       TinyFont;                                                 // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       TinyFontName;                                             // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       SmallFont;                                                // 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       SmallFontName;                                            // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       MediumFont;                                               // 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       MediumFontName;                                           // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       LargeFont;                                                // 0x0078(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       LargeFontName;                                            // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       MonoFont;                                                 // 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       MonoFontName;                                             // 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UFont*                                       SubtitleFont;                                             // 0x00A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       SubtitleFontName;                                         // 0x00B0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x00C0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x00D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UClass*                                      ConsoleClass;                                             // 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       ConsoleClassName;                                         // 0x00F0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      GameViewportClientClass;                                  // 0x0100(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       GameViewportClientClassName;                              // 0x0108(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      LocalPlayerClass;                                         // 0x0118(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       LocalPlayerClassName;                                     // 0x0120(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      WorldSettingsClass;                                       // 0x0130(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       WorldSettingsClassName;                                   // 0x0138(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       NavigationSystemClassName;                                // 0x0148(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      NavigationSystemClass;                                    // 0x0158(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       AvoidanceManagerClassName;                                // 0x0160(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      AvoidanceManagerClass;                                    // 0x0170(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x0178(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       PhysicsCollisionHandlerClassName;                         // 0x0180(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       GameUserSettingsClassName;                                // 0x0190(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UClass*                                      GameUserSettingsClass;                                    // 0x01A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       AIControllerClassName;                                    // 0x01A8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UGameUserSettings*                           GameUserSettings;                                         // 0x01B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      LevelScriptActorClass;                                    // 0x01C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       LevelScriptActorClassName;                                // 0x01C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       DefaultBlueprintBaseClassName;                            // 0x01D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FStringClassReference                       GameSingletonClassName;                                   // 0x01E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	class UObject*                                     GameSingleton;                                            // 0x01F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTireType*                                   DefaultTireType;                                          // 0x0200(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultTireTypeName;                                      // 0x0208(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UClass*                                      DefaultPreviewPawnClass;                                  // 0x0218(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringClassReference                       DefaultPreviewPawnClassName;                              // 0x0220(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FString                                     PlayOnConsoleSaveDir;                                     // 0x0230(0x0010) (CPF_ZeroConstructor, CPF_Config)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0240(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultTextureName;                                       // 0x0248(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture*                                    DefaultDiffuseTexture;                                    // 0x0258(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultDiffuseTextureName;                                // 0x0260(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  DefaultBSPVertexTexture;                                  // 0x0270(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultBSPVertexTextureName;                              // 0x0278(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  HighFrequencyNoiseTexture;                                // 0x0288(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       HighFrequencyNoiseTextureName;                            // 0x0290(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  DefaultBokehTexture;                                      // 0x02A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultBokehTextureName;                                  // 0x02A8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   WireframeMaterial;                                        // 0x02B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     WireframeMaterialName;                                    // 0x02C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   DebugMeshMaterial;                                        // 0x02D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DebugMeshMaterialName;                                    // 0x02D8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x02E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x02F0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x0300(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x0308(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x0318(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     LightingTexelDensityName;                                 // 0x0320(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x0330(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x0338(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x0348(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x0350(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x0360(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       RemoveSurfaceMaterialName;                                // 0x0368(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x0378(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorMaterialName;                                  // 0x0380(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x0390(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x0398(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x03A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x03B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x03C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x03C8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x03D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x03E0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x03F0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x03F8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ConstraintLimitMaterial;                                  // 0x0408(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialX;                                 // 0x0410(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialY;                                 // 0x0418(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInstanceDynamic*                    ConstraintLimitMaterialZ;                                 // 0x0420(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       ConstraintLimitMaterialName;                              // 0x0428(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   InvalidLightmapSettingsMaterial;                          // 0x0438(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       InvalidLightmapSettingsMaterialName;                      // 0x0440(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   PreviewShadowsIndicatorMaterial;                          // 0x0450(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       PreviewShadowsIndicatorMaterialName;                      // 0x0458(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UMaterial*                                   ArrowMaterial;                                            // 0x0468(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       ArrowMaterialName;                                        // 0x0470(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x0480(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	TArray<struct FColor>                              LightComplexityColors;                                    // 0x0490(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x04A0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                             // 0x04B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                      // 0x04C0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x04D0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                 // 0x04D4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MinLightMapDensity;                                       // 0x04D8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x04DC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x04E0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                      // 0x04E4(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0101)
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x04E8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x04EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x04F0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x0500(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x0510(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0520(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       DefaultPhysMaterialName;                                  // 0x0528(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FGameNameRedirect>                   ActiveGameNameRedirects;                                  // 0x0538(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FClassRedirect>                      ActiveClassRedirects;                                     // 0x0548(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FPluginRedirect>                     ActivePluginRedirects;                                    // 0x0558(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FStructRedirect>                     ActiveStructRedirects;                                    // 0x0568(0x0010) (CPF_ZeroConstructor, CPF_Config)
	class UTexture2D*                                  PreIntegratedSkinBRDFTexture;                             // 0x0578(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       PreIntegratedSkinBRDFTextureName;                         // 0x0580(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  MiniFontTexture;                                          // 0x0590(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       MiniFontTextureName;                                      // 0x0598(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x05A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       WeightMapPlaceholderTextureName;                          // 0x05B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x05C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FStringAssetReference                       LightMapDensityTextureName;                               // 0x05C8(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData02[0x8];                                       // 0x05D8(0x0008) MISSED OFFSET
	class UGameViewportClient*                         GameViewport;                                             // 0x05E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FString>                             DeferredCommands;                                         // 0x05E8(0x0010) (CPF_ZeroConstructor)
	int                                                TickCycles;                                               // 0x05F8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                GameCycles;                                               // 0x05FC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ClientCycles;                                             // 0x0600(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearClipPlane;                                            // 0x0604(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bHardwareSurveyEnabled : 1;                               // 0x0608(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      bSubtitlesEnabled : 1;                                    // 0x0608(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bSubtitlesForcedOff : 1;                                  // 0x0608(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	int                                                MaximumLoopIterationCount;                                // 0x060C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                          // 0x0610(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;           // 0x0610(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                         // 0x0610(0x0001) (CPF_Config BITFIELD: 0404)
	unsigned char                                      bUnknown0610_0808 : 1;                                    // 0x0610(0x0001) (CPF_Edit, CPF_ConfigMANUAL_ADD_BIT 0808)
	unsigned char                                      bSmoothFrameRate : 1;                                     // 0x0610(0x0001) (CPF_Edit, CPF_Config BITFIELD: 1010)
	unsigned char                                      bUseFixedFrameRate : 1;                                   // 0x0610(0x0001) (CPF_Edit, CPF_Config BITFIELD: 2020)
	float                                              FixedFrameRate;                                           // 0x0614(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                                   // 0x0618(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x0628(0x0001) (CPF_Config BITFIELD: 0101)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x062C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                   // 0x0630(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0101)
	struct FColor                                      C_WorldBox;                                               // 0x0634(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BrushWire;                                              // 0x0638(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_AddWire;                                                // 0x063C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                           // 0x0640(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_SemiSolidWire;                                          // 0x0644(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                           // 0x0648(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_WireBackground;                                         // 0x064C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x0650(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                        // 0x0654(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BSPCollision;                                           // 0x0658(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                        // 0x065C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_Volume;                                                 // 0x0660(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      C_BrushShape;                                             // 0x0664(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x0668(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x066C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     TransitionDescription;                                    // 0x0670(0x0010) (CPF_ZeroConstructor)
	struct FString                                     TransitionGameMode;                                       // 0x0680(0x0010) (CPF_ZeroConstructor)
	float                                              MeshLODRange;                                             // 0x0690(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bAllowMatureLanguage : 1;                                 // 0x0694(0x0001) (CPF_Config BITFIELD: 0101)
	float                                              CameraRotationThreshold;                                  // 0x0698(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x069C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x06A0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x06A4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                  // 0x06A8(0x0001) (CPF_Config BITFIELD: 0101)
	int                                                MaxParticleResize;                                        // 0x06AC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x06B0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x06B4(0x0004) MISSED OFFSET
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x06B8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FRigidBodyErrorCorrection                   PhysicErrorCorrection;                                    // 0x06C8(0x001C) (CPF_Config)
	float                                              NetClientTicksPerSecond;                                  // 0x06E4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bHasPendingGlobalReregister : 1;                          // 0x06E8(0x0001) (CPF_Transient BITFIELD: 0101)
	float                                              DisplayGamma;                                             // 0x06EC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x06F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x06F4(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x0704(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                                    // 0x0714(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                             // 0x0724(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                            // 0x0734(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsOverridingSelectedColor;                               // 0x0744(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                         // 0x0748(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0101)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x0748(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bSuppressMapWarnings : 1;                                 // 0x0748(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0404)
	unsigned char                                      bCookSeparateSharedMPGameContent : 1;                     // 0x0748(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0808)
	unsigned char                                      bDisableAILogging : 1;                                    // 0x0748(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 1010)
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x074C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0750(0x0004) MISSED OFFSET
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x0754(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                                  // 0x0758(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0759(0x0007) MISSED OFFSET
	struct FString                                     ParticleEventManagerClassPath;                            // 0x0760(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0770(0x0010) MISSED OFFSET
	float                                              SelectionHighlightIntensity;                              // 0x0780(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x0784(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HoverHighlightIntensity;                                  // 0x0788(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x078C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x1F8];                                     // 0x0790(0x01F8) MISSED OFFSET
	TArray<struct FNetDriverDefinition>                NetDriverDefinitions;                                     // 0x0988(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_Config)
	TArray<struct FString>                             ServerActors;                                             // 0x0998(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             RuntimeServerActors;                                      // 0x09A8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bStartedLoadMapMovie : 1;                                 // 0x09B8(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData08[0x17];                                      // 0x09B9(0x0017) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x09D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData09[0x24];                                      // 0x09D4(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Engine")); }
		return ptr;
	}

};


// Class Engine.GameEngine
// 0x0060 (0x0A58 - 0x09F8)
class UGameEngine : public UEngine
{
public:
	float                                              MaxDeltaTime;                                             // 0x09F8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x09FC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0A00(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0A08(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameEngine")); }
		return ptr;
	}

};


// Class Engine.GameInstance
// 0x0058 (0x0080 - 0x0028)
class UGameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class ULocalPlayer*>                        LocalPlayers;                                             // 0x0038(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	class UOnlineSession*                              OnlineSession;                                            // 0x0050(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0058(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameInstance")); }
		return ptr;
	}


	void ReceiveShutdown();
	void ReceiveInit();
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
};


// Class Engine.Info
// 0x0000 (0x0468 - 0x0468)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Info")); }
		return ptr;
	}

};


// Class Engine.GameMode
// 0x00E8 (0x0550 - 0x0468)
class AGameMode : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	unsigned char                                      bUnknown0468_0101 : 1;                                    // 0x0468(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0468_0202 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0468_0404 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0468_0808 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0468_1010 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0468_2020 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0468_4040 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0468_8080 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseSeamlessTravel : 1;                                   // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bPauseable : 1;                                           // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bStartPlayersAsSpectators : 1;                            // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bDelayedStart : 1;                                        // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	struct FString                                     OptionsString;                                            // 0x0478(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	class UClass*                                      DefaultPawnClass;                                         // 0x0488(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      HUDClass;                                                 // 0x0490(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumSpectators;                                            // 0x0498(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumPlayers;                                               // 0x049C(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumBots;                                                  // 0x04A0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AGameSession*                                GameSession;                                              // 0x04A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x04B0(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04B4(0x0004) MISSED OFFSET
	struct FText                                       DefaultPlayerName;                                        // 0x04B8(0x0028) (CPF_Edit)
	class UClass*                                      EngineMessageClass;                                       // 0x04E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                                    // 0x04E8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x04F0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                     // 0x04F8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      PlayerStateClass;                                         // 0x0500(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      GameStateClass;                                           // 0x0508(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class AGameState*                                  GameState;                                                // 0x0510(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class APlayerState*>                        InactivePlayerArray;                                      // 0x0518(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0528(0x0010) MISSED OFFSET
	TArray<struct FGameClassShortName>                 GameModeClassAliases;                                     // 0x0538(0x0010) (CPF_ZeroConstructor, CPF_Config)
	float                                              InactivePlayerStateLifeSpan;                              // 0x0548(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHandleDedicatedServerReplays;                            // 0x054C(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameMode")); }
		return ptr;
	}


	void StartPlay();
	void StartMatch();
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class AActor* StartSpot);
	bool ShouldReset(class AActor* ActorToReset);
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void ReturnToMainMenuHost();
	void RestartGame();
	void ResetLevel();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	bool PlayerCanRestart(class APlayerController* Player);
	bool MustSpectate(class APlayerController* NewPlayerController);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void K2_OnSetMatchState(const struct FName& NewState);
	void K2_OnRestartPlayer(class AController* NewPlayer);
	void K2_OnLogout(class AController* ExitingController);
	void K2_OnChangeName(class AController* Other, const struct FString& NewName, bool bNameChange);
	class AActor* K2_FindPlayerStart(class AController* Player);
	bool IsMatchInProgress();
	void InitStartSpot(class AActor* StartSpot, class AController* NewPlayer);
	bool HasMatchStarted();
	bool HasMatchEnded();
	int GetNumPlayers();
	struct FName GetMatchState();
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	class AActor* FindPlayerStart(class AController* Player, const struct FString& IncomingName);
	void EndMatch();
	class AActor* ChoosePlayerStart(class AController* Player);
	void ChangeName(class AController* Controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class APlayerController* Viewer, class APlayerState* ViewTarget);
	void AbortMatch();
};


// Class Engine.PrimitiveComponent
// 0x0370 (0x0650 - 0x02E0)
class UPrimitiveComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02E0(0x0008) MISSED OFFSET
	float                                              MinDrawDistance;                                          // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	float                                              LDMaxDrawDistance;                                        // 0x02F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x02F8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x02F9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                            // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bGenerateOverlapEvents : 1;                               // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 0202)
	unsigned char                                      bMultiBodyOverlap : 1;                                    // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bCheckAsyncSceneOnMove : 1;                               // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bTraceComplexOnMove : 1;                                  // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bReturnMaterialOnMove : 1;                                // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x02FC(0x0001) ( BITFIELD: 4040)
	unsigned char                                      bAllowCullDistanceVolume : 1;                             // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                         // 0x02FD(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bRenderInMainPass : 1;                                    // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bReflected : 1;                                           // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bUnknown02FD_0808 : 1;                                    // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0808)
	unsigned char                                      bReflectedOnLowQuality : 1;                               // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bFFTWaterMask : 1;                                        // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bUnknown02FD_4040 : 1;                                    // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 4040)
	unsigned char                                      bAffectsFlatWater : 1;                                    // 0x02FD(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	unsigned char                                      bGPUParticlesKillPlane : 1;                               // 0x02FE(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bDontCull : 1;                                            // 0x02FE(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bDontSizeOnScreenCull : 1;                                // 0x02FE(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      UnknownData02[0x1];                                       // 0x02FF(0x0001) MISSED OFFSET
	unsigned char                                      bOverrideShadowMinSizeCulling;                            // 0x0300(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OverriddenShadowMinTexelSize;                             // 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideShadowCascadesExclusion;                         // 0x0308(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EExcludeFromCascades>                  ExcludedShadowCascades;                                   // 0x0309(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReceivesDecals : 1;                                      // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bOwnerNoSee : 1;                                          // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bOnlyOwnerSee : 1;                                        // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                       // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bIsACloud : 1;                                            // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bUseAsOccluder : 1;                                       // 0x030C(0x0001) ( BITFIELD: 2020)
	unsigned char                                      bSelectable : 1;                                          // 0x030C(0x0001) ( BITFIELD: 4040)
	unsigned char                                      bForceMipStreaming : 1;                                   // 0x030C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                            // 0x030D(0x0001) ( BITFIELD: 0101)
	unsigned char                                      CastShadow : 1;                                           // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bUseFarCascadeLPVBiasMultiplier : 1;                      // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                         // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bCastDynamicShadow : 1;                                   // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      bCastStaticShadow : 1;                                    // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                     // 0x030D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bSelfShadowOnly : 1;                                      // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bCastFarShadow : 1;                                       // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bCastInsetShadow : 1;                                     // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bCastCinematicShadow : 1;                                 // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bCastHiddenShadow : 1;                                    // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      bCastShadowOnLowQuality : 1;                              // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bLightAsIfStatic : 1;                                     // 0x030E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                             // 0x030F(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality;                             // 0x0310(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasCachedStaticLighting;                                 // 0x0311(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStaticLightingBuildEnqueued;                             // 0x0312(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                 // 0x0314(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bIgnoreRadialForce : 1;                                   // 0x0314(0x0001) ( BITFIELD: 0202)
	unsigned char                                      AlwaysLoadOnClient : 1;                                   // 0x0314(0x0001) ( BITFIELD: 0404)
	unsigned char                                      AlwaysLoadOnServer : 1;                                   // 0x0314(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bUseEditorCompositing : 1;                                // 0x0314(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bRenderCustomDepth : 1;                                   // 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	int                                                CustomDepthStencilValue;                                  // 0x0318(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TranslucencySortPriority;                                 // 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VisibilityId;                                             // 0x0320(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0324(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarCascadeLPVBiasMultiplier;                              // 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LpvIntensityMultiplier;                                   // 0x0330(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectRain : 1;                                          // 0x0334(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	struct FBodyInstance                               BodyInstance;                                             // 0x0338(0x0178) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCanEverAffectNavigation : 1;                             // 0x04B0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bUnknown04B0_0202 : 1;                                    // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0202)
	unsigned char                                      bSkipRenderingInOuterLPVCascades : 1;                     // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bEnableMergeCollisionComponents : 1;                      // 0x04B0(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerUnderwater : 1;            // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bVisibleWhenAboveWaterAndPlayerAbove : 1;                 // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerAbove : 1;                 // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bVisibleWhenUnderwaterAndPlayerUnderwater : 1;            // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	unsigned char                                      UnknownData04[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET
	TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry;                              // 0x04B8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BoundsScale;                                              // 0x04BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OcclusionBoundsScale;                                     // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastSubmitTime;                                           // 0x04C4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              LastRenderTime;                                           // 0x04C8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bGPUVisibility;                                           // 0x04CC(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECanBeCharacterBase>                   CanBeCharacterBase;                                       // 0x04CD(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn;                                     // 0x04CE(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x21];                                      // 0x04CF(0x0021) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentHit;                                           // 0x04F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentBeginOverlap;                                  // 0x0500(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentEndOverlap;                                    // 0x0510(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentWake;                                          // 0x0520(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnComponentSleep;                                         // 0x0530(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeginCursorOver;                                        // 0x0540(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEndCursorOver;                                          // 0x0550(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnClicked;                                                // 0x0560(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleased;                                               // 0x0570(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchBegin;                                        // 0x0580(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnd;                                          // 0x0590(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchEnter;                                        // 0x05A0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInputTouchLeave;                                        // 0x05B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData06[0x30];                                      // 0x05C0(0x0030) MISSED OFFSET
	class UPrimitiveComponent*                         LODParentPrimitive;                                       // 0x05F0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FPrimitiveComponentPostPhysicsTickFunction  PostPhysicsComponentTick;                                 // 0x05F8(0x0050)
	class UPrimitiveComponent*                         MergedCollisionComponentParent;                           // 0x0648(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PrimitiveComponent")); }
		return ptr;
	}


	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FWalkableSlopeOverride& NewOverride);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLockedAxis(TEnumAsByte<EDOFMode> LockedAxis);
	void SetLinearDamping(float InDamping);
	void SetGenerateOverlapEvents(bool bEnable);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetAngularDamping(float InDamping);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName);
	bool IsOverlappingComponent(class UPrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AActor* Other);
	bool IsGravityEnabled();
	void IgnoreActorWhenMoving(class AActor* Actor, bool bShouldIgnore);
	struct FWalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UPrimitiveComponent*>* InOverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AActor*>* OverlappingActors);
	TArray<struct FOverlapInfo> GetOverlapInfos();
	int GetNumMaterials();
	class UMaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(const struct FName& BoneName);
	TEnumAsByte<ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<ECollisionChannel> Channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<ECollisionChannel> GetCollisionObjectType();
	float GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UMaterialInterface* SourceMaterial);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UMaterialInterface* Parent);
	class UMaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class AActor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class APawn* Pawn);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& Force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.GameUserSettings
// 0x0050 (0x0078 - 0x0028)
class UGameUserSettings : public UObject
{
public:
	unsigned char                                      bUseVSync;                                                // 0x0028(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0029(0x001F) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0048(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                WindowPosY;                                               // 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bUseDesktopResolutionForFullscreen;                       // 0x0060(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                FullscreenMode;                                           // 0x0064(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x0068(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	uint32_t                                           Version;                                                  // 0x006C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x0070(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameUserSettings")); }
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0008 (0x0030 - 0x0028)
class UScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ScriptViewportClient")); }
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x0310 (0x0340 - 0x0030)
class UGameViewportClient : public UScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UConsole*                                    ViewportConsole;                                          // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x0040(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0050(0x0030) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0080(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UGameInstance*                               GameInstance;                                             // 0x0088(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2B0];                                     // 0x0090(0x02B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameViewportClient")); }
		return ptr;
	}


	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
};


// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UPlayer : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class APlayerController*                           PlayerController;                                         // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                CurrentNetSpeed;                                          // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x003C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Player")); }
		return ptr;
	}

};


// Class Engine.LocalPlayer
// 0x0170 (0x01B8 - 0x0048)
class ULocalPlayer : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0048(0x0010) MISSED OFFSET
	class UGameViewportClient*                         ViewportClient;                                           // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0060(0x0040) MISSED OFFSET
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                // 0x00A0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	class UClass*                                      PendingLevelPlayerControllerClass;                        // 0x00A8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSentSplitJoin : 1;                                       // 0x00B0(0x0001) (CPF_Edit, CPF_Transient, CPF_EditConst BITFIELD: 0101)
	float                                              MinimumAspectRatio;                                       // 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x100];                                     // 0x00B8(0x0100) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LocalPlayer")); }
		return ptr;
	}

};


// Class Engine.PlayerCameraManager
// 0x1808 (0x1C70 - 0x0468)
class APlayerCameraManager : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x0468(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class USceneComponent*                             TransformComponent;                                       // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x048C(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                                       // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4C];                                      // 0x0494(0x004C) MISSED OFFSET
	struct FCameraCacheEntry                           CameraCache;                                              // 0x04E0(0x0590) (CPF_Transient)
	struct FCameraCacheEntry                           LastFrameCameraCache;                                     // 0x0A70(0x0590) (CPF_Transient)
	struct FTViewTarget                                ViewTarget;                                               // 0x1000(0x05A0) (CPF_Transient)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x15A0(0x05A0) (CPF_Transient)
	unsigned char                                      UnknownData04[0x18];                                      // 0x1B40(0x0018) MISSED OFFSET
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x1B58(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UClass*>                              DefaultModifiers;                                         // 0x1B68(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance)
	float                                              FreeCamDistance;                                          // 0x1B78(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     FreeCamOffset;                                            // 0x1B7C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     ViewTargetOffset;                                         // 0x1B88(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                                      // 0x1B94(0x0014) MISSED OFFSET
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                        // 0x1BA8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UCameraModifier_CameraShake*                 CachedCameraShakeMod;                                     // 0x1BB8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x1BC0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FPostProcessSettings>                PostProcessBlendCache;                                    // 0x1C00(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData06[0x10];                                      // 0x1C10(0x0010) MISSED OFFSET
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x1C20(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x1C30(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class ACameraActor*                                AnimCameraActor;                                          // 0x1C40(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                                      // 0x1C48(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUnknown1C48_2020 : 1;                                    // 0x1C48(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 2020)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                          // 0x1C48(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bUnknown1C48_8080 : 1;                                    // 0x1C48(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 8080)
	unsigned char                                      bUnknown1C49_0101 : 1;                                    // 0x1C49(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown1C49_0202 : 1;                                    // 0x1C49(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown1C49_0404 : 1;                                    // 0x1C49(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown1C49_0808 : 1;                                    // 0x1C49(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown1C49_1010 : 1;                                    // 0x1C49(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bFollowHmdOrientation : 1;                                // 0x1C49(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	float                                              ViewPitchMin;                                             // 0x1C4C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x1C50(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x1C54(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x1C58(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewRollMin;                                              // 0x1C5C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ViewRollMax;                                              // 0x1C60(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x1C64(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerCameraManager")); }
		return ptr;
	}


	void StopCameraShake(class UCameraShake* ShakeInstance);
	void StopCameraFade();
	void StopCameraAnimInst(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(class UClass* Shake);
	void StopAllInstancesOfCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes();
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	bool RemoveCameraModifier(class UCameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	class UCameraShake* PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	bool IsScreenFullyOccluded();
	bool IsFadeInProgress();
	class APlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UCameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AActor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UCameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class AEmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};


// Class Engine.PlayerState
// 0x0088 (0x04F0 - 0x0468)
class APlayerState : public AInfo
{
public:
	float                                              Score;                                                    // 0x0468(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      Ping;                                                     // 0x046C(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     PlayerName;                                               // 0x0470(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	int                                                PlayerId;                                                 // 0x0490(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSpectator : 1;                                         // 0x0494(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net BITFIELD: 0101)
	unsigned char                                      bOnlySpectator : 1;                                       // 0x0494(0x0001) (CPF_Net BITFIELD: 0202)
	unsigned char                                      bIsABot : 1;                                              // 0x0494(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net BITFIELD: 0404)
	unsigned char                                      bUnknown0494_0808 : 1;                                    // 0x0494(0x0001) (CPF_NetMANUAL_ADD_BIT 0808)
	unsigned char                                      bIsInactive : 1;                                          // 0x0494(0x0001) (CPF_Net BITFIELD: 1010)
	unsigned char                                      bFromPreviousLevel : 1;                                   // 0x0494(0x0001) (CPF_Net BITFIELD: 2020)
	int                                                StartTime;                                                // 0x0498(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	class UClass*                                      EngineMessageClass;                                       // 0x04A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x04A8(0x0018) MISSED OFFSET
	struct FUniqueNetIdRepl                            UniqueId;                                                 // 0x04C0(0x0010) (CPF_Net)
	unsigned char                                      UnknownData03[0x20];                                      // 0x04D0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerState")); }
		return ptr;
	}


	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_bIsInactive();
};


// Class Engine.SpringArmComponent
// 0x0090 (0x0370 - 0x02E0)
class USpringArmComponent : public USceneComponent
{
public:
	float                                              TargetArmLength;                                          // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     SocketOffset;                                             // 0x02E4(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     TargetOffset;                                             // 0x02F0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ProbeSize;                                                // 0x02FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     ProbeChannel;                                             // 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDoCollisionTest : 1;                                     // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bInheritPitch : 1;                                        // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bInheritYaw : 1;                                          // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bInheritRoll : 1;                                         // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bEnableCameraLag : 1;                                     // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bEnableCameraRotationLag : 1;                             // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bUseCameraLagSubstepping : 1;                             // 0x0304(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                 // 0x0305(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              CameraLagSpeed;                                           // 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0318(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SpringArmComponent")); }
		return ptr;
	}

};


// Class Engine.StaticMeshActor
// 0x0010 (0x0478 - 0x0468)
class AStaticMeshActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bStaticMeshReplicateMovement;                             // 0x0470(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ENavDataGatheringMode>                 NavigationGeometryGatheringMode;                          // 0x0471(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0472(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshActor")); }
		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x01A8 (0x0610 - 0x0468)
class AWorldSettings : public AInfo
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	unsigned char                                      bUnknown0468_0101 : 1;                                    // 0x0468(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0468_0202 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0468_0404 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0468_0808 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0468_1010 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0468_2020 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0468_4040 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0468_8080 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                             // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bEnableNavigationSystem : 1;                              // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Config BITFIELD: 0202)
	TEnumAsByte<EWorldCompositionSetting>              WorldCompositionSetting;                                  // 0x0474(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                           // 0x0478(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bWorldGravitySet : 1;                                     // 0x0478(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bGlobalGravitySet : 1;                                    // 0x0478(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	float                                              KillZ;                                                    // 0x047C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      KillZDamageType;                                          // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldGravityZ;                                            // 0x0488(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x048C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DefaultPhysicsVolumeClass;                                // 0x0490(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x0498(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DefaultGameMode;                                          // 0x04A0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FGameModePrefix>                     DefaultMapPrefixes;                                       // 0x04A8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	class UClass*                                      GameNetworkManagerClass;                                  // 0x04B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x04C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMinimizeBSPSections : 1;                                 // 0x04C4(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector                                     DefaultColorScale;                                        // 0x04C8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                                // 0x04D4(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                     // 0x04D4(0x0001) (CPF_Edit BITFIELD: 0202)
	int                                                VisibilityCellSize;                                       // 0x04D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x04DC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                          // 0x04E0(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                        // 0x04E4(0x0044) (CPF_Edit)
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x0528(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0529(0x0007) MISSED OFFSET
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x0530(0x0018) (CPF_Edit, CPF_Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x0548(0x0024) (CPF_Edit, CPF_Config)
	unsigned char                                      UnknownData02[0x4];                                       // 0x056C(0x0004) MISSED OFFSET
	class USoundMix*                                   DefaultBaseSoundMix;                                      // 0x0570(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x0578(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x057C(0x0004) MISSED OFFSET
	class UBookMark*                                   BookMarks[0xA];                                           // 0x0580(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeDilation;                                             // 0x05D0(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x05D4(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x05D8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x05DC(0x0004) MISSED OFFSET
	class APlayerState*                                Pauser;                                                   // 0x05E0(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHighPriorityLoading : 1;                                 // 0x05E8(0x0001) (CPF_Net BITFIELD: 0101)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                            // 0x05E8(0x0001) ( BITFIELD: 0202)
	unsigned char                                      UnknownData05[0x7];                                       // 0x05E9(0x0007) MISSED OFFSET
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x05F0(0x0010) (CPF_ZeroConstructor)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0600(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WorldSettings")); }
		return ptr;
	}


	void OnRep_WorldGravityZ();
};


// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UCameraModifier : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bDebug : 1;                                               // 0x0028(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bExclusive : 1;                                           // 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnInstance BITFIELD: 0202)
	unsigned char                                      Priority;                                                 // 0x002C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	class APlayerCameraManager*                        CameraOwner;                                              // 0x0030(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	float                                              Alpha;                                                    // 0x0040(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier")); }
		return ptr;
	}


	bool IsDisabled();
	class AActor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FPostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};


// Class Engine.Texture
// 0x0110 (0x0138 - 0x0028)
class UTexture : public UObject
{
public:
	int                                                LODBias;                                                  // 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      SRGB : 1;                                                 // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      NeverStream : 1;                                          // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bNoTiling : 1;                                            // 0x0030(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bUseCinematicMipLevels : 1;                               // 0x0030(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      CompressionNone : 1;                                      // 0x0030(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bUAV : 1;                                                 // 0x0030(0x0001) ( BITFIELD: 2020)
	uint32_t                                           MaxQualityReduction;                                      // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                CachedCombinedLODBias;                                    // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x003C(0x0001) (CPF_Transient BITFIELD: 0101)
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x0040(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0041(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0042(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingPriorityBoost;                                   // 0x0044(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x58];                                      // 0x0048(0x0058) MISSED OFFSET
	TArray<struct FExternalMip>                        ExternalMips;                                             // 0x00A0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x88];                                      // 0x00B0(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Texture")); }
		return ptr;
	}

};


// Class Engine.TextureRenderTarget
// 0x0008 (0x0140 - 0x0138)
class UTextureRenderTarget : public UTexture
{
public:
	float                                              TargetGamma;                                              // 0x0138(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget")); }
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0028 (0x0168 - 0x0140)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x0140(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                                    // 0x0144(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x0148(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0158(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0159(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x015C(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bHDR : 1;                                                 // 0x015C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bAutoGenerateMips : 1;                                    // 0x015C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0160(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDontClearOnCreation;                                     // 0x0161(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0162(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTarget2D")); }
		return ptr;
	}

};


// Class Engine.DebugCameraController
// 0x0050 (0x0790 - 0x0740)
class ADebugCameraController : public APlayerController
{
public:
	unsigned char                                      bUnknown0740_0101 : 1;                                    // 0x0740(0x0001) (CPF_Config, CPF_GlobalConfigMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0740_0202 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0740_0404 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0740_0808 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0740_1010 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0740_2020 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0740_4040 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0740_8080 : 1;                                    // 0x0740(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseOriginalPlayerHUD : 1;                                // 0x0740(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0101)
	unsigned char                                      bShowSelectedInfo : 1;                                    // 0x0740(0x0001) (CPF_Config, CPF_GlobalConfig BITFIELD: 0202)
	unsigned char                                      bIsFrozenRendering : 1;                                   // 0x0740(0x0001) ( BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0741(0x0007) MISSED OFFSET
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0748(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0750(0x0010) MISSED OFFSET
	class APlayerController*                           OriginalControllerRef;                                    // 0x0760(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPlayer*                                     OriginalPlayer;                                           // 0x0768(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedScale;                                               // 0x0770(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x0774(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0778(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InitialDecel;                                             // 0x077C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedScaleAdjustment;                                     // 0x0780(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FovScaleAdjustment;                                       // 0x0784(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0788(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraController")); }
		return ptr;
	}


	void ShowDebugSelectedInfo();
	void IncreaseFOV();
	void IncreaseCameraSpeed();
	void DecreaseFOV();
	void DecreaseCameraSpeed();
};


// Class Engine.MeshComponent
// 0x0010 (0x0660 - 0x0650)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  OverrideMaterials;                                        // 0x0650(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MeshComponent")); }
		return ptr;
	}


	void ResetDefaultMaterials();
	TArray<class UMaterialInterface*> GetMaterials();
};


// Class Engine.StaticMeshComponent
// 0x0070 (0x06D0 - 0x0660)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x0660(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PreviousLODLevel;                                         // 0x0664(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideMinLOD;                                          // 0x0668(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinLOD;                                                   // 0x066C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStaticMesh*                                 StaticMesh;                                               // 0x0670(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideNavigationToDefaultObstacle;                     // 0x0678(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideWireframeColor;                                  // 0x0679(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      WireframeColorOverride;                                   // 0x067C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x0680(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bOverrideLightMapRes : 1;                                 // 0x0680(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	int                                                OverriddenLightMapRes;                                    // 0x0684(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x0688(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubDivisionStepSize;                                      // 0x068C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseSubDivisions : 1;                                     // 0x0690(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0691(0x0007) MISSED OFFSET
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x0698(0x0010) (CPF_ZeroConstructor)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x06A8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x06B8(0x0018) (CPF_Edit, CPF_BlueprintVisible)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshComponent")); }
		return ptr;
	}


	bool SetStaticMesh(class UStaticMesh* NewMesh);
	void SetForcedLodModel(int NewForcedLodModel);
	void OnRep_StaticMesh(class UStaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
	void EnableAutomaticInstancing();
};


// Class Engine.HUD
// 0x00F8 (0x0560 - 0x0468)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                               // 0x0468(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      GreenColor;                                               // 0x046C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      RedColor;                                                 // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	class APlayerController*                           PlayerOwner;                                              // 0x0478(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                                     // 0x0480(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bShowHUD : 1;                                             // 0x0480(0x0001) (CPF_Config BITFIELD: 0202)
	unsigned char                                      bShowDebugInfo : 1;                                       // 0x0480(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                 // 0x0480(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bShowOverlays : 1;                                        // 0x0480(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bEnableDebugTextShadow : 1;                               // 0x0480(0x0001) ( BITFIELD: 2020)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0481(0x0007) MISSED OFFSET
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x0488(0x0010) (CPF_ZeroConstructor)
	float                                              LastHUDRenderTime;                                        // 0x0498(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RenderDelta;                                              // 0x049C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FName>                               DebugDisplay;                                             // 0x04A0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                   // 0x04B0(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	class UCanvas*                                     Canvas;                                                   // 0x04C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCanvas*                                     DebugCanvas;                                              // 0x04C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x04D0(0x0010) (CPF_ZeroConstructor)
	class UClass*                                      ShowDebugTargetDesiredClass;                              // 0x04E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AActor*                                      ShowDebugTargetActor;                                     // 0x04E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x70];                                      // 0x04F0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HUD")); }
		return ptr;
	}


	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AActor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void GetTextSize(const struct FString& Text, class UFont* Font, float Scale, float* OutWidth, float* OutHeight);
	class APlayerController* GetOwningPlayerController();
	class APawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AActor*>* OutActors);
	void DrawTextureSimple(class UTexture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UTexture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UFont* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UMaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UMaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.LevelScriptActor
// 0x0008 (0x0470 - 0x0468)
class ALevelScriptActor : public AActor
{
public:
	unsigned char                                      bUnknown0468_0101 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0468_0202 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0468_0404 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0468_0808 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0468_1010 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0468_2020 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0468_4040 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0468_8080 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bInputEnabled : 1;                                        // 0x0468(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptActor")); }
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void MatchStarted();
	void LevelReset();
	void InitialNetRelevantActorsCreated();
};


// Class Engine.NavigationObjectBase
// 0x0028 (0x0490 - 0x0468)
class ANavigationObjectBase : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0470(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                               // 0x0478(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                                // 0x0480(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                                    // 0x0488(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0489(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationObjectBase")); }
		return ptr;
	}

};


// Class Engine.PlayerStart
// 0x0008 (0x0498 - 0x0490)
class APlayerStart : public ANavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                           // 0x0490(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerStart")); }
		return ptr;
	}

};


// Class Engine.ShapeComponent
// 0x0020 (0x0670 - 0x0650)
class UShapeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ShapeColor;                                               // 0x0650(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0654(0x0004) MISSED OFFSET
	class UBodySetup*                                  ShapeBodySetup;                                           // 0x0658(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                  // 0x0660(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                            // 0x0660(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bDynamicObstacle : 1;                                     // 0x0660(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0661(0x0007) MISSED OFFSET
	class UClass*                                      AreaClass;                                                // 0x0668(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ShapeComponent")); }
		return ptr;
	}

};


// Class Engine.SphereComponent
// 0x0010 (0x0680 - 0x0670)
class USphereComponent : public UShapeComponent
{
public:
	float                                              SphereRadius;                                             // 0x0670(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0674(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SphereComponent")); }
		return ptr;
	}


	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};


// Class Engine.GameState
// 0x0058 (0x04C0 - 0x0468)
class AGameState : public AInfo
{
public:
	class UClass*                                      GameModeClass;                                            // 0x0468(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AGameMode*                                   AuthorityGameMode;                                        // 0x0470(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x0478(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       MatchState;                                               // 0x0480(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       PreviousMatchState;                                       // 0x0488(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x0490(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0494(0x0004) MISSED OFFSET
	TArray<class APlayerState*>                        PlayerArray;                                              // 0x0498(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	float                                              ReplicatedWorldTimeSeconds;                               // 0x04A8(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x04AC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x04B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x04B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameState")); }
		return ptr;
	}


	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_MatchState();
	void OnRep_GameModeClass();
	void OnRep_ElapsedTime();
	float GetServerWorldTimeSeconds();
};


// Class Engine.CapsuleComponent
// 0x0010 (0x0680 - 0x0670)
class UCapsuleComponent : public UShapeComponent
{
public:
	float                                              CapsuleHalfHeight;                                        // 0x0670(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CapsuleRadius;                                            // 0x0674(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CapsuleHeight;                                            // 0x0678(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x067C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CapsuleComponent")); }
		return ptr;
	}


	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight();
};


// Class Engine.ThreadedActor
// 0x0000 (0x0468 - 0x0468)
class AThreadedActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ThreadedActor")); }
		return ptr;
	}

};


// Class Engine.MaterialInterface
// 0x0030 (0x0058 - 0x0028)
class UMaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class USubsurfaceProfile*                          SubsurfaceProfile;                                        // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0038(0x0004) MISSED OFFSET
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x003C(0x0014) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialInterface")); }
		return ptr;
	}


	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetBaseMaterial();
};


// Class Engine.Material
// 0x0A08 (0x0A60 - 0x0058)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColorMaterialInput                         DiffuseColor;                                             // 0x0060(0x0040) (CPF_Deprecated)
	struct FColorMaterialInput                         SpecularColor;                                            // 0x00A0(0x0040) (CPF_Deprecated)
	struct FColorMaterialInput                         BaseColor;                                                // 0x00E0(0x0040)
	struct FScalarMaterialInput                        Metallic;                                                 // 0x0120(0x0040)
	struct FScalarMaterialInput                        Specular;                                                 // 0x0160(0x0040)
	struct FScalarMaterialInput                        Roughness;                                                // 0x01A0(0x0040)
	struct FVectorMaterialInput                        Normal;                                                   // 0x01E0(0x0048)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x0228(0x0040)
	struct FScalarMaterialInput                        Opacity;                                                  // 0x0268(0x0040)
	struct FScalarMaterialInput                        OpacityMask;                                              // 0x02A8(0x0040)
	TEnumAsByte<EMaterialDomain>                       MaterialDomain;                                           // 0x02E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x02E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDecalBlendMode>                       DecalBlendMode;                                           // 0x02EA(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse;                                    // 0x02EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialShadingModel>                 ShadingModel;                                             // 0x02EC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OpacityMaskClipValue;                                     // 0x02F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DepthWeightScale;                                         // 0x02F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DepthWeightExponent;                                      // 0x02F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DepthWeightBase;                                          // 0x02FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bBlendedOITAfterTranslucency : 1;                         // 0x0300(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bForceResolution : 1;                                     // 0x0300(0x0001) (CPF_Edit BITFIELD: 0202)
	TEnumAsByte<ELowResTranslucencyCascade>            ForcedResolution;                                         // 0x0304(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FirstSplitDistance;                                       // 0x0308(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SecondSplitDistance;                                      // 0x030C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      PopPerParticle : 1;                                       // 0x0310(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x0318(0x0048)
	struct FVectorMaterialInput                        WorldDisplacement;                                        // 0x0360(0x0048)
	struct FScalarMaterialInput                        TessellationMultiplier;                                   // 0x03A8(0x0040)
	struct FColorMaterialInput                         SubsurfaceColor;                                          // 0x03E8(0x0040)
	struct FScalarMaterialInput                        ClearCoat;                                                // 0x0428(0x0040)
	struct FScalarMaterialInput                        ClearCoatRoughness;                                       // 0x0468(0x0040)
	struct FScalarMaterialInput                        AmbientOcclusion;                                         // 0x04A8(0x0040)
	struct FScalarMaterialInput                        Refraction;                                               // 0x04E8(0x0040)
	struct FColorMaterialInput                         BillboardColor;                                           // 0x0528(0x0040)
	struct FVectorMaterialInput                        BillboardParams;                                          // 0x0568(0x0048)
	struct FVector2MaterialInput                       CustomizedUVs[0x8];                                       // 0x05B0(0x0048)
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x07F0(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0828(0x0010) MISSED OFFSET
	struct FScalarMaterialInput                        PixelDepthOffset;                                         // 0x0838(0x0040)
	unsigned char                                      bTranslucentBeforeTranslucency : 1;                       // 0x0878(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bEnableSeparateTranslucency : 1;                          // 0x0878(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bEnableResponsiveAA : 1;                                  // 0x0878(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bScreenSpaceReflections : 1;                              // 0x0878(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      TwoSided : 1;                                             // 0x0878(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      DitheredLODTransition : 1;                                // 0x0878(0x0001) (CPF_Edit BITFIELD: 2020)
	TEnumAsByte<EConstantMaterial>                     ConstantMaterial;                                         // 0x087C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SkyLightWhenOccluded;                                     // 0x0880(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CloudShadowsInfluence;                                    // 0x0884(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumCustomizedUVs;                                         // 0x0888(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode;                                 // 0x088C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x0890(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightColorInfluence;                                      // 0x0894(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmbientLightColorInfluence;                               // 0x0898(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightIntensityInfluence;                                  // 0x089C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmbientLightIntensityInfluence;                           // 0x08A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AlternativeAmbientLightColorInfluence;                    // 0x08A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AlternativeAmbientLightIntensityInfluence;                // 0x08A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEvaluateLightningAtParticleCenter : 1;                   // 0x08AC(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              TranslucencyScaleForReflection;                           // 0x08B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bObjectFadeEnabled : 1;                                   // 0x08B4(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              ObjectFadeRate;                                           // 0x08B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ObjectFadeDistanceThreshold;                              // 0x08BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentShadowDensityScale;                            // 0x08C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x08C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x08C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x08CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x08D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                  // 0x08D4(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x08E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableDepthTest : 1;                                    // 0x08E8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                    // 0x08E8(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bDontRenderWhenPlayerInsideShip : 1;                      // 0x08E8(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bTangentSpaceNormal : 1;                                  // 0x08E8(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                   // 0x08E8(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bBlockGI : 1;                                             // 0x08E8(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x08E8(0x0001) (CPF_DuplicateTransient BITFIELD: 4040)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                // 0x08E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bUsedWithEditorCompositing : 1;                           // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bUsedWithLandscape : 1;                                   // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bUsedWithParticleSprites : 1;                             // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bUsedWithCPUParticleSprites : 1;                          // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bUsedWithStaticMesh : 1;                                  // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bUsedWithCoverage : 1;                                    // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      bUsedWithGPUInstanceCulling : 1;                          // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bUsedWithBeamTrails : 1;                                  // 0x08E9(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bUsedWithMeshParticles : 1;                               // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bUsedWithStaticLighting : 1;                              // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bUsedWithFluidSurfaces : 1;                               // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bUsedWithMorphTargets : 1;                                // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                       // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      bUsesDistortion : 1;                                      // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bUsedWithClothing : 1;                                    // 0x08EA(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bUsedWithDeformables : 1;                                 // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bUsedWithFFTWaterMask : 1;                                // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bUsedWithDynamicObjectFading : 1;                         // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bUsedWithWaterBoundary : 1;                               // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bUsedWithClouds : 1;                                      // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bUsedWithInstancedRopes : 1;                              // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	unsigned char                                      bUsedWithPlanarReflection : 1;                            // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	unsigned char                                      bUsedWithPointLightShadows : 1;                           // 0x08EB(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 8080)
	unsigned char                                      bUsedWithUI : 1;                                          // 0x08EC(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                       // 0x08EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bApplyWaterMask : 1;                                      // 0x08EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bUseReZ : 1;                                              // 0x08EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bFullyRough : 1;                                          // 0x08EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bUseLightmapDirectionality : 1;                           // 0x08EC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 2020)
	TEnumAsByte<EMaterialGeometryMode>                 GeometryMode;                                             // 0x08F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                    // 0x08F1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                         // 0x08F4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                          // 0x08F4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	float                                              MaxDisplacement;                                          // 0x08F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      Wireframe : 1;                                            // 0x08FC(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                            // 0x08FC(0x0001) (CPF_Edit BITFIELD: 0202)
	float                                              NormalOffsetShadowBiasScale;                              // 0x0900(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorX;                                                  // 0x0904(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorY;                                                  // 0x0908(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorPitch;                                              // 0x090C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EditorYaw;                                                // 0x0910(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0914(0x0004) MISSED OFFSET
	TArray<class UMaterialExpression*>                 Expressions;                                              // 0x0918(0x0010) (CPF_ZeroConstructor)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                                    // 0x0928(0x0010) (CPF_ZeroConstructor)
	TArray<struct FMaterialParameterCollectionInfo>    MaterialParameterCollectionInfos;                         // 0x0938(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                            // 0x0948(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bIsMasked : 1;                                            // 0x0948(0x0001) (CPF_Deprecated BITFIELD: 0202)
	unsigned char                                      bIsPreviewMaterial : 1;                                   // 0x0948(0x0001) (CPF_Transient, CPF_DuplicateTransient BITFIELD: 0404)
	unsigned char                                      bUseMaterialAttributes : 1;                               // 0x0948(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                            // 0x0948(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                       // 0x0948(0x0001) (CPF_Transient, CPF_DuplicateTransient BITFIELD: 2020)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                       // 0x0948(0x0001) (CPF_Transient, CPF_DuplicateTransient BITFIELD: 4040)
	uint32_t                                           UsageFlagWarnings;                                        // 0x094C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	TEnumAsByte<EBlendableLocation>                    BlendableLocation;                                        // 0x0950(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                BlendablePriority;                                        // 0x0954(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsAlphaBlended : 1;                                      // 0x0958(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              RefractionDepthBias;                                      // 0x095C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       StateId;                                                  // 0x0960(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                UnwrappedUVSet;                                           // 0x0970(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xD4];                                      // 0x0974(0x00D4) MISSED OFFSET
	TArray<class UTexture*>                            ExpressionTextureReferences;                              // 0x0A48(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0A58(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Material")); }
		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0010 (0x0680 - 0x0670)
class UBoxComponent : public UShapeComponent
{
public:
	struct FVector                                     BoxExtent;                                                // 0x0670(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x067C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BoxComponent")); }
		return ptr;
	}


	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class Engine.ParticleSystemComponent
// 0x0290 (0x08E0 - 0x0650)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x0650(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UMaterialInterface*>                  EmitterMaterials;                                         // 0x0658(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                       // 0x0668(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      bUnknown0678_0101 : 1;                                    // 0x0678(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0678_0202 : 1;                                    // 0x0678(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0678_0404 : 1;                                    // 0x0678(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0678_0808 : 1;                                    // 0x0678(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0678_1010 : 1;                                    // 0x0678(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0678_2020 : 1;                                    // 0x0678(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bResetOnDetach : 1;                                       // 0x0678(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                             // 0x0678(0x0001) ( BITFIELD: 8080)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0679(0x0007) MISSED OFFSET
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x0680(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	struct FParticleSysParam                           EmitterPointParameter;                                    // 0x0690(0x0050) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x06E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x06F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0700(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0710(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FVector                                     OldPosition;                                              // 0x0720(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                          // 0x072C(0x000C) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     CustomInheritedVelocity;                                  // 0x0738(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0744(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0748(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWarmingUp : 1;                                           // 0x074C(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData01[0xB];                                       // 0x074D(0x000B) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x0758(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x075C(0x0008) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0764(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0768(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideLODMethod : 1;                                   // 0x076C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0770(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x0774(0x0001) ( BITFIELD: 0101)
	TArray<struct FMaterialRelevance>                  CachedViewRelevanceFlags;                                 // 0x0778(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0788(0x0008) MISSED OFFSET
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x0790(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData05[0x60];                                      // 0x07A0(0x0060) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x0800(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0804(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSystemFinished;                                         // 0x0808(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      bUnbound : 1;                                             // 0x0818(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      UnknownData07[0xC7];                                      // 0x0819(0x00C7) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemComponent")); }
		return ptr;
	}


	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	int GetNumActiveParticles();
	class UMaterialInterface* GetNamedMaterial(const struct FName& InName);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UMaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UMaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<ETrailWidthMode> InWidthMode, float InWidth);
	void AddEmitterPoint(const struct FVector4& Position, const struct FVector4& InheritedVelocity, const struct FVector4& Orientation);
};


// Class Engine.SplineComponent
// 0x0080 (0x06D0 - 0x0650)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                               // 0x0650(0x0018) (CPF_ZeroConstructor)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x0668(0x0018) (CPF_ZeroConstructor)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x0680(0x0018) (CPF_ZeroConstructor)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0698(0x0018) (CPF_ZeroConstructor)
	unsigned char                                      bAllowSplineEditingPerInstance;                           // 0x06B0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	int                                                ReparamStepsPerSegment;                                   // 0x06B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Duration;                                                 // 0x06B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStationaryEndpoints;                                     // 0x06BC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSplineHasBeenEdited;                                     // 0x06BD(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bClosedLoop;                                              // 0x06BE(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                          // 0x06C0(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SplineComponent")); }
		return ptr;
	}


	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<ESplinePointType> Type);
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoop(bool bInClosedLoop);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int PointIndex);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FQuat GetQuaternionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FQuat GetQuaternionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FQuat GetQuaternionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDefaultUpVector(TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints();
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<ESplineCoordinateSpace> CoordinateSpace);
	void AddSplineLocalPoint(const struct FVector& Position);
};


// Class Engine.FloatingPawnMovement
// 0x0018 (0x0168 - 0x0150)
class UFloatingPawnMovement : public UPawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0150(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Acceleration;                                             // 0x0154(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Deceleration;                                             // 0x0158(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TurningBoost;                                             // 0x015C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                                   // 0x0160(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FloatingPawnMovement")); }
		return ptr;
	}

};


// Class Engine.TextureProxy
// 0x0008 (0x0140 - 0x0138)
class UTextureProxy : public UTexture
{
public:
	class UTexture*                                    Texture;                                                  // 0x0138(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureProxy")); }
		return ptr;
	}

};


// Class Engine.InstancedStaticMeshComponent
// 0x00A0 (0x0770 - 0x06D0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                        // 0x06D0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	int                                                InstancingRandomSeed;                                     // 0x06E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstanceStartCullDistance;                                // 0x06E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x06E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06EC(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                                     // 0x06F0(0x0010) (CPF_ZeroConstructor)
	TArray<int>                                        RemovedInstances;                                         // 0x0700(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0710(0x0040) MISSED OFFSET
	class UPhysicsSerializer*                          PhysicsSerializer;                                        // 0x0750(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                NumPendingLightmaps;                                      // 0x0758(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x075C(0x0004) MISSED OFFSET
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0760(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InstancedStaticMeshComponent")); }
		return ptr;
	}


	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform);
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	int GetInstanceCount();
	void EnableGPUVisibility(bool bEnable);
	void ClearInstances();
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	int AddInstance(const struct FTransform& InstanceTransform);
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00D0 (0x0840 - 0x0770)
class UHierarchicalInstancedStaticMeshComponent : public UInstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0770(0x0040) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                          // 0x07B0(0x0010) (CPF_ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x07C0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        BuiltInstanceBounds;                                      // 0x07C4(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                                    // 0x07E0(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07FC(0x0004) MISSED OFFSET
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                // 0x0800(0x0010) (CPF_ZeroConstructor)
	int                                                OcclusionLayerNumNodes;                                   // 0x0810(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0814(0x0002) MISSED OFFSET
	unsigned char                                      bDisableCollision;                                        // 0x0816(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x29];                                      // 0x0817(0x0029) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HierarchicalInstancedStaticMeshComponent")); }
		return ptr;
	}


	bool RemoveInstances(TArray<int> InstancesToRemove);
};


// Class Engine.Brush
// 0x0038 (0x04A0 - 0x0468)
class ABrush : public AActor
{
public:
	TEnumAsByte<EBrushType>                            BrushType;                                                // 0x0468(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      BrushColor;                                               // 0x046C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PolyFlags;                                                // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bColored : 1;                                             // 0x0474(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bSolidWhenSelected : 1;                                   // 0x0474(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                           // 0x0474(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bNotForClientOrServer : 1;                                // 0x0474(0x0001) ( BITFIELD: 0808)
	class UModel*                                      Brush;                                                    // 0x0478(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBrushComponent*                             BrushComponent;                                           // 0x0480(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                                      // 0x0488(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0489(0x0007) MISSED OFFSET
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x0490(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Brush")); }
		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x04A0 - 0x04A0)
class AVolume : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Volume")); }
		return ptr;
	}

};


// Class Engine.MaterialInstance
// 0x0198 (0x01F0 - 0x0058)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0058(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          Parent;                                                   // 0x0060(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                        // 0x0068(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bUnknown0068_0202 : 1;                                    // 0x0068(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 0202)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                           // 0x0068(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	struct FGuid                                       ParentLightingGuid;                                       // 0x006C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0080(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0090(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x00A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x00B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bOverrideBaseProperties;                                  // 0x00C0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FMaterialInstanceBasePropertyOverrides      BasePropertyOverrides;                                    // 0x00C4(0x0070) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData01[0xBC];                                      // 0x0134(0x00BC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstance")); }
		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0000 (0x01F0 - 0x01F0)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceConstant")); }
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0048 (0x0070 - 0x0028)
class UMaterialExpression : public UObject
{
public:
	class UMaterial*                                   Material;                                                 // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialFunction*                           Function;                                                 // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     Desc;                                                     // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FColor                                      BorderColor;                                              // 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRealtimePreview : 1;                                     // 0x004C(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bNeedToUpdatePreview : 1;                                 // 0x004C(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bIsParameterExpression : 1;                               // 0x004C(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bCommentBubbleVisible : 1;                                // 0x004C(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bShowOutputNameOnPin : 1;                                 // 0x004C(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bHidePreviewWindow : 1;                                   // 0x004C(0x0001) ( BITFIELD: 2020)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001) ( BITFIELD: 4040)
	unsigned char                                      bShaderInputData : 1;                                     // 0x004C(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bShowInputs : 1;                                          // 0x004D(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bShowOutputs : 1;                                         // 0x004D(0x0001) ( BITFIELD: 0202)
	TArray<struct FText>                               MenuCategories;                                           // 0x0050(0x0010) (CPF_ZeroConstructor)
	TArray<struct FExpressionOutput>                   Outputs;                                                  // 0x0060(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpression")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCustomOutput : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustomOutput")); }
		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0000 (0x0028 - 0x0028)
class UBlueprintAsyncActionBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlueprintAsyncActionBase")); }
		return ptr;
	}


	void Activate();
};


// Class Engine.BlueprintGeneratedClass
// 0x0068 (0x0200 - 0x0198)
class UBlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x0198(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	TArray<class UDynamicBlueprintBinding*>            DynamicBindingObjects;                                    // 0x01A0(0x0010) (CPF_ZeroConstructor)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x01B0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x01C0(0x0010) (CPF_ZeroConstructor)
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x01D0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x01D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                            // 0x01E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UFunction*                                   UberGraphFunction;                                        // 0x01E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FEventGraphFastCallPair>             FastCallPairs;                                            // 0x01F0(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlueprintGeneratedClass")); }
		return ptr;
	}

};


// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UCommandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                          // 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     HelpUsage;                                                // 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     HelpWebLink;                                              // 0x0048(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                           // 0x0058(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                    // 0x0068(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      IsServer : 1;                                             // 0x0078(0x0001) ( BITFIELD: 0101)
	unsigned char                                      IsClient : 1;                                             // 0x0078(0x0001) ( BITFIELD: 0202)
	unsigned char                                      IsEditor : 1;                                             // 0x0078(0x0001) ( BITFIELD: 0404)
	unsigned char                                      LogToConsole : 1;                                         // 0x0078(0x0001) ( BITFIELD: 0808)
	unsigned char                                      ShowErrorCount : 1;                                       // 0x0078(0x0001) ( BITFIELD: 1010)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Commandlet")); }
		return ptr;
	}

};


// Class Engine.AISystemBase
// 0x0018 (0x0040 - 0x0028)
class UAISystemBase : public UObject
{
public:
	struct FStringClassReference                       AISystemClassName;                                        // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear)
	struct FName                                       AISystemModuleName;                                       // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_NoClear, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AISystemBase")); }
		return ptr;
	}

};


// Class Engine.UserDefinedStruct
// 0x0010 (0x00A8 - 0x0098)
class UUserDefinedStruct : public UScriptStruct
{
public:
	struct FGuid                                       Guid;                                                     // 0x0098(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedStruct")); }
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x343C0 (0x34408 - 0x0048)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	TArray<class UChildConnection*>                    Children;                                                 // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UNetDriver*                                  Driver;                                                   // 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                               // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UChannel*>                            OpenChannels;                                             // 0x0070(0x0010) (CPF_ZeroConstructor)
	TArray<class AActor*>                              SentTemporaries;                                          // 0x0080(0x0010) (CPF_ZeroConstructor)
	class AActor*                                      ViewTarget;                                               // 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      OwningActor;                                              // 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                          // 0x00A4(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x2AB];                                     // 0x00A5(0x02AB) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x0350(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x340B0];                                   // 0x0358(0x340B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NetConnection")); }
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0300 (0x0328 - 0x0028)
class UNetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x0030(0x0010) (CPF_ZeroConstructor, CPF_Config)
	int                                                MaxDownloadSize;                                          // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                           // 0x0044(0x0001) (CPF_Config BITFIELD: 0101)
	int                                                NetServerMaxTickRate;                                     // 0x0048(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x005C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x0064(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x0068(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UNetConnection*                              ServerConnection;                                         // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UNetConnection*>                      ClientConnections;                                        // 0x0078(0x0010) (CPF_ZeroConstructor)
	class UWorld*                                      World;                                                    // 0x0088(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x0090(0x0020) MISSED OFFSET
	class UClass*                                      NetConnectionClass;                                       // 0x00B0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UProperty*                                   RoleProperty;                                             // 0x00B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UProperty*                                   RemoteRoleProperty;                                       // 0x00C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	float                                              Time;                                                     // 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x24C];                                     // 0x00DC(0x024C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NetDriver")); }
		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UOnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.OnlineSession")); }
		return ptr;
	}

};


// Class Engine.Model
// 0x0550 (0x0578 - 0x0028)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x550];                                     // 0x0028(0x0550) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Model")); }
		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EngineBaseTypes")); }
		return ptr;
	}

};


// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UDamageType : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bCausedByWorld : 1;                                       // 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bScaleMomentumByMass : 1;                                 // 0x0028(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	float                                              DamageImpulse;                                            // 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRadialDamageVelChange : 1;                               // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	float                                              DestructibleImpulse;                                      // 0x0034(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DamageType")); }
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EngineTypes")); }
		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0068 (0x0090 - 0x0028)
class UEdGraphNode : public UObject
{
public:
	TArray<class UEdGraphPin*>                         Pins;                                                     // 0x0028(0x0010) (CPF_ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodePosY;                                                 // 0x003C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NodeHeight;                                               // 0x0044(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasCompilerMessage : 1;                                  // 0x0048(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FString                                     NodeComment;                                              // 0x0050(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bCommentBubblePinned;                                     // 0x0060(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCommentBubbleVisible;                                    // 0x0061(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ErrorType;                                                // 0x0064(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     ErrorMsg;                                                 // 0x0068(0x0010) (CPF_ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                 // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay;                                       // 0x0088(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsNodeEnabled;                                           // 0x0089(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x008A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode")); }
		return ptr;
	}

};


// Class Engine.EdGraphPin
// 0x00F0 (0x0118 - 0x0028)
class UEdGraphPin : public UObject
{
public:
	struct FString                                     PinName;                                                  // 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     PinToolTip;                                               // 0x0038(0x0010) (CPF_ZeroConstructor)
	TEnumAsByte<EEdGraphPinDirection>                  Direction;                                                // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FEdGraphPinType                             PinType;                                                  // 0x0050(0x0050)
	struct FString                                     DefaultValue;                                             // 0x00A0(0x0010) (CPF_ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                                // 0x00B0(0x0010) (CPF_ZeroConstructor)
	class UObject*                                     DefaultObject;                                            // 0x00C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FText                                       DefaultTextValue;                                         // 0x00C8(0x0028)
	TArray<class UEdGraphPin*>                         LinkedTo;                                                 // 0x00F0(0x0010) (CPF_ZeroConstructor)
	TArray<class UEdGraphPin*>                         SubPins;                                                  // 0x0100(0x0010) (CPF_ZeroConstructor)
	class UEdGraphPin*                                 ParentPin;                                                // 0x0110(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EdGraphPin")); }
		return ptr;
	}

};


// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UBlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                   // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UClass*                                      GeneratedClass;                                           // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLegacyNeedToPurgeSkelRefs;                               // 0x0038(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLegacyGeneratedClassIsAuthoritative;                     // 0x0039(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       BlueprintGuid;                                            // 0x003C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlueprintCore")); }
		return ptr;
	}

};


// Class Engine.Blueprint
// 0x00E8 (0x0138 - 0x0050)
class UBlueprint : public UBlueprintCore
{
public:
	unsigned char                                      bUnknown0050_0101 : 1;                                    // 0x0050(0x0001) (CPF_ConfigMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0050_0202 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0050_0404 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0050_0808 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0050_1010 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0050_2020 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0050_4040 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0050_8080 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bRecompileOnLoad : 1;                                     // 0x0050(0x0001) (CPF_Config BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UClass*                                      ParentClass;                                              // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     PRIVATE_InnermostPreviousCDO;                             // 0x0060(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bHasBeenRegenerated : 1;                                  // 0x0068(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                // 0x0068(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	class USimpleConstructionScript*                   SimpleConstructionScript;                                 // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UActorComponent*>                     ComponentTemplates;                                       // 0x0078(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<class UTimelineTemplate*>                   Timelines;                                                // 0x0088(0x0010) (CPF_ZeroConstructor)
	class UInheritableComponentHandler*                InheritableComponentHandler;                              // 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EBlueprintType>                        BlueprintType;                                            // 0x00A0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                BlueprintSystemVersion;                                   // 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x90];                                      // 0x00A8(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Blueprint")); }
		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UInterface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Interface_AssetUserData")); }
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x0470 - 0x0468)
class AAmbientSound : public AActor
{
public:
	class UAudioComponent*                             AudioComponent;                                           // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AmbientSound")); }
		return ptr;
	}


	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};


// Class Engine.AutomaticInstancingActor
// 0x00A8 (0x0510 - 0x0468)
class AAutomaticInstancingActor : public AActor
{
public:
	class USceneComponent*                             DummyRoot;                                                // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TMap<struct FString, class UInstancedStaticMeshComponent*> InstancedStaticMeshes;                                    // 0x0470(0x0050) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient)
	TMap<struct FString, class UInstancedStaticMeshComponent*> CookedInstancedStaticMeshes;                              // 0x04C0(0x0050) (CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AutomaticInstancingActor")); }
		return ptr;
	}


	TArray<class UInstancedStaticMeshComponent*> GetInstancedStaticMeshes();
};


// Class Engine.PendingNetGame
// 0x0098 (0x00C0 - 0x0028)
class UPendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UNetDriver*                                  NetDriver;                                                // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x88];                                      // 0x0038(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PendingNetGame")); }
		return ptr;
	}

};


// Class Engine.World
// 0x0948 (0x0970 - 0x0028)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class ULevel*                                      PersistentLevel;                                          // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UNetDriver*                                  NetDriver;                                                // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ULineBatchComponent*                         LineBatcher;                                              // 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ULineBatchComponent*                         PersistentLineBatcher;                                    // 0x0048(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class ULineBatchComponent*                         ForegroundLineBatcher;                                    // 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class AGameState*                                  GameState;                                                // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameNetworkManager*                         NetworkManager;                                           // 0x0060(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsCollisionHandler*                    PhysicsCollisionHandler;                                  // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                                   // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                     // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0090(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FString                                     StreamingLevelsPrefix;                                    // 0x00A0(0x0010) (CPF_ZeroConstructor)
	class ULevel*                                      CurrentLevelPendingVisibility;                            // 0x00B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x00B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class APhysicsVolume*                              DefaultPhysicsVolume;                                     // 0x00C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x00C8(0x0014) MISSED OFFSET
	struct FName                                       Feature;                                                  // 0x00DC(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	TArray<struct FName>                               FeatureReferences;                                        // 0x00E8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      ParticleLOD_bUseGameThread;                               // 0x00F8(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      ParticleLOD_bUseMultipleViewportCase;                     // 0x00F9(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     ParticleLOD_PlayerViewpointLocation;                      // 0x00FC(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FString                                     TestMetadata;                                             // 0x0108(0x0010) (CPF_ZeroConstructor)
	class UNavigationSystem*                           NavigationSystem;                                         // 0x0118(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class AGameMode*                                   AuthorityGameMode;                                        // 0x0120(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAISystemBase*                               AISystem;                                                 // 0x0128(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UAvoidanceManager*                           AvoidanceManager;                                         // 0x0130(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class ULevel*>                              Levels;                                                   // 0x0138(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0148(0x0050) MISSED OFFSET
	class ULevel*                                      CurrentLevel;                                             // 0x0198(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x01A0(0x0008) MISSED OFFSET
	class UGameInstance*                               OwningGameInstance;                                       // 0x01A8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<class UMaterialParameterCollectionInstance*> ParameterCollectionInstances;                             // 0x01B0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData05[0x6C8];                                     // 0x01C0(0x06C8) MISSED OFFSET
	class UWorldComposition*                           WorldComposition;                                         // 0x0888(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x3D];                                      // 0x0890(0x003D) MISSED OFFSET
	unsigned char                                      bUnknown08CD_4040 : 1;                                    // 0x08CD(0x0001) (CPF_TransientMANUAL_ADD_BIT 4040)
	unsigned char                                      bAreConstraintsDirty : 1;                                 // 0x08CD(0x0001) (CPF_Transient BITFIELD: 8080)
	unsigned char                                      UnknownData07[0xA2];                                      // 0x08CE(0x00A2) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.World")); }
		return ptr;
	}

};


// Class Engine.Level
// 0x0390 (0x03B8 - 0x0028)
class ULevel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET
	class UWorld*                                      OwningWorld;                                              // 0x00B8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UModel*                                      Model;                                                    // 0x00C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UModelComponent*>                     ModelComponents;                                          // 0x00C8(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class ALevelScriptActor*                           LevelScriptActor;                                         // 0x00D8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationObjectBase*                       NavListStart;                                             // 0x00E0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationObjectBase*                       NavListEnd;                                               // 0x00E8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UNavigationDataChunk*>                NavDataChunks;                                            // 0x00F0(0x0010) (CPF_ZeroConstructor)
	float                                              LightmapTotalSize;                                        // 0x0100(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              ShadowmapTotalSize;                                       // 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<struct FVector>                             StaticNavigableGeometry;                                  // 0x0108(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x180];                                     // 0x0118(0x0180) MISSED OFFSET
	unsigned char                                      bUnknown0298_0404 : 1;                                    // 0x0298(0x0001) (CPF_TransientMANUAL_ADD_BIT 0404)
	unsigned char                                      bIsVisible : 1;                                           // 0x0298(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      Blocked : 1;                                              // 0x0298(0x0001) ( BITFIELD: 1010)
	unsigned char                                      UnknownData02[0xF7];                                      // 0x0299(0x00F7) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0390(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                                      // 0x03A0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Level")); }
		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x04A0 - 0x04A0)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BrushShape")); }
		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0050 (0x04F0 - 0x04A0)
class AAudioVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x04A4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net BITFIELD: 0101)
	struct FReverbSettings                             Settings;                                                 // 0x04A8(0x0018) (CPF_Edit, CPF_BlueprintVisible)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x04C0(0x0024) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	class AAudioVolume*                                NextLowerPriorityVolume;                                  // 0x04E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AudioVolume")); }
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0000 (0x04A0 - 0x04A0)
class ABlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlockingVolume")); }
		return ptr;
	}

};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x04A0 - 0x04A0)
class ACameraBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraBlockingVolume")); }
		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0018 (0x04B8 - 0x04A0)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x04A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                             // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CullDistanceVolume")); }
		return ptr;
	}

};


// Class Engine.FFTWater
// 0x0010 (0x04B0 - 0x04A0)
class AFFTWater : public AVolume
{
public:
	class UFFTWaterComponent*                          FFTWaterComponent;                                        // 0x04A0(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UFFTWaterExtendedPlaneComponent*             ExtendedPlaneComponent;                                   // 0x04A8(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FFTWater")); }
		return ptr;
	}


	bool ValidateVertexBuffer();
	bool ValidateParticlesVelocity();
	bool ValidateIndexBuffer();
	void SetWireframe(bool bWireframe);
	void SetWaterColour(const struct FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetLightFunctionMaterial(class UMaterialInterface* Material);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour);
	void SetFoamColour(const struct FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCausticsDepth(float Depth);
	void SetBackLitColour(const struct FLinearColor& BackLitColour);
	void SetAmbientColour(const struct FLinearColor& AmbientColour);
	bool HasLightFunctionMaterial();
	class UFFTWaterComponent* GetComponent();
};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x04B8 - 0x04A0)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                      // 0x04A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                    // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bDisabled : 1;                                            // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x04B4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingVolume")); }
		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x04A0 - 0x04A0)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightmassCharacterIndirectDetailVolume")); }
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x04A0 - 0x04A0)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightmassImportanceVolume")); }
		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0010 (0x04B0 - 0x04A0)
class ANavMeshBoundsVolume : public AVolume
{
public:
	struct FNavAgentSelector                           SupportedAgents;                                          // 0x04A0(0x0004) (CPF_Edit)
	struct FName                                       OriginatingLevelName;                                     // 0x04A4(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavMeshBoundsVolume")); }
		return ptr;
	}

};


// Class Engine.NavigationTypes
// 0x0000 (0x0028 - 0x0028)
class UNavigationTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationTypes")); }
		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
class UNavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavRelevantInterface")); }
		return ptr;
	}

};


// Class Engine.NavModifierVolume
// 0x0010 (0x04B0 - 0x04A0)
class ANavModifierVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET
	class UClass*                                      AreaClass;                                                // 0x04A8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavModifierVolume")); }
		return ptr;
	}


	void SetAreaClass(class UClass* NewAreaClass);
};


// Class Engine.PhysicsVolume
// 0x0010 (0x04B0 - 0x04A0)
class APhysicsVolume : public AVolume
{
public:
	float                                              TerminalVelocity;                                         // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Priority;                                                 // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FluidFriction;                                            // 0x04A8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                         // 0x04AC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bPhysicsOnContact : 1;                                    // 0x04AC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsVolume")); }
		return ptr;
	}

};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x04B0 - 0x04B0)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DefaultPhysicsVolume")); }
		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x04B0 - 0x04B0)
class AKillZVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KillZVolume")); }
		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x04D8 - 0x04B0)
class APainCausingVolume : public APhysicsVolume
{
public:
	unsigned char                                      bUnknown04B0_0101 : 1;                                    // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown04B0_0202 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown04B0_0404 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown04B0_0808 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown04B0_1010 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown04B0_2020 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown04B0_4040 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown04B0_8080 : 1;                                    // 0x04B0(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bPainCausing : 1;                                         // 0x04B0(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              DamagePerSec;                                             // 0x04B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x04B8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PainInterval;                                             // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                           // 0x04C4(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x04C4(0x0001) ( BITFIELD: 0202)
	class AController*                                 DamageInstigator;                                         // 0x04C8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PainCausingVolume")); }
		return ptr;
	}

};


// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
class UBlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlendableInterface")); }
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Scene")); }
		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
class UInterface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Interface_PostProcessVolume")); }
		return ptr;
	}

};


// Class Engine.PostProcessVolume
// 0x0550 (0x09F0 - 0x04A0)
class APostProcessVolume : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x04A0(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x04B0(0x0530) (CPF_Edit, CPF_BlueprintVisible)
	float                                              Priority;                                                 // 0x09E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendRadius;                                              // 0x09E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendWeight;                                              // 0x09E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x09EC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUnbound : 1;                                             // 0x09EC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PostProcessVolume")); }
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x04D0 - 0x04A0)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                    // 0x04A0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class AActor*>                              OverrideInvisibleActors;                                  // 0x04B0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                  // 0x04C0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityOverrideVolume")); }
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x04A0 - 0x04A0)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PrecomputedVisibilityVolume")); }
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x04A0 - 0x04A0)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TriggerVolume")); }
		return ptr;
	}

};


// Class Engine.CalmWaterZone
// 0x0008 (0x0470 - 0x0468)
class ACalmWaterZone : public AActor
{
public:
	class UCalmWaterComponent*                         CalmWaterComponent;                                       // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CalmWaterZone")); }
		return ptr;
	}

};


// Class Engine.CameraActor
// 0x0558 (0x09C0 - 0x0468)
class ACameraActor : public AActor
{
public:
	TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer;                                    // 0x0468(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET
	class UCameraComponent*                            CameraComponent;                                          // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x0480(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              AspectRatio;                                              // 0x0484(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x0488(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x048C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0490(0x0530) (CPF_Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraActor")); }
		return ptr;
	}


	int GetAutoActivatePlayerIndex();
};


// Class Engine.ClientOnlyTestActor
// 0x0000 (0x0468 - 0x0468)
class AClientOnlyTestActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ClientOnlyTestActor")); }
		return ptr;
	}

};


// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UNavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavAgentInterface")); }
		return ptr;
	}

};


// Class Engine.CameraShake
// 0x0118 (0x0140 - 0x0028)
class UCameraShake : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bSingleInstance : 1;                                      // 0x0028(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              OscillationDuration;                                      // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OscillationBlendInTime;                                   // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OscillationBlendOutTime;                                  // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FROscillator                                RotOscillation;                                           // 0x0038(0x0024) (CPF_Edit)
	struct FVOscillator                                LocOscillation;                                           // 0x005C(0x0024) (CPF_Edit)
	struct FFOscillator                                FOVOscillation;                                           // 0x0080(0x000C) (CPF_Edit)
	float                                              AnimPlayRate;                                             // 0x008C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimScale;                                                // 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0094(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                                // 0x009C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UCameraAnim*                                 Anim;                                                     // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRandomAnimSegment : 1;                                   // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x17];                                      // 0x00A9(0x0017) MISSED OFFSET
	class APlayerCameraManager*                        CameraOwner;                                              // 0x00C0(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x00C8(0x0068) MISSED OFFSET
	float                                              ShakeScale;                                               // 0x0130(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              OscillatorTimeRemaining;                                  // 0x0134(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UCameraAnimInst*                             AnimInst;                                                 // 0x0138(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraShake")); }
		return ptr;
	}


	void ReceiveStopShake();
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float Alpha, const struct FMinimalViewInfo& POV, struct FMinimalViewInfo* ModifiedPOV);
};


// Class Engine.InputComponent
// 0x0088 (0x0158 - 0x00D0)
class UInputComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x88];                                      // 0x00D0(0x0088) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputComponent")); }
		return ptr;
	}


	bool WasControllerKeyJustReleased(const struct FKey& Key);
	bool WasControllerKeyJustPressed(const struct FKey& Key);
	bool IsControllerKeyDown(const struct FKey& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FKey& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FKey& Key);
	void GetControllerAnalogStickState(TEnumAsByte<EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FKey& Key);
};


// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UCurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveBase")); }
		return ptr;
	}


	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};


// Class Engine.CurveFloat
// 0x0080 (0x00B0 - 0x0030)
class UCurveFloat : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurve;                                               // 0x0030(0x0078)
	unsigned char                                      bIsEventCurve;                                            // 0x00A8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveFloat")); }
		return ptr;
	}


	float GetFloatValue(float InTime);
};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0040 - 0x0028)
class UForceFeedbackEffect : public UObject
{
public:
	TArray<struct FForceFeedbackChannelDetails>        ChannelDetails;                                           // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              Duration;                                                 // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ForceFeedbackEffect")); }
		return ptr;
	}

};


// Class Engine.LogVisualizerCameraController
// 0x0018 (0x07A8 - 0x0790)
class ALogVisualizerCameraController : public ADebugCameraController
{
public:
	class AActor*                                      PickedActor;                                              // 0x0790(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0798(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LogVisualizerCameraController")); }
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0008 (0x0470 - 0x0468)
class ADecalActor : public AActor
{
public:
	class UDecalComponent*                             Decal;                                                    // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DecalActor")); }
		return ptr;
	}


	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.DestructibleActor
// 0x0020 (0x0488 - 0x0468)
class ADestructibleActor : public AActor
{
public:
	class UDestructibleComponent*                      DestructibleComponent;                                    // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bAffectNavigation : 1;                                    // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Config BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorFracture;                                          // 0x0478(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DestructibleActor")); }
		return ptr;
	}

};


// Class Engine.DocumentationActor
// 0x0008 (0x0470 - 0x0468)
class ADocumentationActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DocumentationActor")); }
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0050 (0x04B8 - 0x0468)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                               // 0x0470(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bPostUpdateTickGroup : 1;                                 // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bCurrentlyActive : 1;                                     // 0x0470(0x0001) (CPF_Net BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x0478(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x0488(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0498(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x04A8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Emitter")); }
		return ptr;
	}


	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	bool IsActive();
	struct FName GetEmitterName();
	void Deactivate();
	void Activate();
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0038 (0x04F0 - 0x04B8)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x04B8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                         // 0x04C0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x04C8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistFromCamera;                                           // 0x04CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                              // 0x04D0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04D1(0x0007) MISSED OFFSET
	TArray<class UClass*>                              EmittersToTreatAsSame;                                    // 0x04D8(0x0010) (CPF_ZeroConstructor)
	class APlayerCameraManager*                        BaseCamera;                                               // 0x04E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EmitterCameraLensEffectBase")); }
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x0560 - 0x0560)
class ADebugCameraHUD : public AHUD
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DebugCameraHUD")); }
		return ptr;
	}

};


// Class Engine.LogVisualizerHUD
// 0x0028 (0x0588 - 0x0560)
class ALogVisualizerHUD : public ADebugCameraHUD
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0560(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LogVisualizerHUD")); }
		return ptr;
	}

};


// Class Engine.AtmosphericFog
// 0x0008 (0x0470 - 0x0468)
class AAtmosphericFog : public AInfo
{
public:
	class UAtmosphericFogComponent*                    AtmosphericFogComponent;                                  // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFog")); }
		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x0478 - 0x0468)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0470(0x0001) (CPF_Net BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0471(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFog")); }
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.GameNetworkManager
// 0x0070 (0x04D8 - 0x0468)
class AGameNetworkManager : public AInfo
{
public:
	int                                                AdjustedNetSpeed;                                         // 0x0468(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x046C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x0470(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x0474(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x0478(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                            // 0x047C(0x0001) (CPF_Config BITFIELD: 0101)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                            // 0x047C(0x0001) ( BITFIELD: 0202)
	float                                              StandbyRxCheatTime;                                       // 0x0480(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x0484(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x0488(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x048C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x0490(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x0494(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0498(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x049C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x04A0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x04A4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x04A8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x04AC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x04B0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      ClientAuthorativePosition;                                // 0x04B4(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              ClientErrorUpdateRateLimit;                               // 0x04B8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyDetection;                        // 0x04BC(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyResolution;                       // 0x04BD(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x04C0(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x04C4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x04C8(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x04CC(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x04D0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bUseDistanceBasedRelevancy;                               // 0x04D1(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x04D2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameNetworkManager")); }
		return ptr;
	}

};


// Class Engine.GameSession
// 0x0030 (0x0498 - 0x0468)
class AGameSession : public AInfo
{
public:
	int                                                MaxSpectators;                                            // 0x0468(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x046C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x0470(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	unsigned char                                      bRequiresPushToTalk;                                      // 0x0471(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig, CPF_IsPlainOldData)
	struct FName                                       SessionName;                                              // 0x0474(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x047C(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameSession")); }
		return ptr;
	}

};


// Class Engine.SkyLight
// 0x0010 (0x0478 - 0x0468)
class ASkyLight : public AInfo
{
public:
	class USkyLightComponent*                          LightComponent;                                           // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0470(0x0001) (CPF_Net BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0471(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkyLight")); }
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.WindDirectionalSource
// 0x0008 (0x0470 - 0x0468)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSource")); }
		return ptr;
	}


	class UWindDirectionalSourceComponent* GetComponent();
};


// Class Engine.LevelBounds
// 0x0008 (0x0470 - 0x0468)
class ALevelBounds : public AActor
{
public:
	unsigned char                                      bAutoUpdateBounds;                                        // 0x0468(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0469(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelBounds")); }
		return ptr;
	}

};


// Class Engine.LightComponentBase
// 0x0030 (0x0310 - 0x02E0)
class ULightComponentBase : public USceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                // 0x02E0(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Brightness;                                               // 0x02F0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Intensity;                                                // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      LightColor;                                               // 0x02F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                        // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      CastShadows : 1;                                          // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      CastStaticShadows : 1;                                    // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      CastDynamicShadows : 1;                                   // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      bAffectTranslucentLighting : 1;                           // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	unsigned char                                      bPrecomputedLightingIsValid : 1;                          // 0x02FC(0x0001) ( BITFIELD: 2020)
	unsigned char                                      RainOcclusion : 1;                                        // 0x02FC(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 4040)
	float                                              IndirectLightingIntensity;                                // 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScaleForTranslucency;                                     // 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CapForTranslucency;                                       // 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightComponentBase")); }
		return ptr;
	}


	void SetCastShadows(bool bNewValue);
	struct FLinearColor GetLightColor();
};


// Class Engine.LightComponent
// 0x0160 (0x0470 - 0x0310)
class ULightComponent : public ULightComponentBase
{
public:
	float                                              Temperature;                                              // 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                                      // 0x0314(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	int                                                ShadowMapChannel;                                         // 0x0318(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	float                                              SourceRadius;                                             // 0x0320(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              MinRoughness;                                             // 0x0324(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowBias;                                               // 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InverseSquaredFalloff : 1;                                // 0x0330(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      CastTranslucentShadows : 1;                               // 0x0330(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                 // 0x0330(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x0330(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0808)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0331(0x0007) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                                    // 0x0338(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LightFunctionScale;                                       // 0x0340(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	class UTextureLightProfile*                        IESTexture;                                               // 0x0350(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                                    // 0x0358(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	float                                              IESBrightnessScale;                                       // 0x035C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x0360(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x0364(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                               // 0x0368(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	float                                              BloomScale;                                               // 0x036C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x0370(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      BloomTint;                                                // 0x0374(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseRayTracedDistanceFieldShadows;                        // 0x0378(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RayStartOffsetDepthScale;                                 // 0x037C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0xF0];                                      // 0x0380(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightComponent")); }
		return ptr;
	}


	void SetTemperature(float NewTemperature);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UTextureLightProfile* NewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
	int GetNumberOfShadowCastersInFirstCascade();
};


// Class Engine.Light
// 0x0010 (0x0478 - 0x0468)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0470(0x0001) (CPF_Net BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0471(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Light")); }
		return ptr;
	}


	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UMaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};


// Class Engine.AmbientLightSource
// 0x0008 (0x0480 - 0x0478)
class AAmbientLightSource : public ALight
{
public:
	class UAmbientLightSourceComponent*                AmbientLightSourceComponent;                              // 0x0478(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AmbientLightSource")); }
		return ptr;
	}

};


// Class Engine.DirectionalLight
// 0x0000 (0x0478 - 0x0478)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLight")); }
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0008 (0x0480 - 0x0478)
class APointLight : public ALight
{
public:
	class UPointLightComponent*                        PointLightComponent;                                      // 0x0478(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PointLight")); }
		return ptr;
	}


	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.SpotLight
// 0x0008 (0x0480 - 0x0478)
class ASpotLight : public ALight
{
public:
	class USpotLightComponent*                         SpotLightComponent;                                       // 0x0478(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SpotLight")); }
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x0480 - 0x0480)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GeneratedMeshAreaLight")); }
		return ptr;
	}

};


// Class Engine.LODActor
// 0x0038 (0x04A0 - 0x0468)
class ALODActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class AActor*>                              SubActors;                                                // 0x0470(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	float                                              LODDrawDistance;                                          // 0x0480(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LodLevel;                                                 // 0x0484(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TArray<class UObject*>                             SubObjects;                                               // 0x0488(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0498(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LODActor")); }
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x0478 - 0x0468)
class AMaterialInstanceActor : public AActor
{
public:
	TArray<class AActor*>                              TargetActors;                                             // 0x0468(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceActor")); }
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x0078 (0x04E0 - 0x0468)
class AMatineeActor : public AActor
{
public:
	class UInterpData*                                 MatineeData;                                              // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       MatineeControllerName;                                    // 0x0470(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0478(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                                     // 0x047C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bForceStartPos : 1;                                       // 0x047C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	float                                              ForceStartPosition;                                       // 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_Net BITFIELD: 0101)
	unsigned char                                      bRewindOnPlay : 1;                                        // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bNoResetOnRewind : 1;                                     // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                              // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bDisableRadioFilter : 1;                                  // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bClientSideOnly : 1;                                      // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                              // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bIsSkippable : 1;                                         // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 8080)
	int                                                PreferredSplitScreenNum;                                  // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                                // 0x048C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bDisableLookAtInput : 1;                                  // 0x048C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bHidePlayer : 1;                                          // 0x048C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bHideHud : 1;                                             // 0x048C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	TArray<struct FInterpGroupActorInfo>               GroupActorInfos;                                          // 0x0490(0x0010) (CPF_Net, CPF_ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                      // 0x04A0(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x04A8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x04B8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      bIsPlaying : 1;                                           // 0x04C8(0x0001) (CPF_Net, CPF_Transient BITFIELD: 0101)
	unsigned char                                      bReversePlayback : 1;                                     // 0x04C8(0x0001) (CPF_Net BITFIELD: 0202)
	unsigned char                                      bPaused : 1;                                              // 0x04C8(0x0001) (CPF_Net, CPF_Transient BITFIELD: 0404)
	unsigned char                                      bPendingStop : 1;                                         // 0x04C8(0x0001) (CPF_Net, CPF_Transient BITFIELD: 0808)
	float                                              InterpPosition;                                           // 0x04CC(0x0004) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04D0(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x04D4(0x0001) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x04D5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MatineeActor")); }
		return ptr;
	}


	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play();
	void Pause();
	void ChangePlaybackDirection();
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x04E8 - 0x04E0)
class AMatineeActorCameraAnim : public AMatineeActor
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x04E0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MatineeActorCameraAnim")); }
		return ptr;
	}

};


// Class Engine.MergedCollisionActor
// 0x0008 (0x0470 - 0x0468)
class AMergedCollisionActor : public AActor
{
public:
	class UMergedCollisionComponent*                   MergedCollisionComponent;                                 // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MergedCollisionActor")); }
		return ptr;
	}

};


// Class Engine.NavigationQueryFilter
// 0x0018 (0x0040 - 0x0028)
class UNavigationQueryFilter : public UObject
{
public:
	TArray<struct FNavigationFilterArea>               Areas;                                                    // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FNavigationFilterFlags                      IncludeFlags;                                             // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavigationFilterFlags                      ExcludeFlags;                                             // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationQueryFilter")); }
		return ptr;
	}

};


// Class Engine.NavigationData
// 0x01A0 (0x0608 - 0x0468)
class ANavigationData : public AActor
{
public:
	class UPrimitiveComponent*                         RenderingComp;                                            // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FNavDataConfig                              NavDataConfig;                                            // 0x0470(0x0048)
	unsigned char                                      bEnableDrawing : 1;                                       // 0x04B8(0x0001) (CPF_Edit, CPF_Transient BITFIELD: 0101)
	unsigned char                                      bRebuildAtRuntime : 1;                                    // 0x04B8(0x0001) (CPF_Config, CPF_Deprecated BITFIELD: 0202)
	TEnumAsByte<ERuntimeGenerationType>                RuntimeGeneration;                                        // 0x04BC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bForceRebuildOnLoad : 1;                                  // 0x04C0(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	float                                              ObservedPathsTickInterval;                                // 0x04C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xD8];                                      // 0x04C8(0x00D8) MISSED OFFSET
	TArray<struct FSupportedAreaData>                  SupportedAreas;                                           // 0x05A0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x58];                                      // 0x05B0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationData")); }
		return ptr;
	}

};


// Class Engine.AbstractNavData
// 0x0000 (0x0608 - 0x0608)
class AAbstractNavData : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AbstractNavData")); }
		return ptr;
	}

};


// Class Engine.NavigationGraph
// 0x0000 (0x0608 - 0x0608)
class ANavigationGraph : public ANavigationData
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraph")); }
		return ptr;
	}

};


// Class Engine.RecastNavMesh
// 0x00E0 (0x06E8 - 0x0608)
class ARecastNavMesh : public ANavigationData
{
public:
	unsigned char                                      bUnknown0608_0101 : 1;                                    // 0x0608(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0608_0202 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0608_0404 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0608_0808 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0608_1010 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0608_2020 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0608_4040 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0608_8080 : 1;                                    // 0x0608(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bDrawTriangleEdges : 1;                                   // 0x0608(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDrawPolyEdges : 1;                                       // 0x0608(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bDrawFilledPolys : 1;                                     // 0x0608(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bDrawNavMeshEdges : 1;                                    // 0x0608(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bDrawTileBounds : 1;                                      // 0x0608(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bDrawPathCollidingGeometry : 1;                           // 0x0608(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bDrawTileLabels : 1;                                      // 0x0608(0x0001) (CPF_Edit BITFIELD: 4040)
	unsigned char                                      bDrawPolygonLabels : 1;                                   // 0x0608(0x0001) (CPF_Edit BITFIELD: 8080)
	unsigned char                                      bDrawDefaultPolygonCost : 1;                              // 0x0609(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDrawLabelsOnPathNodes : 1;                               // 0x0609(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bDrawNavLinks : 1;                                        // 0x0609(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bDrawFailedNavLinks : 1;                                  // 0x0609(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bDrawClusters : 1;                                        // 0x0609(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bDrawOctree : 1;                                          // 0x0609(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bDistinctlyDrawTilesBeingBuilt : 1;                       // 0x0609(0x0001) (CPF_Config BITFIELD: 4040)
	unsigned char                                      bDrawNavMesh : 1;                                         // 0x0609(0x0001) (CPF_Edit BITFIELD: 8080)
	float                                              DrawOffset;                                               // 0x060C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BuiltTileSizeUU;                                          // 0x0610(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              BuiltCellSize;                                            // 0x0614(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bFixedTilePoolSize : 1;                                   // 0x0618(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	int                                                TilePoolSize;                                             // 0x061C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TileSizeUU;                                               // 0x0620(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CellSize;                                                 // 0x0624(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              CellHeight;                                               // 0x0628(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentRadius;                                              // 0x062C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentHeight;                                              // 0x0630(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxHeight;                                           // 0x0634(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxSlope;                                            // 0x0638(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AgentMaxStepHeight;                                       // 0x063C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinRegionArea;                                            // 0x0640(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MergeRegionSize;                                          // 0x0644(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxSimplificationError;                                   // 0x0648(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxSimultaneousTileGenerationJobsCount;                   // 0x064C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                TileNumberHardLimit;                                      // 0x0650(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PolyRefTileBits;                                          // 0x0654(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PolyRefNavPolyBits;                                       // 0x0658(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PolyRefSaltBits;                                          // 0x065C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              DefaultDrawDistance;                                      // 0x0660(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultMaxSearchNodes;                                    // 0x0664(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultMaxHierarchicalSearchNodes;                        // 0x0668(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   RegionPartitioning;                                       // 0x066C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<ERecastPartitioning>                   LayerPartitioning;                                        // 0x066D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                RegionChunkSplits;                                        // 0x0670(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LayerChunkSplits;                                         // 0x0674(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSortNavigationAreasByCost : 1;                           // 0x0678(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bPerformVoxelFiltering : 1;                               // 0x0678(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bMarkLowHeightAreas : 1;                                  // 0x0678(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	unsigned char                                      bDoFullyAsyncNavDataGathering : 1;                        // 0x0678(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	unsigned char                                      bUseBetterOffsetsFromCorners : 1;                         // 0x0678(0x0001) (CPF_Config BITFIELD: 1010)
	unsigned char                                      bUseVirtualFilters : 1;                                   // 0x0678(0x0001) (CPF_Config BITFIELD: 2020)
	unsigned char                                      bUseVoxelCache : 1;                                       // 0x0678(0x0001) (CPF_Config BITFIELD: 4040)
	float                                              TileSetUpdateInterval;                                    // 0x067C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              HeuristicScale;                                           // 0x0680(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              VerticalDeviationFromGroundCompensation;                  // 0x0684(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0688(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RecastNavMesh")); }
		return ptr;
	}

};


// Class Engine.NavigationGraphNode
// 0x0000 (0x0468 - 0x0468)
class ANavigationGraphNode : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraphNode")); }
		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x0498 - 0x0498)
class APlayerStartPIE : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerStartPIE")); }
		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
class UNavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavPathObserverInterface")); }
		return ptr;
	}

};


// Class Engine.NavigationTestingActor
// 0x00B0 (0x0518 - 0x0468)
class ANavigationTestingActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0468(0x0010) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0478(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UNavigationInvokerComponent*                 InvokerComponent;                                         // 0x0480(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bActAsNavigationInvoker : 1;                              // 0x0488(0x0001) ( BITFIELD: 0101)
	struct FNavAgentProperties                         NavAgentProps;                                            // 0x048C(0x0018) (CPF_Edit)
	struct FVector                                     QueryingExtent;                                           // 0x04A4(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationData*                             MyNavData;                                                // 0x04B0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     ProjectedLocation;                                        // 0x04B8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      bProjectedLocationValid : 1;                              // 0x04C4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditConst BITFIELD: 0101)
	unsigned char                                      bSearchStart : 1;                                         // 0x04C4(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bUseHierarchicalPathfinding : 1;                          // 0x04C4(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bGatherDetailedInfo : 1;                                  // 0x04C4(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bShowNodePool : 1;                                        // 0x04C4(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bShowBestPath : 1;                                        // 0x04C4(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bShowDiffWithPreviousStep : 1;                            // 0x04C4(0x0001) (CPF_Edit BITFIELD: 4040)
	unsigned char                                      bShouldBeVisibleInGame : 1;                               // 0x04C4(0x0001) (CPF_Edit BITFIELD: 8080)
	TEnumAsByte<ENavCostDisplay>                       CostDisplayMode;                                          // 0x04C8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   TextCanvasOffset;                                         // 0x04CC(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPathExist : 1;                                           // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst BITFIELD: 0101)
	unsigned char                                      bPathIsPartial : 1;                                       // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst BITFIELD: 0202)
	unsigned char                                      bPathSearchOutOfNodes : 1;                                // 0x04D4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_Transient, CPF_EditConst BITFIELD: 0404)
	float                                              PathfindingTime;                                          // 0x04D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	float                                              PathCost;                                                 // 0x04DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	int                                                PathfindingSteps;                                         // 0x04E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	class ANavigationTestingActor*                     OtherActor;                                               // 0x04E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      FilterClass;                                              // 0x04F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ShowStepIndex;                                            // 0x04F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_Transient, CPF_IsPlainOldData)
	float                                              OffsetFromCornersDistance;                                // 0x04FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0500(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationTestingActor")); }
		return ptr;
	}

};


// Class Engine.NavArea
// 0x0018 (0x0040 - 0x0028)
class UNavArea : public UObject
{
public:
	float                                              DefaultCost;                                              // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              FixedAreaEnteringCost;                                    // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FNavAgentSelector                           SupportedAgents;                                          // 0x0034(0x0004) (CPF_Edit, CPF_Config)
	unsigned char                                      bSupportsAgent0 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 0101)
	unsigned char                                      bSupportsAgent1 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 0202)
	unsigned char                                      bSupportsAgent2 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 0404)
	unsigned char                                      bSupportsAgent3 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 0808)
	unsigned char                                      bSupportsAgent4 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 1010)
	unsigned char                                      bSupportsAgent5 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 2020)
	unsigned char                                      bSupportsAgent6 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 4040)
	unsigned char                                      bSupportsAgent7 : 1;                                      // 0x0038(0x0001) (CPF_Config BITFIELD: 8080)
	unsigned char                                      bSupportsAgent8 : 1;                                      // 0x0039(0x0001) (CPF_Config BITFIELD: 0101)
	unsigned char                                      bSupportsAgent9 : 1;                                      // 0x0039(0x0001) (CPF_Config BITFIELD: 0202)
	unsigned char                                      bSupportsAgent10 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 0404)
	unsigned char                                      bSupportsAgent11 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 0808)
	unsigned char                                      bSupportsAgent12 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 1010)
	unsigned char                                      bSupportsAgent13 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 2020)
	unsigned char                                      bSupportsAgent14 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 4040)
	unsigned char                                      bSupportsAgent15 : 1;                                     // 0x0039(0x0001) (CPF_Config BITFIELD: 8080)
	unsigned char                                      UnknownData00[0x6];                                       // 0x003A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavArea")); }
		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UNavLinkDefinition : public UObject
{
public:
	TArray<struct FNavigationLink>                     Links;                                                    // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkDefinition")); }
		return ptr;
	}

};


// Class Engine.NavLinkHostInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkHostInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkHostInterface")); }
		return ptr;
	}

};


// Class Engine.NavLinkProxy
// 0x0050 (0x04B8 - 0x0468)
class ANavLinkProxy : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0468(0x0010) MISSED OFFSET
	TArray<struct FNavigationLink>                     PointLinks;                                               // 0x0478(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavigationSegmentLink>              SegmentLinks;                                             // 0x0488(0x0010) (CPF_ZeroConstructor)
	class UNavLinkCustomComponent*                     SmartLinkComp;                                            // 0x0498(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bSmartLinkIsRelevant;                                     // 0x04A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x04A1(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSmartLinkReached;                                       // 0x04A8(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkProxy")); }
		return ptr;
	}


	void SetSmartLinkEnabled(bool bEnabled);
	void ResumePathFollowing(class AActor* Agent);
	void ReceiveSmartLinkReached(class AActor* Agent, const struct FVector& Destination);
	bool IsSmartLinkEnabled();
	bool HasMovingAgents();
};


// Class Engine.Note
// 0x0000 (0x0468 - 0x0468)
class ANote : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Note")); }
		return ptr;
	}

};


// Class Engine.ChildActorComponent
// 0x0020 (0x0300 - 0x02E0)
class UChildActorComponent : public USceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                          // 0x02E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      ChildActor;                                               // 0x02E8(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ChildActorComponent")); }
		return ptr;
	}


	void SetChildActorClass(class UClass* InClass);
};


// Class Engine.ParentTestActor
// 0x0008 (0x0470 - 0x0468)
class AParentTestActor : public AActor
{
public:
	class UChildActorComponent*                        ChildActorComponent;                                      // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParentTestActor")); }
		return ptr;
	}

};


// Class Engine.ParticleEventManager
// 0x0000 (0x0468 - 0x0468)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleEventManager")); }
		return ptr;
	}

};


// Class Engine.Skeleton
// 0x0280 (0x02A8 - 0x0028)
class USkeleton : public UObject
{
public:
	TArray<struct FBoneNode>                           BoneTree;                                                 // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                            // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0048(0x0080) MISSED OFFSET
	TArray<struct FSkeletonToMeshLinkup>               LinkupCache;                                              // 0x00C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x00D8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00E8(0x0050) MISSED OFFSET
	struct FSmartNameContainer                         SmartNames;                                               // 0x0138(0x0050)
	TArray<struct FAnimSlotGroup>                      SlotGroups;                                               // 0x0188(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x110];                                     // 0x0198(0x0110) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Skeleton")); }
		return ptr;
	}

};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
class UInterface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Interface_CollisionDataProvider")); }
		return ptr;
	}

};


// Class Engine.MeshPatchAsset
// 0x0010 (0x0038 - 0x0028)
class UMeshPatchAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MeshPatchAsset")); }
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0208 (0x0230 - 0x0028)
class USkeletalMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET
	class USkeleton*                                   Skeleton;                                                 // 0x0048(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x0050(0x001C) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<struct FSkeletalMaterial>                   Materials;                                                // 0x0070(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x0080(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x0090(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x0091(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0092(0x0006) MISSED OFFSET
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x0098(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                 // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bHasBeenSimplified : 1;                                   // 0x00A8(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bHasVertexColors : 1;                                     // 0x00A8(0x0001) ( BITFIELD: 0404)
	unsigned char                                      UnknownData03[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	TArray<struct FDeformablesSettings>                DeformablesSettings;                                      // 0x00B0(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bKeepTessellationAdjacency : 1;                           // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bKeepSkeletalMeshBuffersInMemory : 1;                     // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x00C8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x00D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UHIKCharacterization*                        Characterization;                                         // 0x00D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UPhysicsAsset*                               DeformablesPhysicsAsset;                                  // 0x00E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x00E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StreamingDiscardedTexelRatios;                            // 0x00EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UMorphTarget*>                        MorphTargets;                                             // 0x00F0(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	TArray<class UMeshPatchAsset*>                     MeshPatchAssets;                                          // 0x0100(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData05[0xD8];                                      // 0x0110(0x00D8) MISSED OFFSET
	TArray<struct FClothingAssetData>                  ClothingAssets;                                           // 0x01E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x01F8(0x0010) MISSED OFFSET
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0208(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x0220(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMesh")); }
		return ptr;
	}


	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	int GetNumLODsBP();
	class USkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
};


// Class Engine.AnimationAsset
// 0x0028 (0x0050 - 0x0028)
class UAnimationAsset : public UObject
{
public:
	class USkeleton*                                   Skeleton;                                                 // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0040(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimationAsset")); }
		return ptr;
	}

};


// Class Engine.DefaultPawn
// 0x0028 (0x04F0 - 0x04C8)
class ADefaultPawn : public APawn
{
public:
	float                                              BaseTurnRate;                                             // 0x04C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x04CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	class UPawnMovementComponent*                      MovementComponent;                                        // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USphereComponent*                            CollisionComponent;                                       // 0x04D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UStaticMeshComponent*                        MeshComponent;                                            // 0x04E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                          // 0x04E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DefaultPawn")); }
		return ptr;
	}


	void TurnAtRate(float Rate);
	void Turn(float Val);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
	void LookUp(float Val);
};


// Class Engine.SpectatorPawn
// 0x0000 (0x04F0 - 0x04F0)
class ASpectatorPawn : public ADefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawn")); }
		return ptr;
	}

};


// Class Engine.WheeledVehicle
// 0x0010 (0x04D8 - 0x04C8)
class AWheeledVehicle : public APawn
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x04C8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UWheeledVehicleMovementComponent*            VehicleMovement;                                          // 0x04D0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WheeledVehicle")); }
		return ptr;
	}

};


// Class Engine.ReflectionCapture
// 0x0008 (0x0470 - 0x0468)
class AReflectionCapture : public AActor
{
public:
	class UReflectionCaptureComponent*                 CaptureComponent;                                         // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCapture")); }
		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x0470 - 0x0470)
class ABoxReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCapture")); }
		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x0470 - 0x0470)
class APlaneReflectionCapture : public AReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCapture")); }
		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x0478 - 0x0470)
class ASphereReflectionCapture : public AReflectionCapture
{
public:
	class UDrawSphereComponent*                        DrawCaptureRadius;                                        // 0x0470(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCapture")); }
		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x0468 - 0x0468)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RigidBodyBase")); }
		return ptr;
	}

};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x0488 - 0x0468)
class APhysicsConstraintActor : public ARigidBodyBase
{
public:
	class UPhysicsConstraintComponent*                 ConstraintComp;                                           // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class AActor*                                      ConstraintActor1;                                         // 0x0470(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class AActor*                                      ConstraintActor2;                                         // 0x0478(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                                    // 0x0480(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0481(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintActor")); }
		return ptr;
	}

};


// Class Engine.PhysicsThruster
// 0x0008 (0x0470 - 0x0468)
class APhysicsThruster : public ARigidBodyBase
{
public:
	class UPhysicsThrusterComponent*                   ThrusterComponent;                                        // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThruster")); }
		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x0470 - 0x0468)
class ARadialForceActor : public ARigidBodyBase
{
public:
	class URadialForceComponent*                       ForceComponent;                                           // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RadialForceActor")); }
		return ptr;
	}


	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};


// Class Engine.SceneCapture
// 0x0008 (0x0470 - 0x0468)
class ASceneCapture : public AActor
{
public:
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x0468(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture")); }
		return ptr;
	}

};


// Class Engine.SceneCapture2D
// 0x0010 (0x0480 - 0x0470)
class ASceneCapture2D : public ASceneCapture
{
public:
	class USceneCaptureComponent2D*                    CaptureComponent2D;                                       // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0478(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCapture2D")); }
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureCube
// 0x0010 (0x0480 - 0x0470)
class ASceneCaptureCube : public ASceneCapture
{
public:
	class USceneCaptureComponentCube*                  CaptureComponentCube;                                     // 0x0470(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0478(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureCube")); }
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.ServerOnlyTestActor
// 0x0000 (0x0468 - 0x0468)
class AServerOnlyTestActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ServerOnlyTestActor")); }
		return ptr;
	}

};


// Class Engine.Interface_Animatable
// 0x0000 (0x0028 - 0x0028)
class UInterface_Animatable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Interface_Animatable")); }
		return ptr;
	}


	class UAnimInstance* GetAnimInstance();
};


// Class Engine.SkinnedMeshComponent
// 0x0120 (0x0780 - 0x0660)
class USkinnedMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0660(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class USkinnedMeshComponent>        MasterPoseComponent;                                      // 0x0668(0x0008) (CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0670(0x0050) MISSED OFFSET
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                    // 0x06C0(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x06C1(0x0007) MISSED OFFSET
	TArray<struct FActiveVertexAnim>                   ActiveVertexAnims;                                        // 0x06C8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UPhysicsAsset*                               PhysicsAssetOverride;                                     // 0x06D8(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x06E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinLodModel;                                              // 0x06E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                PredictedLODLevel;                                        // 0x06E8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                OldPredictedLODLevel;                                     // 0x06EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDistanceFactor;                                        // 0x06F0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x06F4(0x0004) MISSED OFFSET
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                  // 0x06F8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              StreamingDistanceMultiplier;                              // 0x0708(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      WireframeColor;                                           // 0x070C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceWireframe : 1;                                      // 0x0710(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bDisplayBones : 1;                                        // 0x0710(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bDisplayBoneCollisions : 1;                               // 0x0710(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bDisableMorphTarget : 1;                                  // 0x0710(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bHideSkin : 1;                                            // 0x0710(0x0001) ( BITFIELD: 1010)
	unsigned char                                      UnknownData03[0x17];                                      // 0x0711(0x0017) MISSED OFFSET
	unsigned char                                      bUnknown0711_2020 : 1;                                    // 0x0711(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0711_4040 : 1;                                    // 0x0711(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0711_8080 : 1;                                    // 0x0711(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x0728(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                         // 0x0728(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                          // 0x0728(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	TEnumAsByte<EMeshComponentUpdateFlag>              MeshComponentUpdateFlag;                                  // 0x072C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceMeshObjectUpdate : 1;                               // 0x0730(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bChartDistanceFactor : 1;                                 // 0x0730(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bCanHighlightSelectedSections : 1;                        // 0x0730(0x0001) (CPF_Transient BITFIELD: 0404)
	unsigned char                                      bRecentlyRendered : 1;                                    // 0x0730(0x0001) (CPF_Transient BITFIELD: 0808)
	float                                              ProgressiveDrawingFraction;                               // 0x0734(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      CustomSortAlternateIndexMode;                             // 0x0738(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x13];                                      // 0x0739(0x0013) MISSED OFFSET
	struct FBoxSphereBounds                            CachedLocalBounds;                                        // 0x074C(0x001C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bCachedLocalBoundsUpToDate;                               // 0x0768(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bEnableUpdateRateOptimizations;                           // 0x0769(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations;                     // 0x076A(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x15];                                      // 0x076B(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkinnedMeshComponent")); }
		return ptr;
	}


	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMasterPoseComponent(class USkinnedMeshComponent* NewMasterBoneComponent);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FName GetParentBone(const struct FName& BoneName);
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};


// Class Engine.PhysicsConstraintComponent
// 0x01B0 (0x0490 - 0x02E0)
class UPhysicsConstraintComponent : public USceneComponent
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x02E0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName1;                                           // 0x02E8(0x0008) (CPF_Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x02F0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_IsPlainOldData)
	struct FConstrainComponentPropName                 ComponentName2;                                           // 0x02F8(0x0008) (CPF_Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0300(0x0010) MISSED OFFSET
	class UPhysicsConstraintTemplate*                  ConstraintSetup;                                          // 0x0310(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0318(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0328(0x0008) MISSED OFFSET
	struct FConstraintInstance                         ConstraintInstance;                                       // 0x0330(0x0160) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintComponent")); }
		return ptr;
	}


	void SetLinearZLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UPrimitiveComponent* Component1, const struct FName& BoneName1, class UPrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
};


// Class Engine.SkeletalMeshComponent
// 0x02F0 (0x0A70 - 0x0780)
class USkeletalMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0780(0x0010) MISSED OFFSET
	TEnumAsByte<EAnimationMode>                        AnimationMode;                                            // 0x0790(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0791(0x0007) MISSED OFFSET
	class UClass*                                      AnimBlueprintGeneratedClass;                              // 0x0798(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x07A0(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FSingleAnimationPlayData                    AnimationData;                                            // 0x07A8(0x0020) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData02[0x10];                                      // 0x07C8(0x0010) MISSED OFFSET
	TArray<struct FTransform>                          CachedLocalAtoms;                                         // 0x07D8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FTransform>                          CachedSpaceBases;                                         // 0x07E8(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData03[0x28];                                      // 0x07F8(0x0028) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x0820(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasValidBodies : 1;                                      // 0x0824(0x0001) (CPF_Transient BITFIELD: 0101)
	TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType;                                 // 0x0828(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bBlendPhysics : 1;                                        // 0x082C(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                      // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                           // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bDisableClothSimulation : 1;                              // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bCollideWithEnvironment : 1;                              // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bCollideWithAttachedChildren : 1;                         // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bLocalSpaceSimulation : 1;                                // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bClothMorphTarget : 1;                                    // 0x082C(0x0001) (CPF_Edit BITFIELD: 8080)
	unsigned char                                      bResetAfterTeleport : 1;                                  // 0x082D(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              TeleportDistanceThreshold;                                // 0x0830(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x0834(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x0838(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x083C(0x0004) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                                      // 0x0840(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bNoSkeletonUpdate : 1;                                    // 0x084C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bPauseAnims : 1;                                          // 0x084C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x084C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0404)
	class UBodySetup*                                  BodySetup;                                                // 0x0850(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bAutonomousTickPose : 1;                                  // 0x0858(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bForceRefpose : 1;                                        // 0x0858(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bOldForceRefPose : 1;                                     // 0x0858(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bShowPrePhysBones : 1;                                    // 0x0858(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bRequiredBonesUpToDate : 1;                               // 0x0858(0x0001) (CPF_Transient BITFIELD: 1010)
	unsigned char                                      bAnimTreeInitialised : 1;                                 // 0x0858(0x0001) (CPF_Transient BITFIELD: 2020)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                           // 0x0858(0x0001) ( BITFIELD: 4040)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x085C(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x0868(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x086C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0870(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UseRefPoseToInitialise;                                   // 0x0880(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x1C7];                                     // 0x0881(0x01C7) MISSED OFFSET
	class UAnimSequence*                               SequenceToPlay;                                           // 0x0A48(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class UAnimationAsset*                             AnimToPlay;                                               // 0x0A50(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bDefaultLooping : 1;                                      // 0x0A58(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      bDefaultPlaying : 1;                                      // 0x0A58(0x0001) (CPF_Deprecated BITFIELD: 0202)
	float                                              DefaultPosition;                                          // 0x0A5C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DefaultPlayRate;                                          // 0x0A60(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              LastPoseTickTime;                                         // 0x0A64(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0A68(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshComponent")); }
		return ptr;
	}


	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void Stop();
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetClothMaxDistanceScale(float Scale);
	void SetAnimInstanceClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<EAnimationMode> InAnimationMode);
	void SetAnimation(class UAnimationAsset* NewAnimToPlay);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void ResetClothTeleportMode();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UAnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	bool IsPlaying();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	float GetClothMaxDistanceScale();
	class UAnimInstance* GetAnimInstance();
	TEnumAsByte<EAnimationMode> GetAnimationMode();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	void ClearMorphTargets();
	void BindClothToMasterPoseComponent();
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MatineeAnimInterface")); }
		return ptr;
	}

};


// Class Engine.SkeletalMeshActor
// 0x0040 (0x04A8 - 0x0468)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	unsigned char                                      bUnknown0468_0101 : 1;                                    // 0x0468(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0468_0202 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0468_0404 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0468_0808 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0468_1010 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0468_2020 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0468_4040 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0468_8080 : 1;                                    // 0x0468(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bShouldDoAnimNotifies : 1;                                // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bWakeOnLevelStart : 1;                                    // 0x0470(0x0001) (CPF_Deprecated BITFIELD: 0202)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x0480(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x0488(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x0490(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x0498(0x0008) (CPF_Net, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshActor")); }
		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class Engine.SplineMeshActor
// 0x0008 (0x0470 - 0x0468)
class ASplineMeshActor : public AActor
{
public:
	class USplineMeshComponent*                        SplineMeshComponent;                                      // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshActor")); }
		return ptr;
	}

};


// Class Engine.CoveredMeshActor
// 0x0008 (0x0480 - 0x0478)
class ACoveredMeshActor : public AStaticMeshActor
{
public:
	class UInstancedCoverageMeshComponent*             InstancedCoverageMeshComponent;                           // 0x0478(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CoveredMeshActor")); }
		return ptr;
	}

};


// Class Engine.StreamingProbe
// 0x0000 (0x0468 - 0x0468)
class AStreamingProbe : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StreamingProbe")); }
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0000 (0x0468 - 0x0468)
class ATargetPoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TargetPoint")); }
		return ptr;
	}

};


// Class Engine.TextRenderActor
// 0x0008 (0x0470 - 0x0468)
class ATextRenderActor : public AActor
{
public:
	class UTextRenderComponent*                        TextRender;                                               // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextRenderActor")); }
		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0010 (0x0478 - 0x0468)
class ATriggerBase : public AActor
{
public:
	class UShapeComponent*                             CollisionComponent;                                       // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBillboardComponent*                         SpriteComponent;                                          // 0x0470(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TriggerBase")); }
		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x0478 - 0x0478)
class ATriggerBox : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TriggerBox")); }
		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x0478 - 0x0478)
class ATriggerCapsule : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TriggerCapsule")); }
		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x0478 - 0x0478)
class ATriggerSphere : public ATriggerBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TriggerSphere")); }
		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x0470 - 0x0468)
class AVectorFieldVolume : public AActor
{
public:
	class UVectorFieldComponent*                       VectorFieldComponent;                                     // 0x0468(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldVolume")); }
		return ptr;
	}

};


// Class Engine.WaterEmissionVolume
// 0x0008 (0x0470 - 0x0468)
class AWaterEmissionVolume : public AActor
{
public:
	class UWaterEmissionVolumeComponent*               WaterEmissionVolumeComponent;                             // 0x0468(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WaterEmissionVolume")); }
		return ptr;
	}

};


// Class Engine.ApplicationLifecycleComponent
// 0x0050 (0x0120 - 0x00D0)
class UApplicationLifecycleComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x00D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x00E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x0100(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x0110(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ApplicationLifecycleComponent")); }
		return ptr;
	}


	void ApplicationLifetimeDelegate__DelegateSignature();
};


// Class Engine.InterpToMovementComponent
// 0x0098 (0x01B0 - 0x0118)
class UInterpToMovementComponent : public UMovementComponent
{
public:
	float                                              Duration;                                                 // 0x0118(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPauseOnImpact : 1;                                       // 0x011C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	TEnumAsByte<EInterpToBehaviourType>                BehaviourType;                                            // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0124(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                        // 0x0128(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                           // 0x0138(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                      // 0x0148(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                        // 0x0158(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                          // 0x0168(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0178(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x017C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FInterpControlPoint>                 ControlPoints;                                            // 0x0180(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0190(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpToMovementComponent")); }
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FHitResult& ImpactResult, float Time);
};


// Class Engine.NavigationSystem
// 0x03C0 (0x03E8 - 0x0028)
class UNavigationSystem : public UBlueprintFunctionLibrary
{
public:
	class ANavigationData*                             MainNavData;                                              // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class ANavigationData*                             AbstractNavData;                                          // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoCreateNavigationData : 1;                            // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bAllowClientSideNavigation : 1;                           // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bSupportRebuilding : 1;                                   // 0x0038(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bInitialBuildingLocked : 1;                               // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_ConfigMANUAL_ADD_BIT 1010)
	unsigned char                                      bSkipAgentHeightCheckWhenPickingNavData : 1;              // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 2020)
	TEnumAsByte<ENavDataGatheringModeConfig>           DataGatheringMode;                                        // 0x003C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bGenerateNavigationOnlyAroundNavigationInvokers : 1;      // 0x0040(0x0001) (CPF_Edit, CPF_Config, CPF_DisableEditOnInstance BITFIELD: 0101)
	float                                              ActiveTilesUpdateInterval;                                // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FNavDataConfig>                      SupportedAgents;                                          // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              DirtyAreasUpdateFreq;                                     // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	TArray<class ANavigationData*>                     NavDataSet;                                               // 0x0060(0x0010) (CPF_ZeroConstructor)
	TArray<class ANavigationData*>                     NavDataRegistrationQueue;                                 // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	unsigned char                                      UnknownData01[0x60];                                      // 0x0080(0x0060) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnNavDataRegisteredEvent;                                 // 0x00E0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	struct FScriptMulticastDelegate                    OnNavigationGenerationFinishedDelegate;                   // 0x00F0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0xFC];                                      // 0x0100(0x00FC) MISSED OFFSET
	TEnumAsByte<EFNavigationSystemRunMode>             OperationMode;                                            // 0x01FC(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x1EB];                                     // 0x01FD(0x01EB) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationSystem")); }
		return ptr;
	}


	void UnregisterNavigationInvoker(class AActor* Invoker);
	void SimpleMoveToLocation(class AController* Controller, const struct FVector& Goal);
	void SimpleMoveToActor(class AController* Controller, class AActor* Goal);
	void SetMaxSimultaneousTileGenerationJobsCount(int MaxNumberOfJobs);
	void SetGeometryGatheringMode(TEnumAsByte<ENavDataGatheringModeConfig> NewMode);
	void ResetMaxSimultaneousTileGenerationJobsCount();
	void RegisterNavigationInvoker(class AActor* Invoker, float TileGenerationRadius, float TileRemovalRadius);
	struct FVector ProjectPointToNavigation(class UObject* WorldContext, const struct FVector& Point, class ANavigationData* NavData, class UClass* FilterClass, const struct FVector& QueryExtent);
	void OnNavigationBoundsUpdated(class ANavMeshBoundsVolume* NavVolume);
	bool NavigationRaycast(class UObject* WorldContext, const struct FVector& RayStart, const struct FVector& RayEnd, class UClass* FilterClass, class AController* Querier, struct FVector* HitLocation);
	bool IsNavigationBeingBuilt(class UObject* WorldContext);
	struct FVector GetRandomReachablePointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector GetRandomPointInRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector GetRandomPointInNavigableRadius(class UObject* WorldContext, const struct FVector& Origin, float Radius, class ANavigationData* NavData, class UClass* FilterClass);
	struct FVector GetRandomPoint(class UObject* WorldContext, class ANavigationData* NavData, class UClass* FilterClass);
	TEnumAsByte<ENavigationQueryResult> GetPathLength(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathLength);
	TEnumAsByte<ENavigationQueryResult> GetPathCost(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class ANavigationData* NavData, class UClass* FilterClass, float* PathCost);
	class UNavigationSystem* GetNavigationSystem(class UObject* WorldContext);
	class UNavigationPath* FindPathToLocationSynchronously(class UObject* WorldContext, const struct FVector& PathStart, const struct FVector& PathEnd, class AActor* PathfindingContext, class UClass* FilterClass);
	class UNavigationPath* FindPathToActorSynchronously(class UObject* WorldContext, const struct FVector& PathStart, class AActor* GoalActor, float TetherDistance, class AActor* PathfindingContext, class UClass* FilterClass);
	bool DoesMainNavDataHaveValidNavMesh();
};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
class URVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RVOAvoidanceInterface")); }
		return ptr;
	}

};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
class UNetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NetworkPredictionInterface")); }
		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0170 - 0x0168)
class USpectatorPawnMovement : public UFloatingPawnMovement
{
public:
	unsigned char                                      bUnknown0168_0101 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0168_0202 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0168_0404 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0168_0808 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0168_1010 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0168_2020 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0168_4040 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0168_8080 : 1;                                    // 0x0168(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0168(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0169(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SpectatorPawnMovement")); }
		return ptr;
	}

};


// Class Engine.WheeledVehicleMovementComponent
// 0x0130 (0x0280 - 0x0150)
class UWheeledVehicleMovementComponent : public UPawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	TArray<struct FWheelSetup>                         WheelSetups;                                              // 0x0158(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              Mass;                                                     // 0x0168(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DragCoefficient;                                          // 0x016C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ChassisWidth;                                             // 0x0170(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ChassisHeight;                                            // 0x0174(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DragArea;                                                 // 0x0178(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              EstimatedMaxEngineSpeed;                                  // 0x017C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              MaxEngineRPM;                                             // 0x0180(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugDragMagnitude;                                       // 0x0184(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     InertiaTensorScale;                                       // 0x0188(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinNormalizedTireLoad;                                    // 0x0194(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinNormalizedTireLoadFiltered;                            // 0x0198(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxNormalizedTireLoad;                                    // 0x019C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxNormalizedTireLoadFiltered;                            // 0x01A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ThresholdLongitudinalSpeed;                               // 0x01A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LowForwardSpeedSubStepCount;                              // 0x01A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                HighForwardSpeedSubStepCount;                             // 0x01AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UVehicleWheel*>                       Wheels;                                                   // 0x01B0(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01C0(0x0004) MISSED OFFSET
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x01C4(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              RVOAvoidanceRadius;                                       // 0x01C8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOAvoidanceHeight;                                       // 0x01CC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceConsiderationRadius;                             // 0x01D0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOSteeringStep;                                          // 0x01D4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RVOThrottleStep;                                          // 0x01D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x01DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           AvoidanceGroup;                                           // 0x01E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToAvoid;                                            // 0x01E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FNavAvoidanceMask                           GroupsToIgnore;                                           // 0x01E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x01EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x01F0(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FReplicatedVehicleState                     ReplicatedState;                                          // 0x01FC(0x0014) (CPF_Net, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0210(0x0004) MISSED OFFSET
	float                                              RawSteeringInput;                                         // 0x0214(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              RawThrottleInput;                                         // 0x0218(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bRawHandbrakeInput : 1;                                   // 0x021C(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bRawGearUpInput : 1;                                      // 0x021C(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bRawGearDownInput : 1;                                    // 0x021C(0x0001) (CPF_Transient BITFIELD: 0404)
	float                                              SteeringInput;                                            // 0x0220(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ThrottleInput;                                            // 0x0224(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              BrakeInput;                                               // 0x0228(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              HandbrakeInput;                                           // 0x022C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              IdleBrakeInput;                                           // 0x0230(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StopThreshold;                                            // 0x0234(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WrongDirectionThreshold;                                  // 0x0238(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVehicleInputRate                           ThrottleInputRate;                                        // 0x023C(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           BrakeInputRate;                                           // 0x0244(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           HandbrakeInputRate;                                       // 0x024C(0x0008) (CPF_Edit)
	struct FVehicleInputRate                           SteeringInputRate;                                        // 0x0254(0x0008) (CPF_Edit)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x025C(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData03[0x23];                                      // 0x025D(0x0023) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WheeledVehicleMovementComponent")); }
		return ptr;
	}


	void SetUseAutoGears(bool bUseAuto);
	void SetThrottleInput(float Throttle);
	void SetTargetGear(int GearNum, bool bImmediate);
	void SetSteeringInput(float Steering);
	void SetHandbrakeInput(bool bNewHandbrake);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoid(int GroupFlags);
	void SetGearUp(bool bNewGearUp);
	void SetGearDown(bool bNewGearDown);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int CurrentGear);
	bool GetUseAutoGears();
	int GetTargetGear();
	float GetForwardSpeed();
	float GetEngineRotationSpeed();
	float GetEngineMaxRotationSpeed();
	int GetCurrentGear();
};


// Class Engine.WheeledVehicleMovementComponent4W
// 0x0170 (0x03F0 - 0x0280)
class UWheeledVehicleMovementComponent4W : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleEngineData                          EngineSetup;                                              // 0x0280(0x0098) (CPF_Edit)
	struct FVehicleDifferential4WData                  DifferentialSetup;                                        // 0x0318(0x001C) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0334(0x0004) MISSED OFFSET
	struct FVehicleTransmissionData                    TransmissionSetup;                                        // 0x0338(0x0030) (CPF_Edit)
	struct FRuntimeFloatCurve                          SteeringCurve;                                            // 0x0368(0x0080) (CPF_Edit)
	float                                              AckermannAccuracy;                                        // 0x03E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WheeledVehicleMovementComponent4W")); }
		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x0068 (0x0180 - 0x0118)
class UProjectileMovementComponent : public UMovementComponent
{
public:
	float                                              InitialSpeed;                                             // 0x0118(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x011C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity : 1;                             // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bShouldBounce : 1;                                        // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                         // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bIsHomingProjectile : 1;                                  // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                          // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bIsSliding : 1;                                           // 0x0120(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_DisableEditOnTemplate, CPF_EditConst BITFIELD: 4040)
	float                                              PreviousHitTime;                                          // 0x0124(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                        // 0x0128(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x0134(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0138(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Bounciness;                                               // 0x013C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Friction;                                                 // 0x0140(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x0144(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                       // 0x0148(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                         // 0x0158(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x0168(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TWeakObjectPtr<class USceneComponent>              HomingTargetComponent;                                    // 0x016C(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_DisableEditOnTemplate, CPF_EditConst, CPF_InstancedReference, CPF_IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x0174(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0178(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ProjectileMovementComponent")); }
		return ptr;
	}


	void StopSimulating(const struct FHitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void OnProjectileStopDelegate__DelegateSignature(const struct FHitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
};


// Class Engine.RotatingMovementComponent
// 0x0020 (0x0138 - 0x0118)
class URotatingMovementComponent : public UMovementComponent
{
public:
	struct FRotator                                    RotationRate;                                             // 0x0118(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PivotTranslation;                                         // 0x0124(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                                // 0x0130(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RotatingMovementComponent")); }
		return ptr;
	}

};


// Class Engine.NavigationInvokerComponent
// 0x0008 (0x00D8 - 0x00D0)
class UNavigationInvokerComponent : public UActorComponent
{
public:
	float                                              TileGenerationRadius;                                     // 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TileRemovalRadius;                                        // 0x00D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationInvokerComponent")); }
		return ptr;
	}

};


// Class Engine.NavRelevantComponent
// 0x0030 (0x0100 - 0x00D0)
class UNavRelevantComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x00D0(0x0024) MISSED OFFSET
	unsigned char                                      bUnknown00D0_0101 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00D0_0202 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00D0_0404 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown00D0_0808 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown00D0_1010 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown00D0_2020 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown00D0_4040 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown00D0_8080 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bNavigationRelevant : 1;                                  // 0x00F4(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bAttachToOwnersRoot : 1;                                  // 0x00F4(0x0001) ( BITFIELD: 0202)
	class UObject*                                     CachedNavParent;                                          // 0x00F8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavRelevantComponent")); }
		return ptr;
	}


	void SetNavigationRelevancy(bool bRelevant);
};


// Class Engine.NavLinkCustomInterface
// 0x0000 (0x0028 - 0x0028)
class UNavLinkCustomInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkCustomInterface")); }
		return ptr;
	}

};


// Class Engine.NavLinkCustomComponent
// 0x0098 (0x0198 - 0x0100)
class UNavLinkCustomComponent : public UNavRelevantComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	uint32_t                                           NavLinkUserId;                                            // 0x0108(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class UClass*                                      EnabledAreaClass;                                         // 0x0110(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      DisabledAreaClass;                                        // 0x0118(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LinkRelativeStart;                                        // 0x0120(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LinkRelativeEnd;                                          // 0x012C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ENavLinkDirection>                     LinkDirection;                                            // 0x0138(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLinkEnabled : 1;                                         // 0x013C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bNotifyWhenEnabled : 1;                                   // 0x013C(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bNotifyWhenDisabled : 1;                                  // 0x013C(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bCreateBoxObstacle : 1;                                   // 0x013C(0x0001) (CPF_Edit BITFIELD: 0808)
	struct FVector                                     ObstacleOffset;                                           // 0x0140(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     ObstacleExtent;                                           // 0x014C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      ObstacleAreaClass;                                        // 0x0158(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BroadcastRadius;                                          // 0x0160(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BroadcastInterval;                                        // 0x0164(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     BroadcastChannel;                                         // 0x0168(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x2F];                                      // 0x0169(0x002F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkCustomComponent")); }
		return ptr;
	}

};


// Class Engine.NavModifierComponent
// 0x0020 (0x0120 - 0x0100)
class UNavModifierComponent : public UNavRelevantComponent
{
public:
	class UClass*                                      AreaClass;                                                // 0x0100(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     FailsafeExtent;                                           // 0x0108(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0114(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavModifierComponent")); }
		return ptr;
	}

};


// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (0x00F8 - 0x00D0)
class UPawnNoiseEmitterComponent : public UActorComponent
{
public:
	unsigned char                                      bUnknown00D0_0101 : 1;                                    // 0x00D0(0x0001) (CPF_Edit, CPF_DisableEditOnInstanceMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00D0_0202 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00D0_0404 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown00D0_0808 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown00D0_1010 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown00D0_2020 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown00D0_4040 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown00D0_8080 : 1;                                    // 0x00D0(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                 // 0x00D0(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0101)
	struct FVector                                     LastRemoteNoisePosition;                                  // 0x00D4(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x00E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x00E4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x00E8(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x00EC(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x00F0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PawnNoiseEmitterComponent")); }
		return ptr;
	}


	void MakeNoise(class AActor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};


// Class Engine.PhysicsHandleComponent
// 0x00B0 (0x0180 - 0x00D0)
class UPhysicsHandleComponent : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x00D0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00D8(0x0010) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x00E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x00EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngularDamping;                                           // 0x00F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x00F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x68];                                      // 0x00F8(0x0068) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x0160(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x0164(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsHandleComponent")); }
		return ptr;
	}


	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x00F0 - 0x00D0)
class UPlatformEventsComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                      // 0x00D0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                      // 0x00E0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlatformEventsComponent")); }
		return ptr;
	}


	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};


// Class Engine.AtmosphericFogComponent
// 0x01D0 (0x04B0 - 0x02E0)
class UAtmosphericFogComponent : public USceneComponent
{
public:
	float                                              SunMultiplier;                                            // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogMultiplier;                                            // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DensityMultiplier;                                        // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DensityOffset;                                            // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceScale;                                            // 0x02F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceOffset;                                           // 0x02F8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GroundOffset;                                             // 0x02FC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartDistance;                                            // 0x0300(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SunDiscScale;                                             // 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DefaultBrightness;                                        // 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      DefaultLightColor;                                        // 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDisableSunDisk : 1;                                      // 0x0310(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bDisableGroundScattering : 1;                             // 0x0310(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0202)
	struct FAtmospherePrecomputeParameters             PrecomputeParams;                                         // 0x0314(0x002C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UTexture2D*                                  TransmittanceTexture;                                     // 0x0340(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	class UTexture2D*                                  IrradianceTexture;                                        // 0x0348(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x160];                                     // 0x0350(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AtmosphericFogComponent")); }
		return ptr;
	}


	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};


// Class Engine.SoundAttenuation
// 0x00C0 (0x00E8 - 0x0028)
class USoundAttenuation : public UObject
{
public:
	struct FAttenuationSettings                        Attenuation;                                              // 0x0028(0x00C0) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundAttenuation")); }
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x0180 (0x0460 - 0x02E0)
class UAudioComponent : public USceneComponent
{
public:
	class USoundBase*                                  Sound;                                                    // 0x02E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x02E8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	class USoundClass*                                 SoundClassOverride;                                       // 0x02F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x0300(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x0300(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                         // 0x0300(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bAllowSpatialization : 1;                                 // 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0808)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 1010)
	unsigned char                                      bIsUISound : 1;                                           // 0x0300(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 2020)
	float                                              PitchModulationMin;                                       // 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0314(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0318(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HighFrequencyGainMultiplier;                              // 0x031C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0320(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                                     // 0x0328(0x00C0) (CPF_Edit, CPF_BlueprintVisible)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioFinished;                                          // 0x03F0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0400(0x0048) MISSED OFFSET
	struct FScriptDelegate                             OnQueueSubtitles;                                         // 0x0448(0x0014) (CPF_ZeroConstructor, CPF_InstancedReference)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0458(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AudioComponent")); }
		return ptr;
	}


	void Stop();
	void SetWaveParameter(const struct FName& InName, class USoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSound(class USoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetIntParameter(const struct FName& InName, int InInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustAttenuation(const struct FAttenuationSettings& InAttenuationSettings);
};


// Class Engine.BasisComponent
// 0x0010 (0x02F0 - 0x02E0)
class UBasisComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BasisComponent")); }
		return ptr;
	}

};


// Class Engine.CalmWaterComponent
// 0x0010 (0x02F0 - 0x02E0)
class UCalmWaterComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RadiusPercentageToStartLerp;                              // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DampeningFactor;                                          // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CalmWaterComponent")); }
		return ptr;
	}

};


// Class Engine.DecalComponent
// 0x0030 (0x0310 - 0x02E0)
class UDecalComponent : public USceneComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x02E0(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SortOrder;                                                // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x02F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DecalComponent")); }
		return ptr;
	}


	void SetSortOrder(int Value);
	void SetLifeSpan(float LifeSpan);
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	class UMaterialInterface* GetDecalMaterial();
	class UMaterialInstanceDynamic* GetDecalDynamicMaterialInstance();
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.ExponentialHeightFogComponent
// 0x0060 (0x0340 - 0x02E0)
class UExponentialHeightFogComponent : public USceneComponent
{
public:
	float                                              FogDensity;                                               // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                FogInscatteringColor;                                     // 0x02E4(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                FarFogInscatteringColor;                                  // 0x02F4(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x0304(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x0308(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartScaleDirectionalInscattering;                        // 0x030C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarScaleDirectionalInscattering;                          // 0x0310(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                             // 0x0314(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogHeightFalloff;                                         // 0x0324(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartDistance;                                            // 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarDistance;                                              // 0x0330(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartScale;                                               // 0x0334(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarScale;                                                 // 0x0338(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsUnderwater;                                            // 0x033C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ExponentialHeightFogComponent")); }
		return ptr;
	}


	void SetStartDistance(float Value);
	void SetInscatteringStartScale(float Value);
	void SetInscatteringFarScale(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFarInscatteringColour(const struct FLinearColor& Value);
	void SetExponentialFogFarDistance(float Value);
	void SetDirectionalInscatteringStartScale(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringFarScale(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};


// Class Engine.AmbientLightSourceComponent
// 0x0020 (0x0490 - 0x0470)
class UAmbientLightSourceComponent : public ULightComponent
{
public:
	struct FLinearColor                                Tint;                                                     // 0x0470(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      QuadraticFalloff : 1;                                     // 0x0480(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	TEnumAsByte<EAmbientLightConeShape>                Shape;                                                    // 0x0484(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAmbientLightClusteringPolicy>         GroupingPolicy;                                           // 0x0485(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xA];                                       // 0x0486(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AmbientLightSourceComponent")); }
		return ptr;
	}


	void SetTint(const struct FLinearColor& NewTint);
	void SetRadius(float NewRadius);
	void SetGroupingPolicy(TEnumAsByte<EAmbientLightClusteringPolicy> Policy);
	void SetAmbientIntensity(float NewIntensity);
};


// Class Engine.DirectionalLightComponent
// 0x0080 (0x04F0 - 0x0470)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              OcclusionDepthRange;                                      // 0x0470(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                              // 0x0474(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x0480(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x0484(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x0488(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x048C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x0494(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x0498(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastTransitionSizeOverride;                               // 0x049C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CloseCascadeUpdateRateInMs;                               // 0x04A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarCascadesUpdateRateInMs;                                // 0x04A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                    // 0x04A8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	int                                                FarShadowCascadeCount;                                    // 0x04AC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x04B0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalOffsetScale;                                        // 0x04B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CloudsShadowsIntensity;                                   // 0x04B8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x04BC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x04C0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TraceDistance;                                            // 0x04C4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x04C8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      bCastModulatedShadows : 1;                                // 0x04D8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	struct FColor                                      ModulatedShadowColor;                                     // 0x04DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                            // 0x04E0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      UnknownData00[0xF];                                       // 0x04E1(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DirectionalLightComponent")); }
		return ptr;
	}


	void SetShadowLastTransitionSize(float NewValue);
	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetNormalOffsetBiasScale(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetFarCascadeUpdateRate(float NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCloudsShadowsIntensity(float NewValue);
	void SetCloseCascadeUpdateRate(float NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};


// Class Engine.PointLightComponent
// 0x0040 (0x04B0 - 0x0470)
class UPointLightComponent : public ULightComponent
{
public:
	unsigned char                                      bUnknown0470_0101 : 1;                                    // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnlyMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0470_0202 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0470_0404 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0470_0808 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0470_1010 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0470_2020 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0470_4040 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0470_8080 : 1;                                    // 0x0470(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseInverseSquaredFalloff : 1;                            // 0x0470(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	float                                              LightFalloffExponent;                                     // 0x0474(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              IntensityScaleForWater;                                   // 0x0478(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinDistanceToLightAssumed;                                // 0x047C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceRadius;                                             // 0x0480(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SourceLength;                                             // 0x0484(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESimpleLightFunctionType>              SimpleFunctionType;                                       // 0x0488(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScaleOffset;                                              // 0x048C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PulsePhase;                                               // 0x0490(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FlickerFrequency;                                         // 0x0494(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FlickerPerlinRow;                                         // 0x0498(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x049C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PointLightComponent")); }
		return ptr;
	}


	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
	void SetAttenuationRadius(float NewRadius);
};


// Class Engine.SpotLightComponent
// 0x0010 (0x04C0 - 0x04B0)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              LightShaftConeAngle;                                      // 0x04B0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              KickBackRatio;                                            // 0x04B4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x04B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SpotLightComponent")); }
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetKickBackProportionality(float NewKickBackRatio);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.SkyLightComponent
// 0x01A0 (0x04B0 - 0x0310)
class USkyLightComponent : public ULightComponentBase
{
public:
	TEnumAsByte<ESkyLightSourceType>                   SourceType;                                               // 0x0310(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0311(0x0007) MISSED OFFSET
	class UTextureCube*                                Cubemap;                                                  // 0x0318(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x0320(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLowerHemisphereIsBlack;                                  // 0x0324(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OcclusionMaxDistance;                                     // 0x0328(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Contrast;                                                 // 0x032C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x0330(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      OcclusionTint;                                            // 0x0334(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x0338(0x00B0) MISSED OFFSET
	class UTextureCube*                                BlendDestinationCubemap;                                  // 0x03E8(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0xC0];                                      // 0x03F0(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkyLightComponent")); }
		return ptr;
	}


	void SetOcclusionTint(const struct FColor& InTint);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UTextureCube* SourceCubemap, class UTextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UTextureCube* NewCubemap);
	void RecaptureSky();
};


// Class Engine.NavigationGraphNodeComponent
// 0x0030 (0x0310 - 0x02E0)
class UNavigationGraphNodeComponent : public USceneComponent
{
public:
	struct FNavGraphNode                               Node;                                                     // 0x02E0(0x0018)
	class UNavigationGraphNodeComponent*               NextNodeComponent;                                        // 0x02F8(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UNavigationGraphNodeComponent*               PrevNodeComponent;                                        // 0x0300(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationGraphNodeComponent")); }
		return ptr;
	}

};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x0310 - 0x02E0)
class UPhysicsSpringComponent : public USceneComponent
{
public:
	float                                              SpringStiffness;                                          // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringDamping;                                            // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringLengthAtRest;                                       // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringRadius;                                             // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     SpringChannel;                                            // 0x02F0(0x0001) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreSelf;                                              // 0x02F1(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpringCompression;                                        // 0x02F4(0x0004) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x02F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSpringComponent")); }
		return ptr;
	}


	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x02F0 - 0x02E0)
class UPhysicsThrusterComponent : public USceneComponent
{
public:
	float                                              ThrustStrength;                                           // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x02E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsThrusterComponent")); }
		return ptr;
	}

};


// Class Engine.PostProcessComponent
// 0x0550 (0x0830 - 0x02E0)
class UPostProcessComponent : public USceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02E0(0x0010) MISSED OFFSET
	struct FPostProcessSettings                        Settings;                                                 // 0x02F0(0x0530) (CPF_Edit, CPF_BlueprintVisible)
	float                                              Priority;                                                 // 0x0820(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0824(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0828(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bUnbound : 1;                                             // 0x082C(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PostProcessComponent")); }
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.ArrowComponent
// 0x0020 (0x0670 - 0x0650)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x0650(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ArrowSize;                                                // 0x0654(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled;                                      // 0x0658(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScreenSize;                                               // 0x065C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTreatAsASprite : 1;                                      // 0x0660(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0661(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ArrowComponent")); }
		return ptr;
	}


	void SetArrowColor_New(const struct FLinearColor& NewColor);
	void SetArrowColor_DEPRECATED(const struct FColor& NewColor);
};


// Class Engine.WaterId
// 0x0000 (0x0028 - 0x0028)
class UWaterId : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WaterId")); }
		return ptr;
	}

};


// Class Engine.BaseWaterComponent
// 0x0010 (0x0660 - 0x0650)
class UBaseWaterComponent : public UPrimitiveComponent
{
public:
	class UClass*                                      WaterId;                                                  // 0x0650(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      ActiveInExclusionZone;                                    // 0x0658(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0659(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BaseWaterComponent")); }
		return ptr;
	}

};


// Class Engine.FFTWaterComponent
// 0x0370 (0x09D0 - 0x0660)
class UFFTWaterComponent : public UBaseWaterComponent
{
public:
	struct FFFTWaterComponentParams                    WaterParams;                                              // 0x0660(0x0298) (CPF_Edit)
	class UModel*                                      Brush;                                                    // 0x08F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBodySetup*                                  BrushBodySetup;                                           // 0x0900(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PrePivot;                                                 // 0x0908(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x84];                                      // 0x0914(0x0084) MISSED OFFSET
	class UMaterialInterface*                          LightFunctionMaterial;                                    // 0x0998(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UMaterial*                                   DefaultLightFunctionMaterial;                             // 0x09A0(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x09A8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FFTWaterComponent")); }
		return ptr;
	}


	void SetWaterColour(const struct FLinearColor& WaterColour);
	void SetSpecularBrightness(float SpecularBrightness);
	void SetShallowWaterColour(const struct FLinearColor& ShallowWaterColour);
	void SetReflectionBrightness(float ReflectionBrightness);
	void SetMurkyRegion(const struct FMurkyRegion& MurkyRegion);
	void SetFresnelPower(float FresnelPower);
	void SetFoamHighlightColour(const struct FLinearColor& FoamHighlightColour);
	void SetFoamColour(const struct FLinearColor& FoamColour);
	void SetFoamBrightness(float FoamBrightness);
	void SetCarrierWaveParams(float Amplitude, float WaveLength, float PropagationSpeed);
	void SetBackLitColour(const struct FLinearColor& BackLitColour);
	void SetAmbientColour(const struct FLinearColor& AmbientColour);
};


// Class Engine.FFTWaterExtendedPlaneComponent
// 0x02B0 (0x0910 - 0x0660)
class UFFTWaterExtendedPlaneComponent : public UBaseWaterComponent
{
public:
	struct FFFTWaterComponentParams                    WaterParams;                                              // 0x0660(0x0298)
	class UMaterial*                                   Material;                                                 // 0x08F8(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0900(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FFTWaterExtendedPlaneComponent")); }
		return ptr;
	}

};


// Class Engine.BillboardComponent
// 0x0020 (0x0670 - 0x0650)
class UBillboardComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x0650(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x0658(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	float                                              ScreenSize;                                               // 0x065C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              U;                                                        // 0x0660(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UL;                                                       // 0x0664(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              V;                                                        // 0x0668(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VL;                                                       // 0x066C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BillboardComponent")); }
		return ptr;
	}


	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};


// Class Engine.BrushComponent
// 0x0020 (0x0670 - 0x0650)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x0650(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBodySetup*                                  BrushBodySetup;                                           // 0x0658(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     PrePivot;                                                 // 0x0660(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x066C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BrushComponent")); }
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x0670 - 0x0650)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                             // 0x0650(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumAngle;                                             // 0x0654(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumAspectRatio;                                       // 0x0658(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x065C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x0660(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0664(0x0004) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x0668(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DrawFrustumComponent")); }
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0040 (0x0690 - 0x0650)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x0650(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LineBatchComponent")); }
		return ptr;
	}

};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x0660 - 0x0650)
class UMaterialBillboardComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMaterialSpriteElement>              Elements;                                                 // 0x0650(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialBillboardComponent")); }
		return ptr;
	}


	void AddElement(class UMaterialInterface* Material, class UCurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UCurveFloat* DistanceToSizeCurve);
};


// Class Engine.MergedCollisionComponent
// 0x0020 (0x0670 - 0x0650)
class UMergedCollisionComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMergedCollisionComponentStaticMeshInstanceData> PerInstanceData;                                          // 0x0650(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0660(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MergedCollisionComponent")); }
		return ptr;
	}


	class UStaticMesh* GetStaticMeshByInstanceBodyIndex(int InstanceBodyIndex);
	int GetOwningActorCrc32ByInstanceBodyIndex(int InstanceBodyIndex);
};


// Class Engine.DestructibleComponent
// 0x00C0 (0x0840 - 0x0780)
class UDestructibleComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      bUnknown0780_0101 : 1;                                    // 0x0780(0x0001) (CPF_Edit, CPF_BlueprintVisibleMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0780_0202 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0780_0404 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0780_0808 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0780_1010 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0780_2020 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0780_4040 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0780_8080 : 1;                                    // 0x0780(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bFractureEffectOverride : 1;                              // 0x0780(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0781(0x0007) MISSED OFFSET
	TArray<struct FFractureEffect>                     FractureEffects;                                          // 0x0788(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bEnableHardSleeping;                                      // 0x0798(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LargeChunkThreshold;                                      // 0x079C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x07A0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnComponentFracture;                                      // 0x07B0(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData02[0x80];                                      // 0x07C0(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DestructibleComponent")); }
		return ptr;
	}


	void SetDestructibleMesh(class UDestructibleMesh* NewMesh);
	class UDestructibleMesh* GetDestructibleMesh();
	void ApplyRadiusDamage(float BaseDamage, const struct FVector& HurtOrigin, float DamageRadius, float ImpulseStrength, bool bFullDamage);
	void ApplyDamage(float DamageAmount, const struct FVector& HitLocation, const struct FVector& ImpulseDir, float ImpulseStrength);
};


// Class Engine.PoseableMeshComponent
// 0x00D0 (0x0850 - 0x0780)
class UPoseableMeshComponent : public USkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0780(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PoseableMeshComponent")); }
		return ptr;
	}


	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace);
};


// Class Engine.PoseableSkeletalMeshComponent
// 0x0010 (0x0A80 - 0x0A70)
class UPoseableSkeletalMeshComponent : public USkeletalMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0A70(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PoseableSkeletalMeshComponent")); }
		return ptr;
	}


	void SwitchPoseMode(TEnumAsByte<EPoseableAnimMode> NewMode);
	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
	void SetBoneTransformByIndex(int BoneIndex, const struct FTransform& InTransform, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<EBoneSpaces> BoneSpace, bool bApplyRefPose);
};


// Class Engine.FlatWaterMeshComponent
// 0x00A0 (0x0770 - 0x06D0)
class UFlatWaterMeshComponent : public UStaticMeshComponent
{
public:
	int                                                RandomDropRate;                                           // 0x06D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomDropSize;                                           // 0x06D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomDropHeight;                                         // 0x06D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RestorationScale;                                         // 0x06DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceScale;                                               // 0x06E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DampHeight;                                               // 0x06E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalMapScale;                                           // 0x06E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TextureWidth;                                             // 0x06EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TextureHeight;                                            // 0x06F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06F4(0x0004) MISSED OFFSET
	class UStaticMesh*                                 ClippingHull;                                             // 0x06F8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxSimulationDistance;                                    // 0x0700(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0704(0x0004) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x0708(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTexture*                                    NormalTexture;                                            // 0x0710(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UTextureRenderTarget2D*                      WaterMaskTexture;                                         // 0x0718(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x0720(0x0018) MISSED OFFSET
	TArray<class UMaterialInterface*>                  OriginalMaterials;                                        // 0x0738(0x0010) (CPF_ZeroConstructor)
	TArray<struct FFlatWaterMeshTextureOverride>       TextureOverrides;                                         // 0x0748(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0758(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FlatWaterMeshComponent")); }
		return ptr;
	}


	void UpdateBoundary(class AActor* BoundaryActor);
	void SetTexture(int MaterialIndex, const struct FName& Name, class UTexture* Texture);
	void SetScalarValue(int MaterialIndex, const struct FName& Name, float Value);
	void PlaceDrop(const struct FVector2D& Position, float Size, float Height);
	void CreateBoundaryMap(class AActor* BoundaryActor, float ZNearDistance, float ZFarDistance, int TextureSize);
};


// Class Engine.InstancedCoverageMeshComponent
// 0x0090 (0x0760 - 0x06D0)
class UInstancedCoverageMeshComponent : public UStaticMeshComponent
{
public:
	TWeakObjectPtr<class UStaticMeshComponent>         CoveredMeshComponent;                                     // 0x06D0(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                InstanceCount;                                            // 0x06D8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstancingRandomSeed;                                     // 0x06DC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InstancePositionExtrusion;                                // 0x06E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InstanceScale;                                            // 0x06E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InstanceScaleVariance;                                    // 0x06E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    InstanceRotation;                                         // 0x06EC(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    InstanceRotationVariance;                                 // 0x06F8(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     InstanceAttractionDirection;                              // 0x0704(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InstanceAttractionIntensity;                              // 0x0710(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InstanceBaseMeshPlacementLOD;                             // 0x0714(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FInstancedCoverageMeshLOD>           LODs;                                                     // 0x0718(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	float                                              CompleteCullingDistance;                                  // 0x0728(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InstanceLODPreserveSilhouette;                            // 0x072C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BackFaceCullingAngle;                                     // 0x0730(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowBackFaceCullingAngle;                               // 0x0734(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxPlacementAttempts;                                     // 0x0738(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEvenlySpaced;                                            // 0x073C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bVertexColourDensity;                                     // 0x073D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdatePlacement;                                         // 0x073E(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<float>                                      RandomNumbers;                                            // 0x0740(0x0010) (CPF_BlueprintVisible, CPF_ZeroConstructor)
	float                                              BaseMeshSurfaceArea;                                      // 0x0750(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0754(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InstancedCoverageMeshComponent")); }
		return ptr;
	}


	void SetBaseMeshComponent(class UStaticMeshComponent* BaseMeshComponent);
	class UStaticMeshComponent* BaseMeshComponent();
};


// Class Engine.MergedStaticMeshComponent
// 0x0020 (0x06F0 - 0x06D0)
class UMergedStaticMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      bDisplayMergedInEditor;                                   // 0x06D0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x06D1(0x0007) MISSED OFFSET
	TArray<float>                                      LODScreenSizes;                                           // 0x06D8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      bMergeVertexColours;                                      // 0x06E8(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x06E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MergedStaticMeshComponent")); }
		return ptr;
	}

};


// Class Engine.SplineMeshComponent
// 0x00A0 (0x0770 - 0x06D0)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x06D0(0x0008) MISSED OFFSET
	struct FSplineMeshParams                           SplineParams;                                             // 0x06D8(0x0058) (CPF_Edit)
	struct FVector                                     SplineUpDir;                                              // 0x0730(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                       // 0x073C(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0101)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x073C(0x0001) (CPF_Edit BITFIELD: 0202)
	TEnumAsByte<ESplineMeshAxis>                       ForwardAxis;                                              // 0x0740(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SplineBoundaryMin;                                        // 0x0744(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x0748(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x074C(0x0004) MISSED OFFSET
	class UBodySetup*                                  BodySetup;                                                // 0x0750(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x0758(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bMeshDirty : 1;                                           // 0x0768(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0769(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SplineMeshComponent")); }
		return ptr;
	}


	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	TEnumAsByte<ESplineMeshAxis> GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};


// Class Engine.ModelComponent
// 0x0040 (0x0690 - 0x0650)
class UModelComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0650(0x0018) MISSED OFFSET
	class UBodySetup*                                  ModelBodySetup;                                           // 0x0668(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0670(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ModelComponent")); }
		return ptr;
	}

};


// Class Engine.NavLinkRenderingComponent
// 0x0000 (0x0650 - 0x0650)
class UNavLinkRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkRenderingComponent")); }
		return ptr;
	}

};


// Class Engine.NavMeshRenderingComponent
// 0x0010 (0x0660 - 0x0650)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0650(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavMeshRenderingComponent")); }
		return ptr;
	}

};


// Class Engine.NavTestRenderingComponent
// 0x0000 (0x0650 - 0x0650)
class UNavTestRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavTestRenderingComponent")); }
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x00F8 (0x0120 - 0x0028)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UpdateTime_FPS;                                           // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x0040(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                             // 0x0060(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              LODDistanceCheckTime;                                     // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	TArray<float>                                      LODDistances;                                             // 0x0070(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	unsigned char                                      bRegenerateLODDuplicate : 1;                              // 0x0080(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                         // 0x0098(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x009C(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldResetPeakCounts : 1;                               // 0x00BC(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bHasPhysics : 1;                                          // 0x00BC(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                // 0x00BC(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                              // 0x00BC(0x0001) ( BITFIELD: 0808)
	float                                              Delay;                                                    // 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseDelayRange : 1;                                       // 0x00C8(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector                                     MacroUVPosition;                                          // 0x00CC(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x00DC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x00E0(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x0100(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FNamedEmitterMaterial>               NamedMaterialSlots;                                       // 0x0110(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystem")); }
		return ptr;
	}


	int GetNumLODs();
	bool ContainsEmitterType(class UClass* TypeData);
};


// Class Engine.ParticleSystemAggregateTickSettings
// 0x0010 (0x0038 - 0x0028)
class UParticleSystemAggregateTickSettings : public UObject
{
public:
	int                                                FramesTickScaledOver;                                     // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxTicksPerFrame;                                         // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PriorityInflationPower;                                   // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemAggregateTickSettings")); }
		return ptr;
	}

};


// Class Engine.DrawSphereComponent
// 0x0000 (0x0680 - 0x0680)
class UDrawSphereComponent : public USphereComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DrawSphereComponent")); }
		return ptr;
	}

};


// Class Engine.TextRenderComponent
// 0x0060 (0x06B0 - 0x0650)
class UTextRenderComponent : public UPrimitiveComponent
{
public:
	struct FText                                       Text;                                                     // 0x0650(0x0028) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly)
	class UMaterialInterface*                          TextMaterial;                                             // 0x0678(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UFont*                                       Font;                                                     // 0x0680(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment;                                      // 0x0688(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment;                                        // 0x0689(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      TextRenderColor;                                          // 0x068C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              XScale;                                                   // 0x0690(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              YScale;                                                   // 0x0694(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WorldSize;                                                // 0x0698(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x069C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x06A0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                                  // 0x06A4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      UnknownData00[0xB];                                       // 0x06A5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextRenderComponent")); }
		return ptr;
	}


	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UMaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<EHorizTextAligment> Value);
	void SetFont(class UFont* Value);
	void K2_SetText(const struct FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};


// Class Engine.VectorFieldComponent
// 0x0030 (0x0680 - 0x0650)
class UVectorFieldComponent : public UPrimitiveComponent
{
public:
	class UVectorField*                                VectorField;                                              // 0x0650(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Intensity;                                                // 0x0658(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Tightness;                                                // 0x065C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                                  // 0x0660(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0661(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldComponent")); }
		return ptr;
	}


	void SetIntensity(float NewIntensity);
};


// Class Engine.RadialForceComponent
// 0x0030 (0x0310 - 0x02E0)
class URadialForceComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ERadialImpulseFalloff>                 Falloff;                                                  // 0x02E4(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ImpulseStrength;                                          // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                                    // 0x02EC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      bIgnoreOwningActor : 1;                                   // 0x02EC(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0202)
	float                                              ForceStrength;                                            // 0x02F0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect;                                      // 0x02F8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RadialForceComponent")); }
		return ptr;
	}


	void RemoveObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<EObjectTypeQuery> ObjectType);
};


// Class Engine.ReflectionCaptureComponent
// 0x0090 (0x0370 - 0x02E0)
class UReflectionCaptureComponent : public USceneComponent
{
public:
	unsigned char                                      bLockSettings;                                            // 0x02E0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Brightness;                                               // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShadowBrightness;                                         // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LPVOcclusionBrightness;                                   // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ReflectionTint;                                           // 0x02F0(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0300(0x000C) MISSED OFFSET
	struct FGuid                                       StateId;                                                  // 0x030C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x031C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ReflectionCaptureComponent")); }
		return ptr;
	}


	void UpdateReflectionCapture();
	void UpdateAllReflectionCaptures();
	void SetTint(const struct FLinearColor& Value);
	void SetShadowBrightness(float Value);
	void SetLPVOcclusionBrightness(float Value);
	void SetBrightness(float Value);
};


// Class Engine.BoxReflectionCaptureComponent
// 0x0020 (0x0390 - 0x0370)
class UBoxReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              BoxTransitionDistance;                                    // 0x0370(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	class UBoxComponent*                               PreviewInfluenceBox;                                      // 0x0378(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0380(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BoxReflectionCaptureComponent")); }
		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0020 (0x0390 - 0x0370)
class UPlaneReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadiusScale;                                     // 0x0370(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0378(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UBoxComponent*                               PreviewCaptureBox;                                        // 0x0380(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlaneReflectionCaptureComponent")); }
		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0380 - 0x0370)
class USphereReflectionCaptureComponent : public UReflectionCaptureComponent
{
public:
	float                                              InfluenceRadius;                                          // 0x0370(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CaptureDistanceScale;                                     // 0x0374(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDrawSphereComponent*                        PreviewInfluenceRadius;                                   // 0x0378(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SphereReflectionCaptureComponent")); }
		return ptr;
	}

};


// Class Engine.SceneCaptureComponent
// 0x0070 (0x0350 - 0x02E0)
class USceneCaptureComponent : public USceneComponent
{
public:
	TArray<TWeakObjectPtr<class UPrimitiveComponent>>  HiddenComponents;                                         // 0x02E0(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      bCaptureEveryFrame;                                       // 0x02F0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxViewDistanceOverride;                                  // 0x02F4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FEngineShowFlagsSetting>             ShowFlagSettings;                                         // 0x02F8(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x48];                                      // 0x0308(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent")); }
		return ptr;
	}


	void HideComponent(class UPrimitiveComponent* InComponent);
	void HideActorComponents(class AActor* InActor);
};


// Class Engine.SceneCaptureComponent2D
// 0x0560 (0x08B0 - 0x0350)
class USceneCaptureComponent2D : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0350(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESceneCaptureSource>                   CaptureSource;                                            // 0x0358(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0359(0x0007) MISSED OFFSET
	struct FPostProcessSettings                        PostProcessSettings;                                      // 0x0360(0x0530) (CPF_Edit, CPF_BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x0890(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x0894(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x0898(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x089C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECameraProjectionMode>                 ProjectionMode;                                           // 0x08A0(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AspectRatio;                                              // 0x08A4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x08A8(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x08A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponent2D")); }
		return ptr;
	}


	void UpdateContent();
	void AddOrUpdateBlendable(const TScriptInterface<class UBlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.SceneCaptureComponentCube
// 0x0000 (0x0350 - 0x0350)
class USceneCaptureComponentCube : public USceneCaptureComponent
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SceneCaptureComponentCube")); }
		return ptr;
	}


	void UpdateContent();
};


// Class Engine.WaterEmissionVolumeComponent
// 0x0030 (0x0310 - 0x02E0)
class UWaterEmissionVolumeComponent : public USceneComponent
{
public:
	float                                              Radius;                                                   // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GenerationDensity;                                        // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ExportObject, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x02E8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WaterEmissionVolumeComponent")); }
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x0300 - 0x02E0)
class UWindDirectionalSourceComponent : public USceneComponent
{
public:
	float                                              Strength;                                                 // 0x02E0(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                                    // 0x02E4(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinGustAmount;                                            // 0x02E8(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x02EC(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x02F0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WindDirectionalSourceComponent")); }
		return ptr;
	}

};


// Class Engine.TimelineComponent
// 0x0098 (0x0168 - 0x00D0)
class UTimelineComponent : public UActorComponent
{
public:
	struct FTimeline                                   TheTimeline;                                              // 0x00D0(0x0098) (CPF_Net)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TimelineComponent")); }
		return ptr;
	}


	void Stop();
	void SetTimelineLengthMode(TEnumAsByte<ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
};


// Class Engine.AnimSequenceBase
// 0x0028 (0x0078 - 0x0050)
class UAnimSequenceBase : public UAnimationAsset
{
public:
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0050(0x0010) (CPF_ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	float                                              RateScale;                                                // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawCurveTracks                             RawCurveData;                                             // 0x0068(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimSequenceBase")); }
		return ptr;
	}


	float GetPlayLength();
};


// Class Engine.AnimCompositeBase
// 0x0000 (0x0078 - 0x0078)
class UAnimCompositeBase : public UAnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompositeBase")); }
		return ptr;
	}

};


// Class Engine.AnimComposite
// 0x0010 (0x0088 - 0x0078)
class UAnimComposite : public UAnimCompositeBase
{
public:
	struct FAnimTrack                                  AnimationTrack;                                           // 0x0078(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimComposite")); }
		return ptr;
	}

};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UAnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimStateMachineTypes")); }
		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0070 (0x00E8 - 0x0078)
class UAnimMontage : public UAnimCompositeBase
{
public:
	float                                              BlendInTime;                                              // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendOutTime;                                             // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<struct FCompositeSection>                   CompositeSections;                                        // 0x0088(0x0010) (CPF_ZeroConstructor)
	TArray<struct FSlotAnimationTrack>                 SlotAnimTracks;                                           // 0x0098(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBranchingPoint>                     BranchingPoints;                                          // 0x00A8(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	unsigned char                                      bEnableRootMotionTranslation;                             // 0x00B8(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableRootMotionRotation;                                // 0x00B9(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x00BA(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00BB(0x0005) MISSED OFFSET
	TArray<struct FBranchingPointMarker>               BranchingPointMarkers;                                    // 0x00C0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bAnimBranchingPointNeedsSort;                             // 0x00D0(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x00D8(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimMontage")); }
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00E0 (0x0158 - 0x0078)
class UAnimSequence : public UAnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x0078(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FTrackToSkeletonMap>                 TrackToSkeletonMapTable;                                  // 0x0080(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0090(0x0010) MISSED OFFSET
	TArray<struct FTranslationTrack>                   TranslationData;                                          // 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FRotationTrack>                      RotationData;                                             // 0x00B0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FScaleTrack>                         ScaleData;                                                // 0x00C0(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x00D0(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x00D1(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x00D2(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x00D3(0x0005) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                                   // 0x00D8(0x0010) (CPF_ZeroConstructor)
	struct FCompressedOffsetData                       CompressedScaleOffsets;                                   // 0x00E8(0x0018)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	TEnumAsByte<EAnimationKeyFormat>                   KeyEncodingFormat;                                        // 0x0110(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x1F];                                      // 0x0111(0x001F) MISSED OFFSET
	TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType;                                         // 0x0130(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType;                                              // 0x0131(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x6];                                       // 0x0132(0x0006) MISSED OFFSET
	class UAnimSequence*                               RefPoseSeq;                                               // 0x0138(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RefFrameIndex;                                            // 0x0140(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                EncodingPkgVersion;                                       // 0x0144(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0148(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableRootMotion;                                        // 0x0150(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock;                                       // 0x0151(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRootMotionSettingsCopiedFromMontage;                     // 0x0152(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData06[0x5];                                       // 0x0153(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimSequence")); }
		return ptr;
	}

};


// Class Engine.BlendSpaceBase
// 0x00B8 (0x0108 - 0x0050)
class UBlendSpaceBase : public UAnimationAsset
{
public:
	struct FBlendParameter                             BlendParameters[0x3];                                     // 0x0050(0x0020)
	struct FInterpolationParameter                     InterpolationParam[0x3];                                  // 0x00B0(0x0008) (CPF_Edit)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode;                                        // 0x00CC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRotationBlendInMeshSpace;                                // 0x00CD(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumOfDimension;                                           // 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimLength;                                               // 0x00D4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FPerBoneInterpolation>               PerBoneBlend;                                             // 0x00D8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FBlendSample>                        SampleData;                                               // 0x00E8(0x0010) (CPF_ZeroConstructor)
	TArray<struct FEditorElement>                      GridSamples;                                              // 0x00F8(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlendSpaceBase")); }
		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0008 (0x0110 - 0x0108)
class UBlendSpace : public UBlendSpaceBase
{
public:
	TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation;                                     // 0x0108(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace")); }
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x0110 - 0x0110)
class UAimOffsetBlendSpace : public UBlendSpace
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace")); }
		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x0110 - 0x0108)
class UBlendSpace1D : public UBlendSpaceBase
{
public:
	unsigned char                                      bScaleAnimation;                                          // 0x0108(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BlendSpace1D")); }
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x0110 - 0x0110)
class UAimOffsetBlendSpace1D : public UBlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AimOffsetBlendSpace1D")); }
		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0018 (0x0040 - 0x0028)
class UAnimCompress : public UObject
{
public:
	struct FString                                     Description;                                              // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst)
	unsigned char                                      bNeedsSkeleton : 1;                                       // 0x0038(0x0001) ( BITFIELD: 0101)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x003C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x003D(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat;                                   // 0x003E(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_Automatic
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_Automatic : public UAnimCompress
{
public:
	float                                              MaxEndEffectorError;                                      // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression : 1;                          // 0x0044(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bTryPerTrackBitwiseCompression : 1;                       // 0x0044(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bTryLinearKeyRemovalCompression : 1;                      // 0x0044(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bTryIntervalKeyRemoval : 1;                               // 0x0044(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                         // 0x0044(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                  // 0x0044(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                             // 0x0044(0x0001) (CPF_Edit BITFIELD: 4040)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_Automatic")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_BitwiseCompressOnly : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_BitwiseCompressOnly")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0040 - 0x0040)
class UAnimCompress_LeastDestructive : public UAnimCompress
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_LeastDestructive")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0048 - 0x0040)
class UAnimCompress_RemoveEverySecondKey : public UAnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                                    // 0x0044(0x0001) (CPF_Edit BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveEverySecondKey")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0060 - 0x0040)
class UAnimCompress_RemoveLinearKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                            // 0x005C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                            // 0x005C(0x0001) (CPF_Edit BITFIELD: 0202)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveLinearKeys")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (0x00E0 - 0x0060)
class UAnimCompress_PerTrackCompression : public UAnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats;                                      // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                   // 0x00A0(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              ResampledFramerate;                                       // 0x00A4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                                    // 0x00AC(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                          // 0x00AC(0x0001) (CPF_Edit BITFIELD: 0202)
	int                                                TrackHeightBias;                                          // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                                   // 0x00BC(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              RotationErrorSourceRatio;                                 // 0x00C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00CC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00D4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_PerTrackCompression")); }
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0050 - 0x0040)
class UAnimCompress_RemoveTrivialKeys : public UAnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimCompress_RemoveTrivialKeys")); }
		return ptr;
	}

};


// Class Engine.AnimSingleNodeInstance
// 0x00E0 (0x0520 - 0x0440)
class UAnimSingleNodeInstance : public UAnimInstance
{
public:
	class UVertexAnimation*                            CurrentVertexAnim;                                        // 0x0440(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     BlendSpaceInput;                                          // 0x0448(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0454(0x0004) MISSED OFFSET
	TArray<struct FBlendSampleData>                    BlendSampleData;                                          // 0x0458(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	struct FBlendFilter                                BlendFilter;                                              // 0x0468(0x0090) (CPF_Transient)
	float                                              CurrentTime;                                              // 0x04F8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              PlayRate;                                                 // 0x04FC(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                    // 0x0500(0x0014) (CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference)
	unsigned char                                      bLooping : 1;                                             // 0x0510(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bPlaying : 1;                                             // 0x0510(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bReverse : 1;                                             // 0x0510(0x0001) (CPF_Transient BITFIELD: 0404)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0511(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimSingleNodeInstance")); }
		return ptr;
	}


	void StopAnim();
	void SetVertexAnimation(class UVertexAnimation* NewVertexAnim, bool bIsLooping, float InPlayRate);
	void SetReverse(bool bInReverse);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UAnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
};


// Class Engine.VehicleAnimInstance
// 0x0000 (0x0440 - 0x0440)
class UVehicleAnimInstance : public UAnimInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VehicleAnimInstance")); }
		return ptr;
	}


	class AWheeledVehicle* GetVehicle();
};


// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimMetaData")); }
		return ptr;
	}

};


// Class Engine.AnimNotifyState
// 0x0000 (0x0028 - 0x0028)
class UAnimNotifyState : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState")); }
		return ptr;
	}


	bool Received_NotifyTick(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
	bool Received_NotifyBegin(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (0x0058 - 0x0028)
class UAnimNotifyState_TimedParticleEffect : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0028(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0038(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x0044(0x000C) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOwnerOnlySee;                                            // 0x0050(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOwnerNoSee;                                              // 0x0051(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDestroyAtEnd;                                            // 0x0052(0x0001) (CPF_Edit, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0053(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_TimedParticleEffect")); }
		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0028 (0x0050 - 0x0028)
class UAnimNotifyState_Trail : public UAnimNotifyState
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0028(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       FirstSocketName;                                          // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SecondSocketName;                                         // 0x0038(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETrailWidthMode>                       WidthScaleMode;                                           // 0x0040(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       WidthScaleCurve;                                          // 0x0044(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimNotifyState_Trail")); }
		return ptr;
	}


	class UParticleSystem* OverridePSTemplate(class USkeletalMeshComponent* MeshComp, class UAnimSequenceBase* Animation);
};


// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UAnimSet : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bAnimRotationOnly : 1;                                    // 0x0028(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0030(0x0010) (CPF_ZeroConstructor)
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0040(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0060(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0090(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x0098(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimSet")); }
		return ptr;
	}

};


// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UAssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AssetImportData")); }
		return ptr;
	}

};


// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UAssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AssetUserData")); }
		return ptr;
	}

};


// Class Engine.AutomationTestSettings
// 0x02E0 (0x0308 - 0x0028)
class UAutomationTestSettings : public UObject
{
public:
	struct FFilePath                                   AutomationTestmap;                                        // 0x0028(0x0010) (CPF_Edit, CPF_Config)
	TArray<struct FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FBuildPromotionTestSettings                 BuildPromotionTest;                                       // 0x0048(0x0210) (CPF_Edit, CPF_Config)
	struct FMaterialEditorPromotionSettings            MaterialEditorPromotionTest;                              // 0x0258(0x0030) (CPF_Edit, CPF_Config)
	struct FParticleEditorPromotionSettings            ParticleEditorPromotionTest;                              // 0x0288(0x0010) (CPF_Edit, CPF_Config)
	TArray<struct FString>                             EngineTestModules;                                        // 0x0298(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             EditorTestModules;                                        // 0x02A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             TestLevelFolders;                                         // 0x02B8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FOpenTestAsset>                      TestAssetsToOpen;                                         // 0x02C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FExternalToolDefinition>             ExternalTools;                                            // 0x02D8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FEditorImportExportTestDefinition>   ImportExportTestDefinitions;                              // 0x02E8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FLaunchOnTestSettings>               LaunchOnSettings;                                         // 0x02F8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AutomationTestSettings")); }
		return ptr;
	}

};


// Class Engine.AutomationTestUserSettings
// 0x0030 (0x0058 - 0x0028)
class UAutomationTestUserSettings : public UObject
{
public:
	unsigned char                                      FilterTests;                                              // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FString>                             IncludedTestsPrefix;                                      // 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FString>                             ExcludedTestsPrefix;                                      // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      IncludeEpicTests;                                         // 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AutomationTestUserSettings")); }
		return ptr;
	}

};


// Class Engine.AvoidanceManager
// 0x00A0 (0x00C8 - 0x0028)
class UAvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0048(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AvoidanceManager")); }
		return ptr;
	}


	bool RegisterMovementComponent(class UMovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityIgnoringUID(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime, int IgnoreThisUID);
	struct FVector GetAvoidanceVelocityForComponent(class UMovementComponent* MovementComp);
	struct FVector GetAvoidanceVelocity(const struct FNavAvoidanceData& AvoidanceData, float DeltaTime);
};


// Class Engine.AnimBlueprint
// 0x0018 (0x0150 - 0x0138)
class UAnimBlueprint : public UBlueprint
{
public:
	class USkeleton*                                   TargetSkeleton;                                           // 0x0138(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimGroupInfo>                      Groups;                                                   // 0x0140(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprint")); }
		return ptr;
	}

};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x0138 - 0x0138)
class ULevelScriptBlueprint : public UBlueprint
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelScriptBlueprint")); }
		return ptr;
	}

};


// Class Engine.DataTable
// 0x0058 (0x0080 - 0x0028)
class UDataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DataTable")); }
		return ptr;
	}

};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDataTableFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DataTableFunctionLibrary")); }
		return ptr;
	}


	void GetDataTableRowNames(class UDataTable* Table, TArray<struct FName>* OutRowNames);
	bool GetDataTableRowFromName(class UDataTable* Table, const struct FName& RowName, struct FTableRowBase* OutRow);
	void EvaluateCurveTableRow(class UCurveTable* CurveTable, const struct FName& RowName, float InXY, TEnumAsByte<EEvaluateCurveTableResult>* OutResult, float* OutXY);
};


// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UDebugDrawService : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DebugDrawService")); }
		return ptr;
	}

};


// Class Engine.DeformablesBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UDeformablesBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DeformablesBlueprintFunctionLibrary")); }
		return ptr;
	}


	void ApplyWorldForceToDeformables(class USkinnedMeshComponent* SkinnedMeshComp, const struct FVector& WorldSpaceForce);
};


// Class Engine.FeatureConfigBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UFeatureConfigBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FeatureConfigBlueprintFunctionLibrary")); }
		return ptr;
	}


	bool IsFeatureEnabled(const struct FName& FeatureName);
};


// Class Engine.DialogueTypes
// 0x0000 (0x0028 - 0x0028)
class UDialogueTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DialogueTypes")); }
		return ptr;
	}

};


// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UGameplayStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GameplayStatics")); }
		return ptr;
	}


	void UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FLatentActionInfo& LatentInfo);
	class UAudioComponent* SpawnSoundAttached(class USoundBase* Sound, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnSoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnSound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UObject* SpawnObject(class UClass* ObjectClass, class UObject* Outer);
	class UParticleSystemComponent* SpawnEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	class UParticleSystemComponent* SpawnEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	class UAudioComponent* SpawnDialogueAttached(class UDialogueWave* Dialogue, const struct FDialogueContext& Context, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	class UAudioComponent* SpawnDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	class UDecalComponent* SpawnDecalAttached(class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, float LifeSpan);
	class UDecalComponent* SpawnDecalAtLocation(class UObject* WorldContextObject, class UMaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void SetGlobalTimeDilation(class UObject* WorldContextObject, float TimeDilation);
	bool SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void SetBaseSoundMix(class UObject* WorldContextObject, class USoundMix* InSoundMix);
	bool SaveGameToSlot(class USaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void RemovePlayer(class APlayerController* Player, bool bDestroyPawn);
	void PushSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	bool ProjectWorldToScreen(class APlayerController* Player, const struct FVector& WorldPosition, struct FVector2D* ScreenPosition);
	void PopSoundMixModifier(class UObject* WorldContextObject, class USoundMix* InSoundMixModifier);
	void PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void PlaySound2D(class UObject* WorldContextObject, class USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	void PlayDialogueAtLocation(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	void PlayDialogue2D(class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FDialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	struct FString ParseOption(const struct FString& Options, const struct FString& Key);
	void OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	void LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FLatentActionInfo& LatentInfo);
	class USaveGame* LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	bool IsGamePaused(class UObject* WorldContextObject);
	bool HasOption(const struct FString& Options, const struct FString& InKey);
	int GrassOverlappingSphereCount(class UObject* WorldContextObject, class UStaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector GetWorldOriginLocation(class UObject* WorldContextObject);
	float GetWorldDeltaSeconds(class UObject* WorldContextObject);
	TEnumAsByte<EPhysicalSurface> GetSurfaceType(const struct FHitResult& Hit);
	class ULevelStreaming* GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float GetRealTimeSeconds(class UObject* WorldContextObject);
	class APawn* GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerController* GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class ACharacter* GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class APlayerCameraManager* GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString GetPlatformName();
	class UClass* GetObjectClass(class UObject* Object);
	void GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	int GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);
	float GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AGameState* GetGameState(class UObject* WorldContextObject);
	class AGameMode* GetGameMode(class UObject* WorldContextObject);
	class UGameInstance* GetGameInstance(class UObject* WorldContextObject);
	struct FString GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	float GetAudioTimeSeconds(class UObject* WorldContextObject);
	void GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AActor*>* OutActors);
	void GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AActor*>* OutActors);
	void GetActorArrayBounds(TArray<class AActor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector GetActorArrayAverageLocation(TArray<class AActor*> Actors);
	void GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	void FlushLevelStreaming(class UObject* WorldContextObject);
	class AActor* FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform);
	void EnableLiveStreaming(bool Enable);
	bool DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool DeprojectScreenToWorld(class APlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);
	class USaveGame* CreateSaveGameObjectFromBlueprint(class UBlueprint* SaveGameBlueprint);
	class USaveGame* CreateSaveGameObject(class UClass* SaveGameClass);
	class APlayerController* CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPawn);
	void ClearSoundMixModifiers(class UObject* WorldContextObject);
	void BreakHitResult(const struct FHitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity);
	class AActor* BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AActor* Owner);
	class AActor* BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UBlueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AActor* BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, TEnumAsByte<ESpawnActorCollisionHandlingMethod> CollisionHandlingOverride, class AActor* Owner);
	bool AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);
	bool ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bDoFullDamage, TEnumAsByte<ECollisionChannel> DamagePreventionChannel);
	void ApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	void ActivateReverbEffect(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
};


// Class Engine.HeadMountedDisplayFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UHeadMountedDisplayFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HeadMountedDisplayFunctionLibrary")); }
		return ptr;
	}


	void SetWorldToMetersScale(class UObject* WorldContext, float NewScale);
	void SetClippingPlanes(float Near, float Far);
	void ResetOrientationAndPosition(float Yaw, TEnumAsByte<EOrientPositionSelector> Options);
	bool IsInLowPersistenceMode();
	bool IsHeadMountedDisplayEnabled();
	bool HasValidTrackingPosition();
	float GetWorldToMetersScale(class UObject* WorldContext);
	float GetScreenPercentage();
	void GetPositionalTrackingCameraParameters(struct FVector* CameraOrigin, struct FRotator* CameraRotation, float* HFOV, float* VFOV, float* CameraDistance, float* NearPlane, float* FarPlane);
	void GetOrientationAndPosition(struct FRotator* DeviceRotation, struct FVector* DevicePosition);
	void EnableLowPersistenceMode(bool bEnable);
	bool EnableHMD(bool bEnable);
};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetArrayLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetArrayLibrary")); }
		return ptr;
	}


	void SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void FilterArray(TArray<class AActor*> TargetArray, class UClass* FilterClass, TArray<class AActor*>* FilteredArray);
	void Array_Shuffle(TArray<int> TargetArray);
	void Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	void Array_Resize(TArray<int> TargetArray, int Size);
	bool Array_RemoveItem(TArray<int> TargetArray, int Item);
	void Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	int Array_Length(TArray<int> TargetArray);
	int Array_LastIndex(TArray<int> TargetArray);
	void Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	void Array_Get(TArray<int> TargetArray, int Index, int* Item);
	int Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void Array_Clear(TArray<int> TargetArray);
	void Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int Array_Add(TArray<int> TargetArray, int NewItem);
};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetGuidLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetGuidLibrary")); }
		return ptr;
	}


	void Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* Success);
	bool NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FGuid NewGuid();
	bool IsValid_Guid(const struct FGuid& InGuid);
	void Invalidate_Guid(struct FGuid* InGuid);
	bool EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FString Conv_GuidToString(const struct FGuid& InGuid);
};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetInputLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetInputLibrary")); }
		return ptr;
	}


	bool PointerEvent_IsTouchEvent(const struct FPointerEvent& Input);
	bool PointerEvent_IsMouseButtonDown(const struct FPointerEvent& Input, const struct FKey& MouseButton);
	float PointerEvent_GetWheelDelta(const struct FPointerEvent& Input);
	int PointerEvent_GetUserIndex(const struct FPointerEvent& Input);
	int PointerEvent_GetTouchpadIndex(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetScreenSpacePosition(const struct FPointerEvent& Input);
	int PointerEvent_GetPointerIndex(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetLastScreenSpacePosition(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetGestureDelta(const struct FPointerEvent& Input);
	struct FKey PointerEvent_GetEffectingButton(const struct FPointerEvent& Input);
	struct FVector2D PointerEvent_GetCursorDelta(const struct FPointerEvent& Input);
	bool Key_IsVectorAxis(const struct FKey& Key);
	bool Key_IsMouseButton(const struct FKey& Key);
	bool Key_IsModifierKey(const struct FKey& Key);
	bool Key_IsKeyboardKey(const struct FKey& Key);
	bool Key_IsGamepadKey(const struct FKey& Key);
	bool Key_IsFloatAxis(const struct FKey& Key);
	struct FText Key_GetDisplayName(const struct FKey& Key);
	bool InputEvent_IsShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsRightAltDown(const struct FInputEvent& Input);
	bool InputEvent_IsRepeat(const struct FInputEvent& Input);
	bool InputEvent_IsLeftShiftDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsLeftAltDown(const struct FInputEvent& Input);
	bool InputEvent_IsControlDown(const struct FInputEvent& Input);
	bool InputEvent_IsCommandDown(const struct FInputEvent& Input);
	bool InputEvent_IsAltDown(const struct FInputEvent& Input);
	int GetUserIndex(const struct FKeyEvent& Input);
	struct FKey GetKey(const struct FKeyEvent& Input);
	float GetAnalogValue(const struct FAnalogInputEvent& Input);
	bool EqualEqual_KeyKey(const struct FKey& A, const struct FKey& B);
	int ControllerEvent_GetUserIndex(const struct FControllerEvent& Input);
	struct FKey ControllerEvent_GetEffectingButton(const struct FControllerEvent& Input);
	float ControllerEvent_GetAnalogValue(const struct FControllerEvent& Input);
	void CalibrateTilt();
};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMaterialLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetMaterialLibrary")); }
		return ptr;
	}


	void SetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void SetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	struct FLinearColor GetVectorParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	float GetScalarParameterValue(class UObject* WorldContextObject, class UMaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UMaterialInstanceDynamic* CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UMaterialInterface* Parent);
};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetMathLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetMathLibrary")); }
		return ptr;
	}


	int Xor_IntInt(int A, int B);
	float VSizeSquared(const struct FVector& A);
	float VSize2DSquared(const struct FVector2D& A);
	float VSize2D(const struct FVector2D& A);
	float VSize(const struct FVector& A);
	struct FVector VLerp(const struct FVector& A, const struct FVector& B, float Alpha);
	struct FVector VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector VEase(const struct FVector& A, const struct FVector& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime UtcNow();
	struct FVector TransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	struct FDateTime Today();
	struct FTransform TLerp(const struct FTransform& A, const struct FTransform& B, float Alpha);
	struct FTransform TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan TimespanZeroValue();
	float TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan TimespanMinValue();
	struct FTimespan TimespanMaxValue();
	bool TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);
	struct FTransform TEase(const struct FTransform& A, const struct FTransform& B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float Tan(float A);
	struct FVector Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Subtract_VectorInt(const struct FVector& A, int B);
	struct FVector Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int Subtract_IntInt(int A, int B);
	float Subtract_FloatFloat(float A, float B);
	struct FDateTime Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char Subtract_ByteByte(unsigned char A, unsigned char B);
	float Square(float A);
	float Sqrt(float A);
	float Sin(float A);
	int SignOfInteger(int A);
	float SignOfFloat(float A);
	void SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream);
	struct FVector SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int SelectInt(int A, int B, bool bPickA);
	float SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void SeedRandomStream(struct FRandomStream* Stream);
	int Round(float A);
	struct FRotator RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator RLerp(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath);
	struct FRotator RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	void ResetRandomStream(const struct FRandomStream& Stream);
	struct FRotator REase(const struct FRotator& A, const struct FRotator& B, float Alpha, bool bShortestPath, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector RandomUnitVectorInConeWithYawAndPitch(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector RandomUnitVectorInCone(const struct FVector& ConeDir, float ConeHalfAngle);
	struct FVector RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector RandomUnitVector();
	struct FRotator RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator RandomRotator(bool bRoll);
	struct FVector RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int RandomIntegerInRange(int Min, int Max);
	int RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int RandomInteger(int Max);
	float RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float RandomFloatInRange(float Min, float Max);
	float RandomFloatFromStream(const struct FRandomStream& Stream);
	float RandomFloat();
	bool RandomBoolFromStream(const struct FRandomStream& Stream);
	bool RandomBool();
	float RadiansToDegrees(float A);
	struct FVector ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	int Percent_IntInt(int A, int B);
	float Percent_FloatFloat(float A, float B);
	unsigned char Percent_ByteByte(unsigned char A, unsigned char B);
	int Or_IntInt(int A, int B);
	struct FDateTime Now();
	bool NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool NotEqual_IntInt(int A, int B);
	bool NotEqual_FloatFloat(float A, float B);
	bool NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool NotEqual_BoolBool(bool A, bool B);
	bool Not_PreBool(bool A);
	float NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float NormalizeAxis(float Angle);
	struct FVector2D Normal2D(const struct FVector2D& A);
	struct FVector Normal(const struct FVector& A);
	struct FVector NegateVector(const struct FVector& A);
	struct FRotator NegateRotator(const struct FRotator& A);
	bool NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float MultiplyMultiply_FloatFloat(float Base, float Exp);
	float MultiplyByPi(float Value);
	struct FVector Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Multiply_VectorInt(const struct FVector& A, int B);
	struct FVector Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FLinearColor Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int Multiply_IntInt(int A, int B);
	float Multiply_IntFloat(int A, float B);
	float Multiply_FloatFloat(float A, float B);
	unsigned char Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	void MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY);
	int Min(int A, int B);
	void MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int Max(int A, int B);
	float MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector2D MakeVector2D(float X, float Y);
	struct FVector MakeVector(float X, float Y, float Z);
	struct FTransform MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	struct FRotator MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator MakeRotFromZ(const struct FVector& Z);
	struct FRotator MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator MakeRotFromY(const struct FVector& Y);
	struct FRotator MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator MakeRotFromX(const struct FVector& X);
	struct FRotator MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FRandomStream MakeRandomStream(int InitialSeed);
	float MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FDateTime MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor MakeColor(float R, float G, float B, float A);
	float Loge(float A);
	bool LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FLinearColor LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float Alpha);
	struct FVector LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool LessEqual_IntInt(int A, int B);
	bool LessEqual_FloatFloat(float A, float B);
	bool LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Less_IntInt(int A, int B);
	bool Less_FloatFloat(float A, float B);
	bool Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Less_ByteByte(unsigned char A, unsigned char B);
	float Lerp(float A, float B, float Alpha);
	bool IsMorning(const struct FDateTime& A);
	bool IsLeapYear(int Year);
	bool IsAfternoon(const struct FDateTime& A);
	struct FTransform InvertTransform(const struct FTransform& T);
	struct FVector InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	float InverseLerp(float A, float B, float Value);
	bool InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float Hypotenuse(float Width, float Height);
	void HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor HSVToRGB(float H, float S, float V, float A);
	float GridSnap_Float(float Location, float GridSize);
	struct FVector GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool GreaterEqual_IntInt(int A, int B);
	bool GreaterEqual_FloatFloat(float A, float B);
	bool GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool Greater_IntInt(int A, int B);
	bool Greater_FloatFloat(float A, float B);
	bool Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool Greater_ByteByte(unsigned char A, unsigned char B);
	int GetYear(const struct FDateTime& A);
	void GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	struct FVector GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector GetUpVector(const struct FRotator& InRot);
	float GetTotalSeconds(const struct FTimespan& A);
	float GetTotalMinutes(const struct FTimespan& A);
	float GetTotalMilliseconds(const struct FTimespan& A);
	float GetTotalHours(const struct FTimespan& A);
	float GetTotalDays(const struct FTimespan& A);
	struct FTimespan GetTimeOfDay(const struct FDateTime& A);
	int GetSeconds(const struct FTimespan& A);
	int GetSecond(const struct FDateTime& A);
	struct FVector GetRightVector(const struct FRotator& InRot);
	float GetPI();
	int GetMonth(const struct FDateTime& A);
	int GetMinutes(const struct FTimespan& A);
	int GetMinute(const struct FDateTime& A);
	float GetMinElement(const struct FVector& A);
	int GetMilliseconds(const struct FTimespan& A);
	int GetMillisecond(const struct FDateTime& A);
	float GetMaxElement(const struct FVector& A);
	int GetHours(const struct FTimespan& A);
	int GetHour12(const struct FDateTime& A);
	int GetHour(const struct FDateTime& A);
	struct FVector GetForwardVector(const struct FRotator& InRot);
	struct FTimespan GetDuration(const struct FTimespan& A);
	struct FVector GetDirectionVector(const struct FVector& From, const struct FVector& To);
	int GetDays(const struct FTimespan& A);
	int GetDayOfYear(const struct FDateTime& A);
	int GetDay(const struct FDateTime& A);
	struct FDateTime GetDate(const struct FDateTime& A);
	void GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	int FTrunc(float A);
	struct FTimespan FromSeconds(float Seconds);
	struct FTimespan FromMinutes(float Minutes);
	struct FTimespan FromMilliseconds(float Milliseconds);
	struct FTimespan FromHours(float Hours);
	struct FTimespan FromDays(float Days);
	float Fraction(float A);
	int FMod(float Dividend, float Divisor, float* Remainder);
	float FMin(float A, float B);
	float FMax(float A, float B);
	float FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float FInterpEaseInOut(float A, float B, float Alpha, float Exponent);
	struct FRotator FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	int FFloor(float A);
	float FClamp(float Value, float Min, float Max);
	int FCeil(float A);
	float Exp(float A);
	bool EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool EqualEqual_IntInt(int A, int B);
	bool EqualEqual_FloatFloat(float A, float B);
	bool EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool EqualEqual_BoolBool(bool A, bool B);
	float Ease(float A, float B, float Alpha, TEnumAsByte<EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Divide_VectorInt(const struct FVector& A, int B);
	struct FVector Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Divide_Vector2DFloat(const struct FVector2D& A, float B);
	int Divide_IntInt(int A, int B);
	float Divide_FloatFloat(float A, float B);
	unsigned char Divide_ByteByte(unsigned char A, unsigned char B);
	float DegTan(float A);
	float DegSin(float A);
	float DegreesToRadians(float A);
	float DegCos(float A);
	float DegAtan2(float A, float B);
	float DegAtan(float A);
	float DegAsin(float A);
	float DegAcos(float A);
	int DaysInYear(int Year);
	int DaysInMonth(int Year, int Month);
	struct FDateTime DateTimeMinValue();
	struct FDateTime DateTimeMaxValue();
	bool DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);
	bool DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);
	float CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float Cos(float A);
	struct FTransform ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator Conv_VectorToRotator(const struct FVector& InVec);
	struct FLinearColor Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FVector Conv_RotatorToVector(const struct FRotator& InRot);
	struct FVector Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor Conv_LinearColorToColor(const struct FLinearColor& InLinearColor);
	float Conv_IntToFloat(int InInt);
	unsigned char Conv_IntToByte(int InInt);
	bool Conv_IntToBool(int InInt);
	struct FVector Conv_FloatToVector(float InFloat);
	struct FLinearColor Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor Conv_ColorToLinearColor(const struct FColor& InColor);
	int Conv_ByteToInt(unsigned char InByte);
	float Conv_ByteToFloat(unsigned char InByte);
	int Conv_BoolToInt(bool InBool);
	float Conv_BoolToFloat(bool InBool);
	unsigned char Conv_BoolToByte(bool InBool);
	struct FTransform ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector ClampVectorSize(const struct FVector& A, float Min, float Max);
	float ClampAxis(float Angle);
	float ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int Clamp(int Value, int Min, int Max);
	struct FLinearColor CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	void BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool BooleanXOR(bool A, bool B);
	bool BooleanOR(bool A, bool B);
	bool BooleanNOR(bool A, bool B);
	bool BooleanNAND(bool A, bool B);
	bool BooleanAND(bool A, bool B);
	float Atan2(float A, float B);
	float Atan(float A);
	float Asin(float A);
	int And_IntInt(int A, int B);
	struct FVector Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector Add_VectorInt(const struct FVector& A, int B);
	struct FVector Add_VectorFloat(const struct FVector& A, float B);
	struct FVector2D Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	int Add_IntInt(int A, int B);
	float Add_FloatFloat(float A, float B);
	struct FDateTime Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	unsigned char Add_ByteByte(unsigned char A, unsigned char B);
	float Acos(float A);
	int Abs_Int(int A);
	float Abs(float A);
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetNodeHelperLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetNodeHelperLibrary")); }
		return ptr;
	}


	void MarkBit(int Index, int* Data);
	bool HasUnmarkedBit(int Data, int NumBits);
	bool HasMarkedBit(int Data, int NumBits);
	unsigned char GetValidIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	int GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	struct FString GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void ClearBit(int Index, int* Data);
	void ClearAllBits(int* Data);
	bool BitIsMarked(int Data, int Index);
};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetStringLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetStringLibrary")); }
		return ptr;
	}


	struct FString TrimTrailing(const struct FString& SourceString);
	struct FString Trim(const struct FString& SourceString);
	struct FString ToUpper(const struct FString& SourceString);
	struct FString ToLower(const struct FString& SourceString);
	struct FString TimeSecondsToString(float InSeconds);
	bool StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<ESearchCase> SearchCase);
	bool Split(const struct FString& SourceString, const struct FString& InStr, TEnumAsByte<ESearchCase> SearchCase, TEnumAsByte<ESearchDir> SearchDir, struct FString* LeftS, struct FString* RightS);
	struct FString RightPad(const struct FString& SourceString, int ChCount);
	struct FString RightChop(const struct FString& SourceString, int Count);
	struct FString Right(const struct FString& SourceString, int Count);
	struct FString Reverse(const struct FString& SourceString);
	int ReplaceInline(const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<ESearchCase> SearchCase, struct FString* SourceString);
	struct FString Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<ESearchCase> SearchCase);
	TArray<struct FString> ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString Mid(const struct FString& SourceString, int Start, int Count);
	bool MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<ESearchCase> SearchCase);
	int Len(const struct FString& S);
	struct FString LeftPad(const struct FString& SourceString, int ChCount);
	struct FString LeftChop(const struct FString& SourceString, int Count);
	struct FString Left(const struct FString& SourceString, int Count);
	struct FString JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool IsNumeric(const struct FString& SourceString);
	struct FString GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int GetCharacterAsNumber(const struct FString& SourceString, int Index);
	TArray<struct FString> GetCharacterArrayFromString(const struct FString& SourceString);
	int FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<ESearchCase> SearchCase);
	int CullArray(const struct FString& SourceString, TArray<struct FString>* InArray);
	struct FString Conv_VectorToString(const struct FVector& InVec);
	struct FString Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString Conv_TransformToString(const struct FTransform& InTrans);
	struct FName Conv_StringToName(const struct FString& InString);
	int Conv_StringToInt(const struct FString& InString);
	float Conv_StringToFloat(const struct FString& InString);
	struct FString Conv_RotatorToString(const struct FRotator& InRot);
	struct FString Conv_ObjectToString(class UObject* InObj);
	struct FString Conv_NameToString(const struct FName& InName);
	struct FString Conv_IntToString(int InInt);
	struct FString Conv_FloatToString(float InFloat);
	struct FString Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString Conv_ByteToString(unsigned char InByte);
	struct FString Conv_BoolToString(bool InBool);
	struct FString Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);
	struct FString BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);
	struct FString BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int InInt, const struct FString& Suffix);
	struct FString BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
};


// Class Engine.DeveloperSettings
// 0x0010 (0x0038 - 0x0028)
class UDeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DeveloperSettings")); }
		return ptr;
	}

};


// Class Engine.CollisionProfile
// 0x0120 (0x0158 - 0x0038)
class UCollisionProfile : public UDeveloperSettings
{
public:
	TArray<struct FCollisionResponseTemplate>          Profiles;                                                 // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FCustomChannelSetup>                 DefaultChannelResponses;                                  // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FCustomProfile>                      EditProfiles;                                             // 0x0058(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FRedirector>                         ProfileRedirects;                                         // 0x0068(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	TArray<struct FRedirector>                         CollisionChannelRedirects;                                // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_Config, CPF_GlobalConfig)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0088(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CollisionProfile")); }
		return ptr;
	}

};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetSystemLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetSystemLibrary")); }
		return ptr;
	}


	void StackTrace();
	bool SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool SphereTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool SphereTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool SphereTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool SphereTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool SphereTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool SphereTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool SphereOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool SphereOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool SphereOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool SphereOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void ShowPlatformSpecificAchievementsScreen(class APlayerController* SpecificPlayer);
	void ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void SetWindowTitle(const struct FText& Title);
	void SetVolumeButtonsHandledBySystem(bool bEnabled);
	void SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);
	void SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void SetSupressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FGenericStruct& Value);
	void SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FCollisionProfileName& Value);
	void SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void SetAssetPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UObject> Value);
	void SetAssetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, TAssetPtr<class UClass> Value);
	void RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void ResetGamepadAssignmentToController(int ControllerId);
	void ResetGamepadAssignments();
	void RegisterForRemoteNotifications();
	void QuitGame(class UObject* WorldContextObject, class APlayerController* SpecificPlayer, TEnumAsByte<EQuitPreference> QuitPreference);
	void PrintWarning(const struct FString& InString);
	void PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void PrintString(class UObject* WorldContextObject, const struct FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	void MoveComponentTo(class USceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, TEnumAsByte<EMoveComponentAction> MoveAction, const struct FLatentActionInfo& LatentInfo);
	struct FText MakeLiteralText(const struct FText& Value);
	struct FString MakeLiteralString(const struct FString& Value);
	struct FName MakeLiteralName(const struct FName& Value);
	int MakeLiteralInt(int Value);
	float MakeLiteralFloat(float Value);
	unsigned char MakeLiteralByte(unsigned char Value);
	bool MakeLiteralBool(bool Value);
	void LoadAssetClass(class UObject* WorldContextObject, TAssetPtr<class UClass> AssetClass, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	void LoadAsset(class UObject* WorldContextObject, TAssetPtr<class UObject> Asset, const struct FScriptDelegate& OnLoaded, const struct FLatentActionInfo& LatentInfo);
	bool LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool LineTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool LineTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool LineTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool LineTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool LineTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool LineTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	void LaunchURL(const struct FString& URL);
	void K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping);
	struct FTimerHandle K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping);
	void K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool K2_IsValidTimerHandle(const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	bool K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FTimerHandle K2_InvalidateTimerHandle(struct FTimerHandle* Handle);
	float K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	float K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FTimerHandle& Handle);
	void K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	bool IsValidClass(class UClass* Class);
	bool IsValid(class UObject* Object);
	bool IsServer(class UObject* WorldContextObject);
	bool IsPackagedForDistribution();
	bool IsLoggedIn(class APlayerController* SpecificPlayer);
	bool IsDedicatedServer(class UObject* WorldContextObject);
	bool IsControllerAssignedToGamepad(int ControllerId);
	void HideAdBanner();
	bool GetVolumeButtonsHandledBySystem();
	struct FString GetUniqueDeviceId();
	bool GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	int GetRenderingMaterialQualityLevel();
	int GetRenderingDetailMode();
	TArray<struct FString> GetPreferredLanguages();
	struct FString GetPlatformUserName();
	int GetObjectNameAsCrc32(class UObject* Object);
	struct FString GetObjectName(class UObject* Object);
	int GetMaxShadowCascades();
	struct FString GetLocalCurrencySymbol();
	struct FString GetLocalCurrencyCode();
	float GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString GetGameName();
	struct FString GetEngineVersion();
	struct FString GetDisplayName(class UObject* Object);
	void GetComponentBounds(class USceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString GetClassDisplayName(class UClass* Class);
	int GetAdIDCount();
	void GetActorListFromComponentList(TArray<class UPrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AActor*>* OutActorList);
	void GetActorBounds(class AActor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceCloseAdBanner();
	void FlushPersistentDebugLines(class UObject* WorldContextObject);
	void FlushDebugStrings(class UObject* WorldContextObject);
	void ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class APlayerController* SpecificPlayer);
	void DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration);
	void DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FDebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration);
	void DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration);
	void DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration);
	void DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor);
	void DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration);
	void DrawDebugCamera(class ACameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration);
	void DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration);
	bool DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void Delay(class UObject* WorldContextObject, float Duration, const struct FLatentActionInfo& LatentInfo);
	void CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	class UObject* Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	class UObject* Conv_AssetToObject(TAssetPtr<class UObject> Asset);
	class UClass* Conv_AssetClassToClass(TAssetPtr<class UClass> AssetClass);
	void ControlScreensaver(bool bAllowScreenSaver);
	bool ComponentOverlapComponents_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool ComponentOverlapComponents_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool ComponentOverlapActors_NEW(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool ComponentOverlapActors_DEPRECATED(class UPrimitiveComponent* Component, const struct FTransform& ComponentTransform, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	void CollectGarbage();
	bool CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool CapsuleTraceSingleByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool CapsuleTraceSingle_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool CapsuleTraceSingle_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool CapsuleTraceMultiByObject_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<ECollisionChannel>> ObjectsToTrace, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool CapsuleTraceMulti_NEW(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool CapsuleTraceMulti_DEPRECATED(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool CapsuleOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool CapsuleOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool CapsuleOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool CapsuleOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, struct FHitResult* OutHit);
	bool BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, TArray<struct FHitResult>* OutHits);
	bool BoxOverlapComponents_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool BoxOverlapComponents_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ComponentClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class UPrimitiveComponent*>* OutComponents);
	bool BoxOverlapActors_NEW(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	bool BoxOverlapActors_DEPRECATED(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TEnumAsByte<EOverlapFilterOption> Filter, class UClass* ActorClassFilter, TArray<class AActor*> ActorsToIgnore, TArray<class AActor*>* OutActors);
	struct FDebugFloatHistory AddFloatHistorySample(float Value, const struct FDebugFloatHistory& FloatHistory);
};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UKismetTextLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.KismetTextLibrary")); }
		return ptr;
	}


	struct FText TextTrimTrailing(const struct FText& InText);
	struct FText TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText TextTrimPreceding(const struct FText& InText);
	bool TextIsTransient(const struct FText& InText);
	bool TextIsEmpty(const struct FText& InText);
	bool TextIsCultureInvariant(const struct FText& InText);
	bool NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText GetEmptyText();
	struct FText Format(const struct FText& InPattern, TArray<struct FFormatTextArgument> InArgs);
	bool FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FString Conv_TextToString(const struct FText& InText);
	struct FText Conv_StringToText(const struct FString& InString);
	struct FText Conv_NameToText(const struct FName& InName);
	struct FText Conv_IntToText(int Value, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText Conv_FloatToText(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText Conv_ByteToText(unsigned char Value);
	struct FText Conv_BoolToText(bool InBool);
	struct FText AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText AsTime_DateTime(const struct FDateTime& In);
	struct FText AsPercent_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText AsDateTime_DateTime(const struct FDateTime& In);
	struct FText AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText AsCurrency_Integer(int Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText AsCurrency_Float(float Value, TEnumAsByte<ERoundingMode> RoundingMode, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
};


// Class Engine.LoadingPerfBPFuncLib
// 0x0000 (0x0028 - 0x0028)
class ULoadingPerfBPFuncLib : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LoadingPerfBPFuncLib")); }
		return ptr;
	}


	void WriteTimings();
	void MarkEndStreaming();
};


// Class Engine.WorldComposition
// 0x0090 (0x00B8 - 0x0028)
class UWorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x0028(0x0070) MISSED OFFSET
	TArray<class ULevelStreaming*>                     TilesStreaming;                                           // 0x0098(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x00A8(0x0008) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bLoadAllTilesDuringCinematic;                             // 0x00B0(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bRebaseOriginIn3DSpace;                                   // 0x00B1(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              RebaseOriginDistance;                                     // 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.WorldComposition")); }
		return ptr;
	}

};


// Class Engine.NestedWorldComposition
// 0x0000 (0x00B8 - 0x00B8)
class UNestedWorldComposition : public UWorldComposition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NestedWorldComposition")); }
		return ptr;
	}

};


// Class Engine.NestedWorldCompositionFunctionLib
// 0x0000 (0x0028 - 0x0028)
class UNestedWorldCompositionFunctionLib : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NestedWorldCompositionFunctionLib")); }
		return ptr;
	}


	void TriggerManualNestedLevelUnload(class UObject* WorldContextObject, const struct FName& PackageName);
	void TriggerManualNestedLevelLoad(class UObject* WorldContextObject, const struct FName& PackageName);
	bool IsNestedLevelVisibleRecursive(class UObject* WorldContextObject, const struct FName& PackageName);
	bool IsNestedLevelVisible(class UObject* WorldContextObject, const struct FName& PackageName);
};


// Class Engine.ParticleWarningFunctions
// 0x0000 (0x0028 - 0x0028)
class UParticleWarningFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleWarningFunctions")); }
		return ptr;
	}


	TArray<struct FString> RetrieveInfoOnEmitterWithShortQuarterResArea(class UParticleSystemComponent* Component, float ShortQuarterRes);
	TArray<struct FString> RetrieveInfoOnEmitterWithLongNearTransition(class UParticleSystemComponent* Component, float LongNearTransition);
	TArray<struct FString> RetrieveInfoOnEmitterWithLongFarTransition(class UParticleSystemComponent* Component, float LongFarTransition);
	TArray<struct FString> RetrieveInfoOnEmittersWithoutPerVertexLighting(class UParticleSystemComponent* Component);
	TArray<struct FString> RetrieveInfoOnEmittersWithLowAlphaThreshold(class UParticleSystemComponent* Component, float LowAlphaThreshold);
	TArray<struct FString> RetrieveInfoOnEmittersWithLoopZero(class UParticleSystemComponent* Component);
	TArray<struct FString> RetrieveInfoOnEmittersWithKillOnCompleteUnticked(class UParticleSystemComponent* Component);
	TArray<struct FString> RetrieveInfoOnEmittersWithHighSpawnRate(class UParticleSystemComponent* Component, int HighSpawnRate);
	TArray<struct FString> RetrieveInfoOnEmittersWithDurationZero(class UParticleSystemComponent* Component);
	TArray<struct FString> RetrieveInfoOnEmittersUsingMaxDrawCount(class UParticleSystemComponent* Component);
	TArray<struct FString> RetrieveInfoOnEmittersOnCPU(class UParticleSystemComponent* Component);
};


// Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USkeletalMeshMergeBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshMergeBlueprintFunctionLibrary")); }
		return ptr;
	}


	class USkeletalMesh* MergeSkeletalMeshesWithMorphTargets(TArray<class USkeletalMesh*> Meshes, TArray<struct FName> MorphTargetNames, TArray<float> MorphTargetWeights);
	class USkeletalMesh* MergeSkeletalMeshes(TArray<class USkeletalMesh*> Meshes);
};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerKismetLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerKismetLibrary")); }
		return ptr;
	}


	void LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory);
	void LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory);
	void LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory);
};


// Class Engine.AnimBlueprintGeneratedClass
// 0x0058 (0x0258 - 0x0200)
class UAnimBlueprintGeneratedClass : public UBlueprintGeneratedClass
{
public:
	TArray<struct FBakedAnimationStateMachine>         BakedStateMachines;                                       // 0x0200(0x0010) (CPF_ZeroConstructor)
	class USkeleton*                                   TargetSkeleton;                                           // 0x0210(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimNotifyEvent>                    AnimNotifies;                                             // 0x0218(0x0010) (CPF_ZeroConstructor)
	int                                                RootAnimNodeIndex;                                        // 0x0228(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x022C(0x001C) MISSED OFFSET
	TArray<struct FAnimGroupInfo>                      Groups;                                                   // 0x0248(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimBlueprintGeneratedClass")); }
		return ptr;
	}

};


// Class Engine.BodySetup
// 0x0290 (0x02B8 - 0x0028)
class UBodySetup : public UObject
{
public:
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0028(0x0048)
	struct FName                                       BoneName;                                                 // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<EPhysicsType>                          PhysicsType;                                              // 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCookComplexGeometryOnServer : 1;                         // 0x007C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                // 0x007C(0x0001) (CPF_Deprecated BITFIELD: 0202)
	unsigned char                                      bConsiderForBounds : 1;                                   // 0x007C(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bMeshCollideAll : 1;                                      // 0x007C(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      bDoubleSidedGeometry : 1;                                 // 0x007C(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                        // 0x007C(0x0001) ( BITFIELD: 2020)
	unsigned char                                      bSharedCookedData : 1;                                    // 0x007C(0x0001) ( BITFIELD: 4040)
	unsigned char                                      bGenerateMirroredCollision : 1;                           // 0x007C(0x0001) ( BITFIELD: 8080)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EBodyCollisionResponse>                CollisionReponse;                                         // 0x0088(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ECollisionTraceFlag>                   CollisionTraceFlag;                                       // 0x0089(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x008A(0x0006) MISSED OFFSET
	struct FBodyInstance                               DefaultInstance;                                          // 0x0090(0x0178) (CPF_Edit)
	struct FWalkableSlopeOverride                      WalkableSlopeOverride;                                    // 0x0208(0x0008) (CPF_Edit)
	float                                              BuildScale;                                               // 0x0210(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     BuildScale3D;                                             // 0x0214(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x98];                                      // 0x0220(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BodySetup")); }
		return ptr;
	}

};


// Class Engine.BodySetup2D
// 0x0030 (0x02E8 - 0x02B8)
class UBodySetup2D : public UBodySetup
{
public:
	struct FAggregateGeometry2D                        AggGeom2D;                                                // 0x02B8(0x0030)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BodySetup2D")); }
		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UBoneMaskFilter : public UObject
{
public:
	TArray<struct FInputBlendPose>                     BlendPoses;                                               // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BoneMaskFilter")); }
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0028 (0x0050 - 0x0028)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x0028(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FString>                             HiddenLevels;                                             // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BookMark")); }
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                   // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FIntPoint                                   Location;                                                 // 0x002C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BookMark2D")); }
		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0018 (0x0040 - 0x0028)
class UBreakpoint : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_TransientMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class UEdGraphNode*                                Node;                                                     // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bStepOnce : 1;                                            // 0x0038(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                      // 0x0038(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                             // 0x0038(0x0001) ( BITFIELD: 0404)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Breakpoint")); }
		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UBrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                           // 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     ToolTip;                                                  // 0x0038(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                      // 0x0048(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                                 // 0x0050(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBuilderPoly>                        Polys;                                                    // 0x0060(0x0010) (CPF_ZeroConstructor)
	struct FName                                       Layer;                                                    // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                                       // 0x0078(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.BrushBuilder")); }
		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x0288 (0x02B0 - 0x0028)
class UButtonStyleAsset : public UObject
{
public:
	struct FButtonStyle                                ButtonStyle;                                              // 0x0028(0x0288) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ButtonStyleAsset")); }
		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x0578 (0x05A0 - 0x0028)
class UCameraAnim : public UObject
{
public:
	class UInterpGroup*                                CameraInterpGroup;                                        // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AnimLength;                                               // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBox                                        BoundingBox;                                              // 0x0034(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                          // 0x0050(0x0001) (CPF_Edit, CPF_DisableEditOnInstance BITFIELD: 0101)
	float                                              BaseFOV;                                                  // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	struct FPostProcessSettings                        BasePostProcessSettings;                                  // 0x0060(0x0530)
	float                                              BasePostProcessBlendWeight;                               // 0x0590(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0594(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraAnim")); }
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x00E8 (0x0110 - 0x0028)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0038(0x001C) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0054(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0058(0x0010) MISSED OFFSET
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0078(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x97];                                      // 0x0079(0x0097) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraAnimInst")); }
		return ptr;
	}


	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};


// Class Engine.CameraModifier_CameraShake
// 0x0018 (0x0060 - 0x0048)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<class UCameraShake*>                        ActiveShakes;                                             // 0x0048(0x0010) (CPF_ZeroConstructor)
	float                                              SplitScreenShakeScale;                                    // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CameraModifier_CameraShake")); }
		return ptr;
	}

};


// Class Engine.Canvas
// 0x00C8 (0x00F0 - 0x0028)
class UCanvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OrgY;                                                     // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClipX;                                                    // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ClipY;                                                    // 0x0034(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                             // 0x003C(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bCenterY : 1;                                             // 0x003C(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bNoSmooth : 1;                                            // 0x003C(0x0001) ( BITFIELD: 0404)
	int                                                SizeX;                                                    // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0060(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  GradientTexture0;                                         // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UReporterGraph*                              ReporterGraph;                                            // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x78];                                      // 0x0078(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Canvas")); }
		return ptr;
	}


	struct FVector2D K2_TextSize(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UFont* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UTexture* RenderTexture, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawTexture(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UFont* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UTexture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UMaterialInterface* RenderMaterial, TArray<struct FCanvasUVTri> Triangles);
	void K2_DrawMaterial(class UMaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness);
	void K2_DrawBorder(class UTexture* BorderTexture, class UTexture* BackgroundTexture, class UTexture* LeftBorderTexture, class UTexture* RightBorderTexture, class UTexture* TopBorderTexture, class UTexture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
};


// Class Engine.Channel
// 0x0040 (0x0068 - 0x0028)
class UChannel : public UObject
{
public:
	class UNetConnection*                              Connection;                                               // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0030(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Channel")); }
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x01D0 (0x0238 - 0x0068)
class UActorChannel : public UChannel
{
public:
	class AActor*                                      Actor;                                                    // 0x0068(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C8];                                     // 0x0070(0x01C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ActorChannel")); }
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0080 - 0x0068)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ControlChannel")); }
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x0020 (0x0088 - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0068(0x0014) MISSED OFFSET
	int                                                BandwidthPerSecondReservationInBytes;                     // 0x007C(0x0004) (CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VoiceChannel")); }
		return ptr;
	}

};


// Class Engine.CheckBoxStyleAsset
// 0x0598 (0x05C0 - 0x0028)
class UCheckBoxStyleAsset : public UObject
{
public:
	struct FCheckBoxStyle                              CheckBoxStyle;                                            // 0x0028(0x0598) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CheckBoxStyleAsset")); }
		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UPluginCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0080(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PluginCommandlet")); }
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SmokeTestCommandlet")); }
		return ptr;
	}

};


// Class Engine.Console
// 0x00C8 (0x00F0 - 0x0028)
class UConsole : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<struct FString>                             HistoryBuffer;                                            // 0x0068(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData02[0x78];                                      // 0x0078(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Console")); }
		return ptr;
	}

};


// Class Engine.CurveLinearColor
// 0x01E0 (0x0210 - 0x0030)
class UCurveLinearColor : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x4];                                         // 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveLinearColor")); }
		return ptr;
	}


	struct FLinearColor GetLinearColorValue(float InTime);
};


// Class Engine.CurveVector
// 0x0168 (0x0198 - 0x0030)
class UCurveVector : public UCurveBase
{
public:
	struct FRichCurve                                  FloatCurves[0x3];                                         // 0x0030(0x0078)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveVector")); }
		return ptr;
	}


	struct FVector GetVectorValue(float InTime);
};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UCurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveEdPresetCurve")); }
		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0050 (0x0078 - 0x0028)
class UCurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CurveTable")); }
		return ptr;
	}

};


// Class Engine.ParticleComputeShaderData
// 0x0068 (0x0090 - 0x0028)
class UParticleComputeShaderData : public UDataAsset
{
public:
	unsigned char                                      UnknownData00[0x68];                                      // 0x0028(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleComputeShaderData")); }
		return ptr;
	}

};


// Class Engine.TireType
// 0x0008 (0x0030 - 0x0028)
class UTireType : public UDataAsset
{
public:
	float                                              FrictionScale;                                            // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TireType")); }
		return ptr;
	}

};


// Class Engine.DestructibleFractureSettings
// 0x0078 (0x00A0 - 0x0028)
class UDestructibleFractureSettings : public UObject
{
public:
	int                                                CellSiteCount;                                            // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFractureMaterial                           FractureMaterialDesc;                                     // 0x002C(0x0024) (CPF_Edit, CPF_Transient)
	int                                                RandomSeed;                                               // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FVector>                             VoronoiSites;                                             // 0x0058(0x0010) (CPF_ZeroConstructor)
	int                                                OriginalSubmeshCount;                                     // 0x0068(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0070(0x0010) (CPF_ZeroConstructor)
	TArray<struct FDestructibleChunkParameters>        ChunkParameters;                                          // 0x0080(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             MaterialNames;                                            // 0x0090(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DestructibleFractureSettings")); }
		return ptr;
	}

};


// Class Engine.AnimationSettings
// 0x0048 (0x0080 - 0x0038)
class UAnimationSettings : public UDeveloperSettings
{
public:
	TArray<float>                                      DefaultVisibleDistanceFactorThresholds;                   // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	int                                                CompressCommandletVersion;                                // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                            // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	class UClass*                                      DefaultCompressionAlgorithm;                              // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x0069(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AlternativeCompressionThreshold;                          // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      ForceRecompression;                                       // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bOnlyCheckForMissingSkeletalMeshes;                       // 0x0071(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bForceBelowThreshold;                                     // 0x0072(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bFirstRecompressUsingCurrentOrDefault;                    // 0x0073(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bRaiseMaxErrorToExisting;                                 // 0x0074(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryFixedBitwiseCompression;                              // 0x0075(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryPerTrackBitwiseCompression;                           // 0x0076(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryLinearKeyRemovalCompression;                          // 0x0077(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bTryIntervalKeyRemoval;                                   // 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimationSettings")); }
		return ptr;
	}

};


// Class Engine.AudioSettings
// 0x0048 (0x0080 - 0x0038)
class UAudioSettings : public UDeveloperSettings
{
public:
	struct FStringAssetReference                       DefaultSoundClassName;                                    // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       DefaultBaseSoundMix;                                      // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       VoiPSoundClass;                                           // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              LowPassFilterResonance;                                   // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaximumConcurrentStreams;                                 // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FAudioQualitySettings>               QualityLevels;                                            // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AudioSettings")); }
		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x0120 (0x0158 - 0x0038)
class UUserInterfaceSettings : public UDeveloperSettings
{
public:
	TEnumAsByte<ERenderFocusRule>                      RenderFocusRule;                                          // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FStringClassReference                       DefaultCursor;                                            // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       TextEditBeamCursor;                                       // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       CrosshairsCursor;                                         // 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       GrabHandCursor;                                           // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       GrabHandClosedCursor;                                     // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringClassReference                       SlashedCircleCursor;                                      // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	float                                              ApplicationScale;                                         // 0x00A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EUIScalingRule>                        UIScaleRule;                                              // 0x00A4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FStringClassReference                       CustomScalingRuleClass;                                   // 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FRuntimeFloatCurve                          UIScaleCurve;                                             // 0x00B8(0x0080) (CPF_Edit, CPF_Config)
	TArray<class UObject*>                             CursorClasses;                                            // 0x0138(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                           // 0x0148(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class UDPICustomScalingRule*                       CustomScalingRule;                                        // 0x0150(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.UserInterfaceSettings")); }
		return ptr;
	}

};


// Class Engine.StreamingSettings
// 0x0028 (0x0060 - 0x0038)
class UStreamingSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_ConfigMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                            // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                              // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	float                                              TimeLimitExceededMultiplier;                              // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AsyncIOBandwidthLimit;                                    // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                          // 0x004C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                         // 0x004C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	float                                              AsyncLoadingTimeLimit;                                    // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StreamingSettings")); }
		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UGarbageCollectionSettings : public UDeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                                   // 0x003C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      AllowParallelGC : 1;                                      // 0x003C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      CreateGCClusters : 1;                                     // 0x003C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	unsigned char                                      MergeGCClusters : 1;                                      // 0x003C(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	int                                                NumRetriesBeforeForcingGC;                                // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.GarbageCollectionSettings")); }
		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0008 (0x0040 - 0x0038)
class UNetworkSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_ConfigMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bVerifyPeer : 1;                                          // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NetworkSettings")); }
		return ptr;
	}

};


// Class Engine.PhysicsSettings
// 0x0088 (0x00C0 - 0x0038)
class UPhysicsSettings : public UDeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                          // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultTerminalVelocity;                                  // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DefaultFluidFriction;                                     // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                SimulateScratchMemorySize;                                // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              TriangleMeshTriangleMinAreaThreshold;                     // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableAsyncScene;                                        // 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnableShapeSharing;                                      // 0x0051(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnablePCM;                                               // 0x0052(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bWarnMissingLocks;                                        // 0x0053(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEnable2DPhysics;                                         // 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<ESettingsLockedAxis>                   LockedAxis;                                               // 0x0055(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom;                                  // 0x0056(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              BounceThresholdVelocity;                                  // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x005C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x005D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxAngularVelocity;                                       // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxDepenetrationVelocity;                                 // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSimulateSkeletalMeshOnDedicatedServer;                   // 0x0068(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDefaultHasComplexCollision;                              // 0x0069(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxPhysicsDeltaTime;                                      // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubstepping;                                             // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSubsteppingAsync;                                        // 0x0071(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MaxSubstepDeltaTime;                                      // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              AsyncSceneSmoothingFactor;                                // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TArray<struct FPhysicalSurfaceName>                PhysicalSurfaces;                                         // 0x0088(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FDominanceGroupPair>                 DominanceGroups;                                          // 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FDominanceGroupName>                 DominanceGroupNames;                                      // 0x00A8(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TEnumAsByte<EDominanceGroup>                       DefaultStaticDominanceGroup;                              // 0x00B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst, CPF_IsPlainOldData)
	TEnumAsByte<EDominanceGroup>                       DefaultMovableDominanceGroup;                             // 0x00B9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00BA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSettings")); }
		return ptr;
	}

};


// Class Engine.RendererSettings
// 0x00D8 (0x0110 - 0x0038)
class URendererSettings : public UDeveloperSettings
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_ConfigMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bMobileHDR : 1;                                           // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;             // 0x0040(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bOcclusionCulling : 1;                                    // 0x0040(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	float                                              MinScreenRadiusForLights;                                 // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                        // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bTextureStreaming : 1;                                    // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                   // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	unsigned char                                      bAllowStaticLighting : 1;                                 // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                      // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 1010)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                          // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 2020)
	unsigned char                                      bGenerateLandscapeGIData : 1;                             // 0x0050(0x0001) (CPF_Edit, CPF_Config BITFIELD: 4040)
	float                                              TessellationAdaptivePixelsPerTriangle;                    // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bSeparateTranslucency : 1;                                // 0x0058(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy;                                    // 0x005C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	struct FVector                                     TranslucentSortAxis;                                      // 0x0060(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil;                                       // 0x006C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bDefaultFeatureBloom : 1;                                 // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                      // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;        // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                          // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                            // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 1010)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                             // 0x0070(0x0001) (CPF_Edit, CPF_Config BITFIELD: 2020)
	TEnumAsByte<EAntiAliasingMethodUI>                 DefaultFeatureAntiAliasing;                               // 0x0074(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EEarlyZPass>                           EarlyZPass;                                               // 0x0075(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bEarlyZPassMovable : 1;                                   // 0x0078(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bDBuffer : 1;                                             // 0x0078(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod;                                         // 0x007C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bBasePassOutputsVelocity : 1;                             // 0x0080(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	float                                              WireframeCullThreshold;                                   // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	TEnumAsByte<EUIScalingRule>                        UIScaleRule;                                              // 0x0088(0x0001) (CPF_ZeroConstructor, CPF_Config, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0089(0x0007) MISSED OFFSET
	struct FRuntimeFloatCurve                          UIScaleCurve;                                             // 0x0090(0x0080) (CPF_Config, CPF_Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RendererSettings")); }
		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UTextureLODSettings : public UObject
{
public:
	TArray<struct FTextureLODGroup>                    TextureLODGroups;                                         // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureLODSettings")); }
		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0048 (0x0080 - 0x0038)
class UDeviceProfile : public UTextureLODSettings
{
public:
	struct FString                                     DeviceType;                                               // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_EditConst)
	struct FString                                     BaseProfileName;                                          // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	class UObject*                                     Parent;                                                   // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	TArray<struct FString>                             CVars;                                                    // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfile")); }
		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x0060 (0x0088 - 0x0028)
class UDeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                 // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DeviceProfileManager")); }
		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UDialogueVoice : public UObject
{
public:
	TEnumAsByte<EGrammaticalGender>                    Gender;                                                   // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EGrammaticalNumber>                    Plurality;                                                // 0x0029(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       LocalizationGUID;                                         // 0x002C(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DialogueVoice")); }
		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0038 (0x0060 - 0x0028)
class UDialogueWave : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bMature : 1;                                              // 0x0028(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FDialogueContextMapping>             ContextMappings;                                          // 0x0040(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                         // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DialogueWave")); }
		return ptr;
	}

};


// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UDistribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Distribution")); }
		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UDistributionFloat : public UDistribution
{
public:
	unsigned char                                      bUnknown0030_0101 : 1;                                    // 0x0030(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0030_0202 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0030_0404 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0030_0808 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0030_1010 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0030_2020 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0030_4040 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0030_8080 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloat")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstant")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinInput;                                                 // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxInput;                                                 // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinOutput;                                                // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxOutput;                                                // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x0058(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParameterBase")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatParticleParameter")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatConstantCurve")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Max;                                                      // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Min;                                                      // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniform")); }
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionFloatUniformCurve")); }
		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UDistributionVector : public UDistribution
{
public:
	unsigned char                                      bUnknown0030_0101 : 1;                                    // 0x0030(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0030_0202 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0030_0404 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0030_0808 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0030_1010 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0030_2020 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0030_4040 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0030_8080 : 1;                                    // 0x0030(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bIsDirty : 1;                                             // 0x0030(0x0001) ( BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVector")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0018 (0x0050 - 0x0038)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0044(0x0001) ( BITFIELD: 0101)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0048(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstant")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0040 (0x0090 - 0x0050)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MinInput;                                                 // 0x0058(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxInput;                                                 // 0x0064(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MinOutput;                                                // 0x0070(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxOutput;                                                // 0x007C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x0088(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x008B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParameterBase")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x0090 - 0x0090)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorParticleParameter")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001) ( BITFIELD: 0101)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorConstantCurve")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     Min;                                                      // 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001) ( BITFIELD: 0101)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0055(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x0058(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniform")); }
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0038(0x0018) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                           // 0x0050(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bLockAxes2 : 1;                                           // 0x0050(0x0001) ( BITFIELD: 0202)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0056(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x005C(0x0001) (CPF_Edit BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DistributionVectorUniformCurve")); }
		return ptr;
	}

};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UDPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DPICustomScalingRule")); }
		return ptr;
	}

};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UDynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DynamicBlueprintBinding")); }
		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UComponentDelegateBinding : public UDynamicBlueprintBinding
{
public:
	TArray<struct FBlueprintComponentDelegateBinding>  ComponentDelegateBindings;                                // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ComponentDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UInputDelegateBinding : public UDynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputActionDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputActionDelegateBinding> InputActionDelegateBindings;                              // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputActionDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisDelegateBinding>  InputAxisDelegateBindings;                                // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputAxisDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputAxisKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                             // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputAxisKeyDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UInputVectorAxisDelegateBinding : public UInputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputVectorAxisDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputKeyDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputKeyDelegateBinding>   InputKeyDelegateBindings;                                 // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputKeyDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UInputTouchDelegateBinding : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                               // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputTouchDelegateBinding")); }
		return ptr;
	}

};


// Class Engine.EdGraph
// 0x0068 (0x0090 - 0x0028)
class UEdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                   // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UEdGraphNode*>                        Nodes;                                                    // 0x0030(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bEditable : 1;                                            // 0x0040(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bAllowDeletion : 1;                                       // 0x0040(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bAllowRenaming : 1;                                       // 0x0040(0x0001) ( BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x4F];                                      // 0x0041(0x004F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EdGraph")); }
		return ptr;
	}

};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B0 - 0x0090)
class UEdGraphNode_Documentation : public UEdGraphNode
{
public:
	struct FString                                     Link;                                                     // 0x0090(0x0010) (CPF_ZeroConstructor)
	struct FString                                     Excerpt;                                                  // 0x00A0(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EdGraphNode_Documentation")); }
		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EdGraphSchema")); }
		return ptr;
	}

};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
class UImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ImportantToggleSettingInterface")); }
		return ptr;
	}

};


// Class Engine.EndUserSettings
// 0x0010 (0x0038 - 0x0028)
class UEndUserSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	unsigned char                                      bSendAnonymousUsageDataToEpic;                            // 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EndUserSettings")); }
		return ptr;
	}

};


// Class Engine.Exporter
// 0x0040 (0x0068 - 0x0028)
class UExporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                           // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     ExportRootScope;                                          // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FString>                             FormatExtension;                                          // 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                        // 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TextIndent;                                               // 0x005C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bText : 1;                                                // 0x0060(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bSelectedOnly : 1;                                        // 0x0060(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bForceFileOperations : 1;                                 // 0x0060(0x0001) ( BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Exporter")); }
		return ptr;
	}

};


// Class Engine.FFTWaterSettings
// 0x0028 (0x0050 - 0x0028)
class UFFTWaterSettings : public UObject
{
public:
	struct FStringAssetReference                       FFTWaterMaterialName;                                     // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FStringAssetReference                       FFTWaterFoamTextureName;                                  // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	int                                                BaseMeshDetail;                                           // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FFTWaterSettings")); }
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x0028(0x00B0) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.FontImportOptions")); }
		return ptr;
	}

};


// Class Engine.Font
// 0x01A8 (0x01D0 - 0x0028)
class UFont : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TEnumAsByte<EFontCacheType>                        FontCacheType;                                            // 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FFontCharacter>                      Characters;                                               // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0058(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmScale;                                                  // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Ascent;                                                   // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Descent;                                                  // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Leading;                                                  // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Kerning;                                                  // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x0070(0x00B0) (CPF_Edit)
	int                                                NumCharacters;                                            // 0x0120(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	float                                              ScalingFactor;                                            // 0x0138(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x013C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LegacyFontName;                                           // 0x0140(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FCompositeFont                              CompositeFont;                                            // 0x0148(0x0028)
	unsigned char                                      UnknownData03[0x60];                                      // 0x0170(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Font")); }
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect
// 0x0100 (0x0128 - 0x0028)
class UHapticFeedbackEffect : public UObject
{
public:
	struct FHapticFeedbackDetails                      HapticDetails;                                            // 0x0028(0x0100) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HapticFeedbackEffect")); }
		return ptr;
	}

};


// Class Engine.HighLatencySettings
// 0x0018 (0x0040 - 0x0028)
class UHighLatencySettings : public UObject
{
public:
	unsigned char                                      UseHighLatency;                                           // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PktLag;                                                   // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PktLagVariance;                                           // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      PktOrder;                                                 // 0x0034(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PktDup;                                                   // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	int                                                PktLoss;                                                  // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HighLatencySettings")); }
		return ptr;
	}

};


// Class Engine.HIKCharacterization
// 0x0110 (0x0138 - 0x0028)
class UHIKCharacterization : public UObject
{
public:
	struct FName                                       Reference;                                                // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Hips;                                                     // 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftUpLeg;                                                // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftLeg;                                                  // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftFoot;                                                 // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightUpLeg;                                               // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightLeg;                                                 // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightFoot;                                                // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Spine;                                                    // 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftArm;                                                  // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftForeArm;                                              // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       LeftHand;                                                 // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightArm;                                                 // 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightForeArm;                                             // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       RightHand;                                                // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Head;                                                     // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FHIKBoneTransform>                   BoneTransforms;                                           // 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      Locked;                                                   // 0x00B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	TArray<int>                                        UnrealToHumanIKBoneMapping;                               // 0x00C0(0x0010) (CPF_ZeroConstructor)
	TArray<struct FHIKBoneMapping>                     AdditionalBones;                                          // 0x00D0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      LeftElbowInverted;                                        // 0x00E0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      RightElbowInverted;                                       // 0x00E1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      LeftKneeInverted;                                         // 0x00E2(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      RightKneeInverted;                                        // 0x00E3(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      AdjustLeftShoulder;                                       // 0x00E4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     AdjustLeftShoulder_Axis;                                  // 0x00E8(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AdjustLeftShoulder_Angle;                                 // 0x00F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      AdjustRightShoulder;                                      // 0x00F8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     AdjustRightShoulder_Axis;                                 // 0x00FC(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AdjustRightShoulder_Angle;                                // 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      SpineSquashNStretch;                                      // 0x010C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      NeckSquashNStretch;                                       // 0x010D(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpineJointsMinSquashNStretchFactor;                       // 0x0110(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpineJointsMaxSquashNStretchFactor;                       // 0x0114(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NeckJointsMinSquashNStretchFactor;                        // 0x0118(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NeckJointsMaxSquashNStretchFactor;                        // 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInitFromSkeleton;                                        // 0x0120(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InitFromSkeletonCount;                                    // 0x0124(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    ImportRotator;                                            // 0x0128(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.HIKCharacterization")); }
		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0010 (0x0038 - 0x0028)
class UInheritableComponentHandler : public UObject
{
public:
	TArray<struct FComponentOverrideRecord>            Records;                                                  // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InheritableComponentHandler")); }
		return ptr;
	}

};


// Class Engine.PlayerInput
// 0x0430 (0x0458 - 0x0028)
class UPlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0028(0x00F8) MISSED OFFSET
	TArray<struct FKeyBind>                            DebugExecBindings;                                        // 0x0120(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0130(0x0040) MISSED OFFSET
	TArray<struct FName>                               GamepadInvertedAxes;                                      // 0x0170(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FName>                               MouseInvertedAxes;                                        // 0x0180(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FName>                               InvertedCombinedAxisY;                                    // 0x0190(0x0010) (CPF_ZeroConstructor, CPF_Config)
	TArray<struct FName>                               InvertedCombinedAxisX;                                    // 0x01A0(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData02[0x2A8];                                     // 0x01B0(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlayerInput")); }
		return ptr;
	}


	void SetMouseSensitivity(float Sensitivity);
	void SetForceFeedbackIntensity(float Intensity);
	void SetCombinedAxisScale(const struct FName& CombinedAxisName, float Scale);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertMouseAxis(const struct FName& AxisName);
	void InvertGamepadAxis(const struct FName& AxisName);
	void InvertCombinedAxisY(const struct FName& CombinedAxisName);
	void InvertCombinedAxisX(const struct FName& CombinedAxisName);
	void InvertAxisKey(const struct FKey& AxisKey);
	void ClearSmoothing();
};


// Class Engine.InputSettings
// 0x0090 (0x00B8 - 0x0028)
class UInputSettings : public UObject
{
public:
	TArray<struct FInputAxisConfigEntry>               AxisConfig;                                               // 0x0028(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                           // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bUseMouseForTouch : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      bEnableMouseSmoothing : 1;                                // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0404)
	unsigned char                                      bEnableFOVScaling : 1;                                    // 0x0038(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0808)
	float                                              FOVScale;                                                 // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FInputActionKeyMapping>              ActionMappings;                                           // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FInputAxisKeyMapping>                AxisMappings;                                             // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	TArray<struct FInputCombinedAxisKeyMapping>        CombinedAxisMappings;                                     // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      bAlwaysShowTouchInterface;                                // 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      bShowConsoleOnFourFingerTap;                              // 0x0079(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Config, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x007A(0x0006) MISSED OFFSET
	struct FStringAssetReference                       DefaultTouchInterface;                                    // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)
	struct FKey                                        ConsoleKey;                                               // 0x0090(0x0018) (CPF_Config, CPF_Deprecated)
	TArray<struct FKey>                                ConsoleKeys;                                              // 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_Config)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InputSettings")); }
		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x0028(0x0010) (CPF_ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpCurveEdSetup")); }
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
class UInterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x0030(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0040(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                                  // 0x0050(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UInterpGroupDirector*                        CachedDirectorGroup;                                      // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                            // 0x0060(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpData")); }
		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter")); }
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Classes : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Classes")); }
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
class UInterpFilter_Custom : public UInterpFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpFilter_Custom")); }
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0050 - 0x0028)
class UInterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0030(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	struct FName                                       GroupName;                                                // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FColor                                      GroupColor;                                               // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bVisible : 1;                                             // 0x004C(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bIsFolder : 1;                                            // 0x004C(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bIsParented : 1;                                          // 0x004C(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bIsSelected : 1;                                          // 0x004C(0x0001) (CPF_Transient BITFIELD: 1010)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroup")); }
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0060 - 0x0050)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                           // 0x0050(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupCamera")); }
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0050 - 0x0050)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupDirector")); }
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class AActor*                                      GroupActor;                                               // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0038(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInst")); }
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstCamera")); }
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpGroupInstDirector")); }
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0048 (0x0070 - 0x0028)
class UInterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UInterpTrack*>                        SubTracks;                                                // 0x0038(0x0010) (CPF_ZeroConstructor)
	class UClass*                                      TrackInstClass;                                           // 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x0058(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                         // 0x0068(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bDirGroupOnly : 1;                                        // 0x0068(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bDisableTrack : 1;                                        // 0x0068(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bIsSelected : 1;                                          // 0x0068(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      bIsAnimControlTrack : 1;                                  // 0x0068(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bSubTrackOnly : 1;                                        // 0x0068(0x0001) ( BITFIELD: 2020)
	unsigned char                                      bVisible : 1;                                             // 0x0068(0x0001) (CPF_Transient BITFIELD: 4040)
	unsigned char                                      bIsRecording : 1;                                         // 0x0068(0x0001) (CPF_Transient BITFIELD: 8080)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrack")); }
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                // 0x0070(0x0010) (CPF_ZeroConstructor)
	struct FName                                       PropertyName;                                             // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackBoolProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                         // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackDirector")); }
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bUseCustomEventName : 1;                                  // 0x0080(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackEvent")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatBase")); }
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B0 - 0x0090)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                 // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x0098(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                   // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAnimControl")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned char                                      bUnknown0090_0101 : 1;                                    // 0x0090(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0090_0202 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0090_0404 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0090_0808 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0090_1010 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0090_2020 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0090_4040 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0090_8080 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bPersistFade : 1;                                         // 0x0090(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFadeAudio : 1;                                           // 0x0090(0x0001) (CPF_Edit BITFIELD: 0202)
	struct FLinearColor                                FadeColor;                                                // 0x0094(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFade")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatAnimBPParam : public UInterpTrackFloatBase
{
public:
	class UClass*                                      AnimBlueprintClass;                                       // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParamName;                                                // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatAnimBPParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatMaterialParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatParticleParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackFloatProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00C8 - 0x0070)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0070(0x0018) (CPF_ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0088(0x0018) (CPF_ZeroConstructor)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                          // 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                                // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bShowArrowAtKeys : 1;                                     // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bDisableMovement : 1;                                     // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                            // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bShowRotationOnCurveEd : 1;                               // 0x00C0(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bHide3DTrack : 1;                                         // 0x00C0(0x0001) (CPF_Edit BITFIELD: 2020)
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00C4(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMove")); }
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0090(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackMoveAxis")); }
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorBase")); }
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackLinearColorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x0070(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackParticleReplay")); }
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                            // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                        // 0x0080(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackToggle")); }
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0090 - 0x0070)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0070(0x0018) (CPF_ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorBase")); }
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackAudioMaster")); }
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0090 - 0x0090)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackColorScale")); }
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0090(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                       // 0x00A0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A0(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x00A0(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bTreatAsDialogue : 1;                                     // 0x00A0(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bAttach : 1;                                              // 0x00A0(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackSound")); }
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<class UMaterialInterface*>                  TargetMaterials;                                          // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorMaterialParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0098 - 0x0090)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVectorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackVisibility")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInst")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAnimControl")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstAudioMaster")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorScale")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstDirector")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstEvent")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFade")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstFloatAnimBPParam : public UInterpTrackInst
{
public:
	class UAnimInstance*                               AnimScriptInstance;                                       // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatAnimBPParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (CPF_ZeroConstructor)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                           // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatMaterialParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatParticleParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0018 (0x0040 - 0x0028)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x0028(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    ResetRotation;                                            // 0x0034(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstMove")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstParticleReplay")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                           // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstProperty")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UBoolProperty*                               BoolProperty;                                             // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      ResetBool;                                                // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstBoolProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                               // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstColorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0048 - 0x0038)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstFloatProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                               // 0x0040(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstLinearColorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0018 (0x0050 - 0x0038)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                              // 0x0040(0x000C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorProp")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstSound")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0038 - 0x0028)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                                    // 0x0030(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstToggle")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<class UMaterialInstanceDynamic*>            MaterialInstances;                                        // 0x0028(0x0010) (CPF_ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                             // 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FPrimitiveMaterialRef>               PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (CPF_ZeroConstructor)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                           // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVectorMaterialParam")); }
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x0028(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InterpTrackInstVisibility")); }
		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UIntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0028(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           UnsignedInt32Variable;                                    // 0x002C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0038(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int16_t                                            SignedInt16Variable;                                      // 0x003A(0x0002) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0048(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SignedInt32Variable;                                      // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.IntSerialization")); }
		return ptr;
	}

};


// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class ULayer : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x0030(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FLayerActorStats>                    ActorStats;                                               // 0x0038(0x0010) (CPF_ZeroConstructor, CPF_Transient)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Layer")); }
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x0368 (0x0390 - 0x0028)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                              // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TAssetPtr<class UWorld>                            WorldAsset;                                               // 0x0030(0x0020) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_EditConst)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FName                                       PackageNameToLoad;                                        // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FName>                               LODPackageNames;                                          // 0x0060(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0070(0x0010) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                           // 0x0080(0x0030) (CPF_Edit, CPF_BlueprintVisible, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	unsigned char                                      bUnknown00B8_0404 : 1;                                    // 0x00B8(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bShouldBeVisibleInEditor : 1;                             // 0x00B8(0x0001) ( BITFIELD: 0808)
	unsigned char                                      Blocked : 1;                                              // 0x00B8(0x0001) ( BITFIELD: 1010)
	unsigned char                                      bShouldBeLoaded : 1;                                      // 0x00B8(0x0001) (CPF_BlueprintVisible BITFIELD: 2020)
	unsigned char                                      bShouldBeVisible : 1;                                     // 0x00B8(0x0001) (CPF_BlueprintVisible BITFIELD: 4040)
	unsigned char                                      bShouldBlockOnLoad : 1;                                   // 0x00B8(0x0001) (CPF_BlueprintVisible BITFIELD: 8080)
	int                                                LevelLODIndex;                                            // 0x00BC(0x0004) (CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bDisableDistanceStreaming : 1;                            // 0x00C0(0x0001) (CPF_BlueprintVisible, CPF_Transient BITFIELD: 0101)
	unsigned char                                      bUnknown00C0_0404 : 1;                                    // 0x00C0(0x0001) (CPF_EditMANUAL_ADD_BIT 0404)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0808)
	struct FColor                                      DrawColor;                                                // 0x00C4(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FLinearColor                                LevelColor;                                               // 0x00C8(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x00D8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	TArray<struct FString>                             Keywords;                                                 // 0x00F0(0x0010) (CPF_ZeroConstructor)
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                            // 0x0100(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                          // 0x0110(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                             // 0x0120(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                            // 0x0130(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	unsigned char                                      UnknownData04[0x240];                                     // 0x0140(0x0240) MISSED OFFSET
	class ULevel*                                      LoadedLevel;                                              // 0x0380(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	class ULevel*                                      PendingUnloadLevel;                                       // 0x0388(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelStreaming")); }
		return ptr;
	}


	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	class ALevelScriptActor* GetLevelScriptActor();
	class ULevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0390 - 0x0390)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingAlwaysLoaded")); }
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0010 (0x03A0 - 0x0390)
class ULevelStreamingKismet : public ULevelStreaming
{
public:
	unsigned char                                      bUnknown0390_0101 : 1;                                    // 0x0390(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0390_0202 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0390_0404 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0390_0808 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0390_1010 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0390_2020 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0390_4040 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0390_8080 : 1;                                    // 0x0390(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bInitiallyLoaded : 1;                                     // 0x0390(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bInitiallyVisible : 1;                                    // 0x0390(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0391(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingKismet")); }
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0390 - 0x0390)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LevelStreamingPersistent")); }
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0030(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightmappedSurfaceCollection")); }
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0028(0x0018) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightmassPrimitiveSettingsObject")); }
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class ULocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LocalMessage")); }
		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngineMessage : public ULocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                       // 0x0028(0x0010) (CPF_ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                          // 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     EnteredMessage;                                           // 0x0048(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LeftMessage;                                              // 0x0058(0x0010) (CPF_ZeroConstructor)
	struct FString                                     GlobalNameChange;                                         // 0x0068(0x0010) (CPF_ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                                       // 0x0078(0x0010) (CPF_ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                         // 0x0088(0x0010) (CPF_ZeroConstructor)
	struct FString                                     NewSpecMessage;                                           // 0x0098(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.EngineMessage")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAbs")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionActorPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionActorPositionWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAdd")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAppendVector")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionAtmosphericFogColor : public UMaterialExpression
{
public:
	struct FExpressionInput                            WorldPosition;                                            // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAtmosphericFogColor")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlackBody
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionBlackBody : public UMaterialExpression
{
public:
	struct FExpressionInput                            Temp;                                                     // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBlackBody")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionBoneMatrix
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionBoneMatrix : public UMaterialExpression
{
public:
	int                                                ReferenceIndex;                                           // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0074(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPosition;                                                // 0x007C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBoneMatrix")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionBreakMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            Struct;                                                   // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FMaterialAttributesInput                    MaterialAttributes;                                       // 0x00A8(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBreakMaterialAttributes")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Height;                                                   // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            HeightRatioInput;                                         // 0x00E0(0x0038) (CPF_ZeroConstructor)
	float                                              HeightRatio;                                              // 0x0118(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0120(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionBumpOffset")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCameraPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraPositionWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCameraVectorWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCameraVectorWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCausticTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCausticTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCausticTexture")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCausticTextureCoordinate
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionCausticTextureCoordinate : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCausticTextureCoordinate")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCeil")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Min;                                                      // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Max;                                                      // 0x00E0(0x0038) (CPF_ZeroConstructor)
	TEnumAsByte<EClampMode>                            ClampMode;                                                // 0x0118(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MinDefault;                                               // 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0120(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionClamp")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionCollectionParameter : public UMaterialExpression
{
public:
	class UMaterialParameterCollection*                Collection;                                               // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ParameterId;                                              // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCollectionParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0028 (0x0098 - 0x0070)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0070(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SizeY;                                                    // 0x0074(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     Text;                                                     // 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FLinearColor                                CommentColor;                                             // 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComment")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      R : 1;                                                    // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      G : 1;                                                    // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      B : 1;                                                    // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      A : 1;                                                    // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionComponentMask")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              G;                                                        // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant2Vector")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant3Vector")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstant4Vector")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              Bias;                                                     // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Scale;                                                    // 0x00AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionConstantBiasScale")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              Period;                                                   // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCosine")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCrossProduct")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                     // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x0080(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x0098(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustom")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomVelocity
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionCustomVelocity : public UMaterialExpressionCustomOutput
{
public:
	struct FExpressionInput                            Velocity2D;                                               // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionCustomVelocity")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDDX : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDX")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDDY : public UMaterialExpression
{
public:
	struct FExpressionInput                            Value;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDDY")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionDecalMipmapLevel : public UMaterialExpression
{
public:
	struct FExpressionInput                            TextureSize;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              ConstWidth;                                               // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstHeight;                                              // 0x00AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDecalMipmapLevel")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionDepthFade : public UMaterialExpression
{
public:
	struct FExpressionInput                            InOpacity;                                                // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            FadeDistance;                                             // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              OpacityDefault;                                           // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthFade")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FExpressionInput                            Depth;                                                    // 0x0078(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDepthOfFieldFunction")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDeriveNormalZ")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Fraction;                                                 // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FLinearColor                                LuminanceFactors;                                         // 0x00E0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDesaturation")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistance")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionDistanceCullFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceCullFade")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDistanceFieldGradient : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceFieldGradient")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionDistanceToNearestSurface : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDistanceToNearestSurface")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDivide")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDotProduct")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x0070(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                             // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionDynamicParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionEyeAdaptation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionEyeAdaptation")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0118 (0x0188 - 0x0070)
class UMaterialExpressionFeatureLevelSwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Inputs[0x4];                                              // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFeatureLevelSwitch")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFloor")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFmod")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSample")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x00A0 - 0x0080)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0088(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFontSampleParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFrac")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            ExponentIn;                                               // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              Exponent;                                                 // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FExpressionInput                            BaseReflectFractionIn;                                    // 0x00B0(0x0038) (CPF_ZeroConstructor)
	float                                              BaseReflectFraction;                                      // 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FExpressionInput                            Normal;                                                   // 0x00F0(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFresnel")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x0090 (0x0100 - 0x0070)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                  // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FString                                     InputName;                                                // 0x00A8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     Description;                                              // 0x00B8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       Id;                                                       // 0x00C8(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x00D8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x00E0(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                            // 0x00F0(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                SortPriority;                                             // 0x00F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                            // 0x00F8(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionInput")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                               // 0x0070(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FString                                     Description;                                              // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	int                                                SortPriority;                                             // 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0098(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      bLastPreviewed : 1;                                       // 0x00D0(0x0001) ( BITFIELD: 0101)
	struct FGuid                                       Id;                                                       // 0x00D4(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionFunctionOutput")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x00A8 (0x0118 - 0x0070)
class UMaterialExpressionGIReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            StaticIndirect;                                           // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            DynamicIndirect;                                          // 0x00E0(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionGIReplace")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionHash
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionHash : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionHash")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0128 (0x0198 - 0x0070)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x00E0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            AEqualsB;                                                 // 0x0118(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            ALessThanB;                                               // 0x0150(0x0038) (CPF_ZeroConstructor)
	float                                              EqualsThreshold;                                          // 0x0188(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x018C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x0190(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0194(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionIf")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionIfShadowPass
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionIfShadowPass : public UMaterialExpression
{
public:
	struct FExpressionInput                            Shadow;                                                   // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            NotShadow;                                                // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionIfShadowPass")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmapUVs")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0070 (0x00E0 - 0x0070)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Lightmass;                                                // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightmassReplace")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLightVector")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x00B8 (0x0128 - 0x0070)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Alpha;                                                    // 0x00E0(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x0118(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x011C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0120(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLinearInterpolate")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLocalDisturbanceTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLocalDisturbanceTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLocalDisturbanceTexture")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLogarithm2 : public UMaterialExpression
{
public:
	struct FExpressionInput                            X;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLogarithm2")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLowResClouds
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionLowResClouds : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLowResClouds")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionLumaAvg
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionLumaAvg : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionLumaAvg")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0578 (0x05E8 - 0x0070)
class UMaterialExpressionMakeMaterialAttributes : public UMaterialExpression
{
public:
	struct FExpressionInput                            BaseColor;                                                // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Metallic;                                                 // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Specular;                                                 // 0x00E0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Roughness;                                                // 0x0118(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            EmissiveColor;                                            // 0x0150(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Opacity;                                                  // 0x0188(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            OpacityMask;                                              // 0x01C0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Normal;                                                   // 0x01F8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            WorldPositionOffset;                                      // 0x0230(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            WorldDisplacement;                                        // 0x0268(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            TessellationMultiplier;                                   // 0x02A0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            SubsurfaceColor;                                          // 0x02D8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            ClearCoat;                                                // 0x0310(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            ClearCoatRoughness;                                       // 0x0348(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            AmbientOcclusion;                                         // 0x0380(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Refraction;                                               // 0x03B8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            CustomizedUVs[0x8];                                       // 0x03F0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            PixelDepthOffset;                                         // 0x05B0(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMakeMaterialAttributes")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0028 (0x0098 - 0x0070)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                         // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                           // 0x0078(0x0010) (CPF_ZeroConstructor)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                          // 0x0088(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMaterialFunctionCall")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMax : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMax")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMin : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMin")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionMultiply")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0090 (0x0100 - 0x0070)
class UMaterialExpressionNoise : public UMaterialExpression
{
public:
	struct FExpressionInput                            Position;                                                 // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            FilterWidth;                                              // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              Scale;                                                    // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Quality;                                                  // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ENoiseFunction>                        NoiseFunction;                                            // 0x00E8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTurbulence : 1;                                          // 0x00EC(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                Levels;                                                   // 0x00F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutputMin;                                                // 0x00F4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OutputMax;                                                // 0x00F8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LevelScale;                                               // 0x00FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNoise")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionNormalize")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectBounds : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectBounds")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectOrientation")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectPositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectPositionWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionObjectRadius")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionOneMinus")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Time;                                                     // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              SpeedX;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SpeedY;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFractionalPart;                                          // 0x00EC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPanner")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0020 (0x0090 - 0x0070)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0010 (0x00A0 - 0x0090)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0090(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SliderMin;                                                // 0x0094(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SliderMax;                                                // 0x0098(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScalarParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0098 - 0x0090)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned char                                      bUnknown0090_0101 : 1;                                    // 0x0090(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0090_0202 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0090_0404 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0090_0808 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0090_1010 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0090_2020 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0090_4040 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0090_8080 : 1;                                    // 0x0090(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      DefaultValue : 1;                                         // 0x0090(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBoolParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0070 (0x0108 - 0x0098)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                        // 0x0098(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00D0(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitchParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0040 (0x00D0 - 0x0090)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0090(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      DefaultR : 1;                                             // 0x00C8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      DefaultG : 1;                                             // 0x00C8(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      DefaultB : 1;                                             // 0x00C8(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      DefaultA : 1;                                             // 0x00C8(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticComponentMaskParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x00A0 - 0x0090)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVectorParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleColor")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleDirection")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMacroUV")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleMotionBlurFade : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleMotionBlurFade")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticlePositionWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticlePositionWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRadius")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleRelativeTime : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleRelativeTime")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSize")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionParticleSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSpeed")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPerInstanceFadeAmount : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceFadeAmount")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPerInstanceRandom")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelDepth")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPixelNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPixelNormalWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Exponent;                                                 // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstExponent;                                            // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPower")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionPrecomputedAOMask : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPrecomputedAOMask")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x00E0 (0x0150 - 0x0070)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            Default;                                                  // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Inputs[0x3];                                              // 0x00A8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionQualitySwitch")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionReflectionVectorWS : public UMaterialExpression
{
public:
	struct FExpressionInput                            CustomWorldNormal;                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                          // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionReflectionVectorWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x00E8 (0x0158 - 0x0070)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxis;                                   // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            RotationAngle;                                            // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            PivotPoint;                                               // 0x00E0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Position;                                                 // 0x0118(0x0038) (CPF_ZeroConstructor)
	float                                              Period;                                                   // 0x0150(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotateAboutAxis")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Time;                                                     // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              CenterX;                                                  // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterY;                                                  // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                                    // 0x00E8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x00EC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionRotator")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionSceneColor : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0078(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            OffsetFraction;                                           // 0x00B0(0x0038) (CPF_ZeroConstructor, CPF_Deprecated)
	struct FVector2D                                   ConstInput;                                               // 0x00E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneColor")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0080 (0x00F0 - 0x0070)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode;                                                // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FExpressionInput                            Input;                                                    // 0x0078(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Coordinates;                                              // 0x00B0(0x0038) (CPF_ZeroConstructor, CPF_Deprecated)
	struct FVector2D                                   ConstInput;                                               // 0x00E8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneDepth")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionSceneTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexelSize")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)
	TEnumAsByte<ESceneTextureId>                       SceneTextureId;                                           // 0x00A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClampUVs;                                                // 0x00A9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bFiltered;                                                // 0x00AA(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x00AB(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSceneTexture")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionScreenPosition")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              Period;                                                   // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSine")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionSpeedTree : public UMaterialExpression
{
public:
	TEnumAsByte<ESpeedTreeGeometryType>                GeometryType;                                             // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESpeedTreeWindType>                    WindType;                                                 // 0x0071(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESpeedTreeLODType>                     LODType;                                                  // 0x0072(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              BillboardThreshold;                                       // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAccurateWindVelocities;                                  // 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSpeedTree")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x00E8 (0x0158 - 0x0070)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Radius;                                                   // 0x00E0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Hardness;                                                 // 0x0118(0x0038) (CPF_ZeroConstructor)
	float                                              AttenuationRadius;                                        // 0x0150(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x0154(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphereMask")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionSphericalParticleOpacity : public UMaterialExpression
{
public:
	struct FExpressionInput                            Density;                                                  // 0x0070(0x0038) (CPF_ZeroConstructor)
	float                                              ConstantDensity;                                          // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSphericalParticleOpacity")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSquareRoot")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned char                                      bUnknown0070_0101 : 1;                                    // 0x0070(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0070_0202 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0070_0404 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0070_0808 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0070_1010 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0070_2020 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0070_4040 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0070_8080 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      Value : 1;                                                // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticBool")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x00B0 (0x0120 - 0x0070)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned char                                      bUnknown0070_0101 : 1;                                    // 0x0070(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0070_0202 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0070_0404 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0070_0808 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0070_1010 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0070_2020 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0070_4040 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0070_8080 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      DefaultValue : 1;                                         // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FExpressionInput                            A;                                                        // 0x0078(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00B0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            Value;                                                    // 0x00E8(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionStaticSwitch")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0078 (0x00E8 - 0x0070)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0070(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            B;                                                        // 0x00A8(0x0038) (CPF_ZeroConstructor)
	float                                              ConstA;                                                   // 0x00E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ConstB;                                                   // 0x00E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionSubtract")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionTextureBase : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialSamplerType>                  SamplerType;                                              // 0x0078(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                            // 0x007C(0x0001) (CPF_Edit BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureBase")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTextureObject : public UMaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObject")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0128 (0x01A8 - 0x0080)
class UMaterialExpressionTextureSample : public UMaterialExpressionTextureBase
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0080(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            TextureObject;                                            // 0x00B8(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            MipValue;                                                 // 0x00F0(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            CoordinatesDX;                                            // 0x0128(0x0038) (CPF_ZeroConstructor)
	struct FExpressionInput                            CoordinatesDY;                                            // 0x0160(0x0038) (CPF_ZeroConstructor)
	TEnumAsByte<ETextureMipValueMode>                  MipValueMode;                                             // 0x0198(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESamplerSourceMode>                    SamplerSource;                                            // 0x0199(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x019C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ConstMipValue;                                            // 0x01A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSample")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x01B0 - 0x01A8)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:
	unsigned char                                      bUnknown01A8_0101 : 1;                                    // 0x01A8(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown01A8_0202 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown01A8_0404 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown01A8_0808 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown01A8_1010 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown01A8_2020 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown01A8_4040 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown01A8_8080 : 1;                                    // 0x01A8(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bBlend : 1;                                               // 0x01A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionParticleSubUV")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPredicatedTextureSample
// 0x0040 (0x01E8 - 0x01A8)
class UMaterialExpressionPredicatedTextureSample : public UMaterialExpressionTextureSample
{
public:
	struct FExpressionInput                            Predicate;                                                // 0x01A8(0x0038) (CPF_ZeroConstructor)
	struct FColor                                      DefaultColour;                                            // 0x01E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPredicatedTextureSample")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x01C8 - 0x01A8)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x01A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x01B0(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       Group;                                                    // 0x01C0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureObjectParameter")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameter2D")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x01D0 - 0x01C8)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x01C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x01CC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionAntialiasedTextureMask")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D
// 0x0040 (0x0208 - 0x01C8)
class UMaterialExpressionPredicatedTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter2D
{
public:
	struct FExpressionInput                            Predicate;                                                // 0x01C8(0x0038) (CPF_ZeroConstructor)
	struct FColor                                      DefaultColour;                                            // 0x0200(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0204(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionPredicatedTextureSampleParameter2D")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x01D0 - 0x01C8)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bUnknown01C8_0101 : 1;                                    // 0x01C8(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown01C8_0202 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown01C8_0404 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown01C8_0808 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown01C8_1010 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown01C8_2020 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown01C8_4040 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown01C8_8080 : 1;                                    // 0x01C8(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bBlend : 1;                                               // 0x01C8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterSubUV")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x01C8 - 0x01C8)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureSampleParameterCube")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0080 - 0x0070)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              UTiling;                                                  // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VTiling;                                                  // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                            // 0x007C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnMirrorV : 1;                                            // 0x007C(0x0001) (CPF_Edit BITFIELD: 0202)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTextureCoordinate")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned char                                      bUnknown0070_0101 : 1;                                    // 0x0070(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0070_0202 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0070_0404 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0070_0808 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0070_1010 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0070_2020 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0070_4040 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0070_8080 : 1;                                    // 0x0070(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bIgnorePause : 1;                                         // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bOverride_Period : 1;                                     // 0x0070(0x0001) ( BITFIELD: 0202)
	float                                              Period;                                                   // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTime")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x00A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x00A9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransform")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0040 (0x00B0 - 0x0070)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0070(0x0038) (CPF_ZeroConstructor)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x00A8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformType;                                            // 0x00A9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00AA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTransformPosition")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionTwoSidedSign")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionUnderwaterTranslucencyTexture
// 0x0038 (0x00A8 - 0x0070)
class UMaterialExpressionUnderwaterTranslucencyTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0070(0x0038) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionUnderwaterTranslucencyTexture")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexColor")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexID
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexID : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexID")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionVertexNormalWS : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionVertexNormalWS")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionViewProperty : public UMaterialExpression
{
public:
	TEnumAsByte<EMaterialExposedViewProperty>          Property;                                                 // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewProperty")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionViewSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionViewSize")); }
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0078 - 0x0070)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:
	TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset;                                // 0x0070(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialExpressionWorldPosition")); }
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0060 (0x0088 - 0x0028)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	struct FString                                     Description;                                              // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                                     // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FString>                             LibraryCategories;                                        // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)
	TArray<struct FText>                               LibraryCategoriesText;                                    // 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<class UMaterialExpression*>                 FunctionExpressions;                                      // 0x0070(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bReentrantFlag : 1;                                       // 0x0080(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialFunction")); }
		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0000 (0x01F0 - 0x01F0)
class UMaterialInstanceDynamic : public UMaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialInstanceDynamic")); }
		return ptr;
	}


	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UMaterialInstance* MaterialA, class UMaterialInstance* MaterialB, float Alpha);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UTexture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UMaterialInterface* SourceMaterialToCopyFrom);
	void CopyParameterOverrides(class UMaterialInstance* MaterialInstance);
};


// Class Engine.MaterialParameterCollection
// 0x0038 (0x0060 - 0x0028)
class UMaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)
	TArray<struct FCollectionScalarParameter>          ScalarParameters;                                         // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FCollectionVectorParameter>          VectorParameters;                                         // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0058(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollection")); }
		return ptr;
	}

};


// Class Engine.MaterialParameterCollectionInstance
// 0x00C0 (0x00E8 - 0x0028)
class UMaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UMaterialParameterCollection*                Collection;                                               // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UWorld*                                      World;                                                    // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xA8];                                      // 0x0040(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MaterialParameterCollectionInstance")); }
		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
class UMatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MatineeInterface")); }
		return ptr;
	}

};


// Class Engine.NavArea_Default
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Default : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Default")); }
		return ptr;
	}

};


// Class Engine.NavArea_LowHeight
// 0x0000 (0x0040 - 0x0040)
class UNavArea_LowHeight : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavArea_LowHeight")); }
		return ptr;
	}

};


// Class Engine.NavArea_Null
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Null : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Null")); }
		return ptr;
	}

};


// Class Engine.NavArea_Obstacle
// 0x0000 (0x0040 - 0x0040)
class UNavArea_Obstacle : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavArea_Obstacle")); }
		return ptr;
	}

};


// Class Engine.NavAreaMeta
// 0x0000 (0x0040 - 0x0040)
class UNavAreaMeta : public UNavArea
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavAreaMeta")); }
		return ptr;
	}

};


// Class Engine.NavAreaMeta_SwitchByAgent
// 0x0080 (0x00C0 - 0x0040)
class UNavAreaMeta_SwitchByAgent : public UNavAreaMeta
{
public:
	class UClass*                                      Agent0Area;                                               // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent1Area;                                               // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent2Area;                                               // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent3Area;                                               // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent4Area;                                               // 0x0060(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent5Area;                                               // 0x0068(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent6Area;                                               // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent7Area;                                               // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent8Area;                                               // 0x0080(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent9Area;                                               // 0x0088(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent10Area;                                              // 0x0090(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent11Area;                                              // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent12Area;                                              // 0x00A0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent13Area;                                              // 0x00A8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent14Area;                                              // 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UClass*                                      Agent15Area;                                              // 0x00B8(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavAreaMeta_SwitchByAgent")); }
		return ptr;
	}

};


// Class Engine.NavCollision
// 0x00E8 (0x0110 - 0x0028)
class UNavCollision : public UObject
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x0028(0x0050) MISSED OFFSET
	TArray<struct FNavCollisionCylinder>               CylinderCollision;                                        // 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FNavCollisionBox>                    BoxCollision;                                             // 0x0088(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class UClass*                                      AreaClass;                                                // 0x0098(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsDynamicObstacle : 1;                                   // 0x00A0(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0101)
	unsigned char                                      bGatherConvexGeometry : 1;                                // 0x00A0(0x0001) (CPF_Edit, CPF_Config BITFIELD: 0202)
	unsigned char                                      UnknownData01[0x6F];                                      // 0x00A1(0x006F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavCollision")); }
		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UNavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                       // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationDataChunk")); }
		return ptr;
	}

};


// Class Engine.RecastNavMeshDataChunk
// 0x0010 (0x0040 - 0x0030)
class URecastNavMeshDataChunk : public UNavigationDataChunk
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RecastNavMeshDataChunk")); }
		return ptr;
	}

};


// Class Engine.NavigationPath
// 0x0058 (0x0080 - 0x0028)
class UNavigationPath : public UObject
{
public:
	struct FScriptMulticastDelegate                    PathUpdatedNotifier;                                      // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TArray<struct FVector>                             PathPoints;                                               // 0x0038(0x0010) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor)
	TEnumAsByte<ENavigationOptionFlag>                 RecalculateOnInvalidation;                                // 0x0048(0x0001) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x37];                                      // 0x0049(0x0037) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationPath")); }
		return ptr;
	}


	bool IsValid();
	bool IsStringPulled();
	bool IsPartial();
	float GetPathLength();
	float GetPathCost();
	struct FString GetDebugString();
	void EnableRecalculationOnInvalidation(TEnumAsByte<ENavigationOptionFlag> DoRecalculation);
	void EnableDebugDrawing(bool bShouldDrawDebugData, const struct FLinearColor& PathColor);
};


// Class Engine.NavigationPathGenerator
// 0x0000 (0x0028 - 0x0028)
class UNavigationPathGenerator : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavigationPathGenerator")); }
		return ptr;
	}

};


// Class Engine.RecastFilter_UseDefaultArea
// 0x0000 (0x0040 - 0x0040)
class URecastFilter_UseDefaultArea : public UNavigationQueryFilter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.RecastFilter_UseDefaultArea")); }
		return ptr;
	}

};


// Class Engine.NavLinkTrivial
// 0x0000 (0x0050 - 0x0050)
class UNavLinkTrivial : public UNavLinkDefinition
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavLinkTrivial")); }
		return ptr;
	}

};


// Class Engine.NavNodeInterface
// 0x0000 (0x0028 - 0x0028)
class UNavNodeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NavNodeInterface")); }
		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x00C0 (0x03E8 - 0x0328)
class UDemoNetDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0xC0];                                      // 0x0328(0x00C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DemoNetDriver")); }
		return ptr;
	}

};


// Class Engine.NiagaraEffectRendererProperties
// 0x0008 (0x0030 - 0x0028)
class UNiagaraEffectRendererProperties : public UObject
{
public:
	struct FName                                       dummy;                                                    // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NiagaraEffectRendererProperties")); }
		return ptr;
	}

};


// Class Engine.NiagaraRibbonRendererProperties
// 0x0000 (0x0030 - 0x0030)
class UNiagaraRibbonRendererProperties : public UNiagaraEffectRendererProperties
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NiagaraRibbonRendererProperties")); }
		return ptr;
	}

};


// Class Engine.NiagaraSpriteRendererProperties
// 0x0008 (0x0038 - 0x0030)
class UNiagaraSpriteRendererProperties : public UNiagaraEffectRendererProperties
{
public:
	struct FVector2D                                   SubImageInfo;                                             // 0x0030(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.NiagaraSpriteRendererProperties")); }
		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0048 (0x0070 - 0x0028)
class UObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                          // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHasBlueprintClasses;                                     // 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                                  // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0048(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bUseWeakReferences;                                       // 0x0058(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bIsFullyLoaded;                                           // 0x0059(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x16];                                      // 0x005A(0x0016) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ObjectLibrary")); }
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ObjectReferencer")); }
		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x0198 (0x01E8 - 0x0050)
class UPackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x198];                                     // 0x0050(0x0198) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PackageMapClient")); }
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0040 (0x0068 - 0x0028)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0034(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0038(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      ConvertedModules : 1;                                     // 0x0048(0x0001) ( BITFIELD: 0101)
	int                                                PeakActiveParticles;                                      // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MediumDetailSpawnRateScale;                               // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x005C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsSoloing : 1;                                           // 0x0060(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bCookedOut : 1;                                           // 0x0060(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                        // 0x0060(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bHasAnyEnabledLODs : 1;                                   // 0x0060(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      bHasAnyEnabledLODsValid : 1;                              // 0x0060(0x0001) (CPF_Transient BITFIELD: 1010)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleEmitter")); }
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x0068 - 0x0068)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleSpriteEmitter")); }
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0028(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x002C(0x0001) ( BITFIELD: 0101)
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0030(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0038(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	class UParticleModule*                             TypeDataModule;                                           // 0x0048(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x0070(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0080(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0090(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x00A0(0x0010) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                     // 0x00B0(0x0001) ( BITFIELD: 0101)
	int                                                PeakActiveParticles;                                      // 0x00B4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleLODLevel")); }
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0010 (0x0038 - 0x0028)
class UParticleModule : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bSpawnModule : 1;                                         // 0x0028(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bUpdateModule : 1;                                        // 0x0028(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bFinalUpdateModule : 1;                                   // 0x0028(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                 // 0x0028(0x0001) ( BITFIELD: 0808)
	unsigned char                                      bCurvesAsColor : 1;                                       // 0x0028(0x0001) ( BITFIELD: 1010)
	unsigned char                                      b3DDrawMode : 1;                                          // 0x0028(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      bSupported3DDrawMode : 1;                                 // 0x0028(0x0001) ( BITFIELD: 4040)
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001) ( BITFIELD: 8080)
	unsigned char                                      bEditable : 1;                                            // 0x0029(0x0001) ( BITFIELD: 0101)
	unsigned char                                      LODDuplicate : 1;                                         // 0x0029(0x0001) ( BITFIELD: 0202)
	unsigned char                                      bSupportsRandomSeed : 1;                                  // 0x0029(0x0001) ( BITFIELD: 0404)
	unsigned char                                      bRequiresLoopingNotification : 1;                         // 0x0029(0x0001) ( BITFIELD: 0808)
	unsigned char                                      LODValidity;                                              // 0x002C(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                ModuleInstanceOffset;                                     // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ModuleOffset;                                             // 0x0034(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModule")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bAlwaysInWorldSpace : 1;                                  // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0040 (0x0080 - 0x0040)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0078(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAcceleration")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (0x0050 - 0x0040)
class UParticleModuleAccelerationConstant : public UParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                             // 0x0040(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationConstant")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0010 (0x0050 - 0x0040)
class UParticleModuleAccelerationDrag : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragCoefficient;                                          // 0x0040(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDistributionFloat*                          DragOnLocalVelocity;                                      // 0x0048(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDrag")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0010 (0x0050 - 0x0040)
class UParticleModuleAccelerationDragScaleOverLife : public UParticleModuleAccelerationBase
{
public:
	class UDistributionFloat*                          DragScale;                                                // 0x0040(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	class UDistributionFloat*                          DragLocalVelocityScale;                                   // 0x0048(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationDragScaleOverLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationEmitterPoint
// 0x0040 (0x0080 - 0x0040)
class UParticleModuleAccelerationEmitterPoint : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionFloat                       AccelerationScale;                                        // 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0078(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationEmitterPoint")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0038 (0x0078 - 0x0040)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x0040(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAccelerationOverLifetime")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     EndPoint1;                                                // 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0050(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0088(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorLine")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (0x00C8 - 0x0038)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       Range;                                                    // 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      bStrengthByDistance : 1;                                  // 0x0078(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       Strength;                                                 // 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x00BC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRenewSource : 1;                                         // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bInheritSourceVel : 1;                                    // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0202)
	int                                                LastSelIndex;                                             // 0x00C4(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorParticle")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (0x00E8 - 0x0038)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x0070(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00A8(0x0038) (CPF_Edit)
	unsigned char                                      StrengthByDistance : 1;                                   // 0x00E0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00E0(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bOverrideVelocity : 1;                                    // 0x00E0(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bUseWorldSpacePosition : 1;                               // 0x00E0(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      Positive_X : 1;                                           // 0x00E0(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      Positive_Y : 1;                                           // 0x00E0(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      Positive_Z : 1;                                           // 0x00E0(0x0001) (CPF_Edit BITFIELD: 4040)
	unsigned char                                      Negative_X : 1;                                           // 0x00E0(0x0001) (CPF_Edit BITFIELD: 8080)
	unsigned char                                      Negative_Y : 1;                                           // 0x00E1(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      Negative_Z : 1;                                           // 0x00E1(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00E2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPoint")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleAttractorPointGravity : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                 // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Radius;                                                   // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UDistributionFloat*                          Strength;                                                 // 0x0048(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_NoClear, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleAttractorPointGravity")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x00C0 (0x00F8 - 0x0038)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x003C(0x0004) (CPF_Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x0040(0x0038) (CPF_Edit)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x0078(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Tangent;                                                  // 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bAbsoluteTangent : 1;                                     // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x00BC(0x0004) (CPF_Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x00C0(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamModifier")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0158 (0x0190 - 0x0038)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bLowFreq_Enabled : 1;                                     // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                Frequency;                                                // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0048(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x0080(0x0038) (CPF_Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                                  // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x00C0(0x0038) (CPF_Edit)
	unsigned char                                      bSmooth : 1;                                              // 0x00F8(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              NoiseLockRadius;                                          // 0x00FC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                           // 0x0100(0x0001) ( BITFIELD: 0101)
	unsigned char                                      bOscillate : 1;                                           // 0x0100(0x0001) (CPF_Edit BITFIELD: 0202)
	float                                              NoiseLockTime;                                            // 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0108(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                                    // 0x010C(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x0110(0x0038) (CPF_Edit)
	int                                                NoiseTessellation;                                        // 0x0148(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                         // 0x014C(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              FrequencyDistance;                                        // 0x0150(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                                     // 0x0154(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x0158(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamNoise")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x00D0 (0x0108 - 0x0038)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SourceName;                                               // 0x003C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                                      // 0x0044(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FRawDistributionVector                      Source;                                                   // 0x0048(0x0038) (CPF_Edit)
	unsigned char                                      bLockSource : 1;                                          // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x0084(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      SourceTangent;                                            // 0x0088(0x0038) (CPF_Edit)
	unsigned char                                      bLockSourceTangent : 1;                                   // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x00C8(0x0038) (CPF_Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0100(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamSource")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x00D0 (0x0108 - 0x0038)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       TargetName;                                               // 0x003C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      Target;                                                   // 0x0048(0x0038) (CPF_Edit)
	unsigned char                                      bTargetAbsolute : 1;                                      // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bLockTarget : 1;                                          // 0x0080(0x0001) (CPF_Edit BITFIELD: 0202)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x0084(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      TargetTangent;                                            // 0x0088(0x0038) (CPF_Edit)
	unsigned char                                      bLockTargetTangent : 1;                                   // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00C8(0x0038) (CPF_Edit)
	unsigned char                                      bLockTargetStength : 1;                                   // 0x0100(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              LockRadius;                                               // 0x0104(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleBeamTarget")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                             // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                                       // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x0074(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCameraOffset")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0150 (0x0188 - 0x0038)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0070(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x00A8(0x0038) (CPF_Edit)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x00E0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes;                                           // 0x00E8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F8(0x0004) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                        // 0x00FC(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x0100(0x0038) (CPF_Edit)
	float                                              DirScalar;                                                // 0x0138(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                            // 0x013C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x013C(0x0001) (CPF_Edit BITFIELD: 0202)
	float                                              VerticalFudgeFactor;                                      // 0x0140(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x0148(0x0038) (CPF_Edit)
	unsigned char                                      bDropDetail : 1;                                          // 0x0180(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                // 0x0180(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bIgnoreSourceActor : 1;                                   // 0x0180(0x0001) (CPF_Edit BITFIELD: 0404)
	float                                              MaxCollisionDistance;                                     // 0x0184(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollision")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0088 (0x00C0 - 0x0038)
class UParticleModuleCollisionGPU : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionFloat                       Resilience;                                               // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       ResilienceScaleOverLife;                                  // 0x0070(0x0038) (CPF_Edit)
	float                                              DampingFactorRotation;                                    // 0x00A8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Friction;                                                 // 0x00AC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RadiusScale;                                              // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EParticleCollisionResponse>            Response;                                                 // 0x00B8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EParticleCollisionMode>                CollisionMode;                                            // 0x00B9(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00BA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleCollisionGPU")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x02B8 (0x02F0 - 0x0038)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseGroupAColorForAllGroups : 1;                          // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      StartColor;                                               // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      AdditionalStartColor[0x5];                                // 0x0078(0x0038) (CPF_Edit)
	unsigned char                                      bUseGroupAAlphaForAllGroups : 1;                          // 0x0190(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0191(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0198(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalStartAlpha[0x5];                                // 0x01D0(0x0038) (CPF_Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x02E8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData02[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x0310 - 0x02F0)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x02F0(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColor_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0070(0x0038) (CPF_Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorOverLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0070(0x0038) (CPF_Edit)
	unsigned char                                      bEmitterTime : 1;                                         // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleColorScaleOverLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMurkyColor
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleMurkyColor : public UParticleModuleColorBase
{
public:
	struct FLinearColor                                ColorScale;                                               // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMurkyColor")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0038(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventGenerator")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       EventName;                                                // 0x003C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bUnknown0048_0101 : 1;                                    // 0x0048(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0048_0202 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0048_0404 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0048_0808 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0048_1010 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0048_2020 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0048_4040 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0048_8080 : 1;                                    // 0x0048(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bStopSpawning : 1;                                        // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverKillParticles")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0078 (0x00C0 - 0x0048)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0048(0x0038) (CPF_Edit)
	unsigned char                                      bUseParticleTime : 1;                                     // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bUsePSysLocation : 1;                                     // 0x0080(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bInheritVelocity : 1;                                     // 0x0080(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0088(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventReceiverSpawn")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0070(0x0038) (CPF_Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bKillInside : 1;                                          // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                             // 0x00A8(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillBox")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFloor : 1;                                               // 0x0070(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bApplyPSysScale : 1;                                      // 0x0070(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleKillHeight")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetimeBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0158 (0x0190 - 0x0038)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseGroupAValuesForAllGroups : 1;                         // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       LifeTime;                                                 // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalLifetimes[0x5];                                 // 0x0078(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x01B0 - 0x0190)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0190(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLifetime_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLightBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLightBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x00E8 (0x0120 - 0x0038)
class UParticleModuleLight : public UParticleModuleLightBase
{
public:
	unsigned char                                      bUseInverseSquaredFalloff;                                // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectsTranslucency;                                     // 0x0039(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreviewLightRadius;                                      // 0x003A(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              SpawnFraction;                                            // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       BrightnessOverLife;                                       // 0x0078(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       RadiusScale;                                              // 0x00B0(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       LightExponent;                                            // 0x00E8(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0140 - 0x0120)
class UParticleModuleLight_Seeded : public UParticleModuleLight
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0120(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLight_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0128 (0x0160 - 0x0038)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      AdditionalStartLocations[0x4];                            // 0x0070(0x0038) (CPF_Edit)
	unsigned char                                      StartLocationUseGroupAForAll : 1;                         // 0x0150(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              DistributeOverNPoints;                                    // 0x0154(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x0158(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x0180 - 0x0160)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0160(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocation_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0160 - 0x0160)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x0180 - 0x0160)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0160(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationWorldOffset_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     UniversalOffset;                                          // 0x003C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                          // 0x0048(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0058(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x005C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x005C(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x005C(0x0001) (CPF_Edit BITFIELD: 0404)
	struct FVector                                     InheritVelocityScale;                                     // 0x0060(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InheritedSpeedCap;                                        // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0070(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationBoneSocket")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x00E0 (0x0118 - 0x0038)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0070(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x00A8(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      Direction;                                                // 0x00E0(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationDirect")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0058 - 0x0038)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0040(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      InheritSourceVelocity : 1;                                // 0x0044(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              InheritSourceVelocityScale;                               // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                               // 0x004C(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              InheritSourceRotationScale;                               // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitter")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationEmitterDirect")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      Positive_X : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      Positive_Y : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      Positive_Z : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      Negative_X : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      Negative_Y : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      Negative_Z : 1;                                           // 0x0038(0x0001) (CPF_Edit BITFIELD: 2020)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0038(0x0001) (CPF_Edit BITFIELD: 4040)
	unsigned char                                      Velocity : 1;                                             // 0x0038(0x0001) (CPF_Edit BITFIELD: 8080)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0078(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationComputeShaderOutput
// 0x0008 (0x00B8 - 0x00B0)
class UParticleModuleLocationComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	class UParticleComputeShaderData*                  PositionData;                                             // 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationComputeShaderOutput")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0250 (0x0300 - 0x00B0)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      bUnknown00B0_0101 : 1;                                    // 0x00B0(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown00B0_0202 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown00B0_0404 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown00B0_0808 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown00B0_1010 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown00B0_2020 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown00B0_4040 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown00B0_8080 : 1;                                    // 0x00B0(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      RadialVelocity : 1;                                       // 0x00B0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00B8(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                             // 0x00F0(0x0038) (CPF_Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x01D0(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x01D1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       StartHeight;                                              // 0x01D8(0x0038) (CPF_Edit)
	unsigned char                                      StartHeightUseGroupAForAll : 1;                           // 0x0210(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0211(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       AdditionalStartHeights[0x4];                              // 0x0218(0x0038) (CPF_Edit)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x02F8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x02F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0320 - 0x0300)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0300(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0150 (0x0200 - 0x00B0)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x00B0(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                             // 0x00E8(0x0038) (CPF_Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x01C8(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector2D                                   PositiveXAngleRange;                                      // 0x01CC(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   NegativeXAngleRange;                                      // 0x01D4(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   PositiveYAngleRange;                                      // 0x01DC(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   NegativeYAngleRange;                                      // 0x01E4(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   PositiveZAngleRange;                                      // 0x01EC(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   NegativeZAngleRange;                                      // 0x01F4(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0220 - 0x0200)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0200(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationVelocityComputeShaderOutput
// 0x00F0 (0x01A0 - 0x00B0)
class UParticleModuleLocationVelocityComputeShaderOutput : public UParticleModuleLocationPrimitiveBase
{
public:
	class UParticleComputeShaderData*                  PositionData;                                             // 0x00B0(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionVector                      ComputedVelocityScale;                                    // 0x00B8(0x0038) (CPF_Edit)
	float                                              SpeedCap;                                                 // 0x00F0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      BaseVelocity;                                             // 0x00F8(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0130(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      LocationOffsetScaledDirection;                            // 0x0168(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationVelocityComputeShaderOutput")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphereSlice
// 0x01B8 (0x01F0 - 0x0038)
class UParticleModuleLocationPrimitiveSphereSlice : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalStartRadiuses[0x4];                             // 0x0070(0x0038) (CPF_Edit)
	unsigned char                                      StartRadiusUseGroupAForAll : 1;                           // 0x0150(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FPrimitiveSphereEmitterAngleRanges          AngleRanges[0x2];                                         // 0x0154(0x0010) (CPF_Edit)
	float                                              FirstSliceDistributionWeight;                             // 0x0174(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0178(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      Velocity : 1;                                             // 0x0178(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0180(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      StartLocation;                                            // 0x01B8(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveSphereSlice")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00E0 (0x0118 - 0x0038)
class UParticleModuleLocationPrimitiveTriangle : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartOffset;                                              // 0x0038(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Height;                                                   // 0x0070(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Angle;                                                    // 0x00A8(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Thickness;                                                // 0x00E0(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationPrimitiveTriangle")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x0098 - 0x0038)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     UniversalOffset;                                          // 0x003C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0048(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0048(0x0001) (CPF_Edit BITFIELD: 0404)
	struct FName                                       SkelMeshActorParamName;                                   // 0x004C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0068(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector                                     NormalToCompare;                                          // 0x006C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x007C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0080(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x0090(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0091(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleLocationSkelVertSurface")); }
		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0040 - 0x0038)
class UParticleModulePivotOffset : public UParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                              // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModulePivotOffset")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSourceMovement")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMaterialBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0038(0x0010) (CPF_Edit, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshMaterial")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbitBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x00C8 (0x0108 - 0x0040)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x0040(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0048(0x0038) (CPF_Edit)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x0080(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationAmount;                                           // 0x0088(0x0038) (CPF_Edit)
	struct FOrbitOptions                               RotationOptions;                                          // 0x00C0(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x00C8(0x0038) (CPF_Edit)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x0100(0x0004) (CPF_Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0104(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrbit")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleOrientationAxisLock")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0048(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                        // 0x004C(0x0001) ( BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0070 - 0x0050)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0050(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleParameterDynamic_Seeded")); }
		return ptr;
	}

};


// Class Engine.SubUVAnimation
// 0x0040 (0x0068 - 0x0028)
class USubUVAnimation : public UObject
{
public:
	class UTexture2D*                                  SubUVTexture;                                             // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0039(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AlphaThreshold;                                           // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SafeMarginSize;                                           // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0044(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SubUVAnimation")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x01D0 (0x0208 - 0x0038)
class UParticleModuleRequired : public UParticleModule
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bDeactivateGroupA : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDeactivateGroupB : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bDeactivateGroupC : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bDeactivateGroupD : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bDeactivateGroupE : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 1010)
	TEnumAsByte<EPriorityGroups>                       EmitterPriority;                                          // 0x003C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseComplexitySystemWhenLooping : 1;                      // 0x0040(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EPriorityGroups>                       SwitchPriority;                                           // 0x0044(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bReplacementGroupIsAdditive : 1;                          // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0050(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                            // 0x0058(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      EmitterOriginUseGroupAForAll : 1;                         // 0x0064(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector                                     AdditionalEmitterOrigins[0x5];                            // 0x0068(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                          // 0x00A4(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x00B0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AlignmentInheritedVelocityScale;                          // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                                       // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFollowEmitter : 1;                                       // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bTrailInGrandParentSpace : 1;                             // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bKillOnDeactivate : 1;                                    // 0x00B8(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bKillOnCompleted : 1;                                     // 0x00B8(0x0001) (CPF_Edit BITFIELD: 1010)
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x00BC(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                // 0x00C0(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              EmitterDuration;                                          // 0x00C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x00C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEmitterDurationUseRange : 1;                             // 0x00CC(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDurationRecalcEachLoop : 1;                              // 0x00CC(0x0001) (CPF_Edit BITFIELD: 0202)
	int                                                EmitterLoops;                                             // 0x00D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x00D8(0x0038)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0110(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0118(0x0010) (CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)
	float                                              EmitterDelay;                                             // 0x0128(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x012C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEmitterDelayUseRange : 1;                                // 0x0130(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                  // 0x0130(0x0001) (CPF_Edit BITFIELD: 0202)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x0134(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0138(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x013C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                             // 0x0140(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              RandomImageTime;                                          // 0x0144(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x0148(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                               // 0x014C(0x0001) (CPF_Edit BITFIELD: 0101)
	struct FVector                                     MacroUVPosition;                                          // 0x0150(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x015C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseMaxDrawCount : 1;                                     // 0x0160(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                MaxDrawCount;                                             // 0x0164(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x0168(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     NormalsSphereCenter;                                      // 0x016C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x0178(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x0184(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EParticleUVFlipMode>                   UVFlippingMode;                                           // 0x0188(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0189(0x0007) MISSED OFFSET
	class UTexture2D*                                  CutoutTexture;                                            // 0x0190(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode;                                             // 0x0198(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode;                                        // 0x0199(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AlphaThreshold;                                           // 0x019C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SafeMarginSize;                                           // 0x01A0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	TArray<struct FName>                               NamedMaterialOverrides;                                   // 0x01A8(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      bUseDistanceFading : 1;                                   // 0x01B8(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              FarStopFade;                                              // 0x01BC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarStartFade;                                             // 0x01C0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearStartFade;                                            // 0x01C4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearStopFade;                                             // 0x01C8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseDistanceSizeScale : 1;                                // 0x01CC(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              FarScaleFactor;                                           // 0x01D0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarScaleEndDistance;                                      // 0x01D4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FarScaleBeginDistance;                                    // 0x01D8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearScaleBeginDistance;                                   // 0x01DC(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearScaleEndDistance;                                     // 0x01E0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NearScaleFactor;                                          // 0x01E4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x01E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRequired")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bInheritParent : 1;                                       // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x0098 - 0x0078)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0078(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotation_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotation_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      Scale : 1;                                                // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationOverLifetime")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRate_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateMultiplyLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                  // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bScaleRotRate : 1;                                        // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleMeshRotationRateOverLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0090 - 0x0070)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0070(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRate_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleRotationRateMultiplyLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0160 (0x0198 - 0x0038)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      StartSize;                                                // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      AdditionalStartSizes[0x5];                                // 0x0078(0x0038) (CPF_Edit)
	unsigned char                                      bKeepAspectRatio : 1;                                     // 0x0190(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0191(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x01B8 - 0x0198)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0198(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSize_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      MultiplyX : 1;                                            // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      MultiplyY : 1;                                            // 0x0070(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      MultiplyZ : 1;                                            // 0x0070(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeMultiplyLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeOverVelocity
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleSizeOverVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionFloat                       SizeMultiplier;                                           // 0x0038(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeOverVelocity")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      EnableX : 1;                                              // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      EnableY : 1;                                              // 0x0070(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      EnableZ : 1;                                              // 0x0070(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScale")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleSizeScaleBySpeed : public UParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                               // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector2D                                   MaxScale;                                                 // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSizeScaleBySpeed")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bProcessSpawnRate : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bProcessBurstList : 1;                                    // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x01E0 (0x0220 - 0x0040)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       AdditionalRates[0x5];                                     // 0x0078(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0190(0x0038) (CPF_Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x01C8(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01C9(0x0007) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x01D0(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_NoClear)
	struct FRawDistributionFloat                       BurstScale;                                               // 0x01E0(0x0038) (CPF_Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                           // 0x0218(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0219(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawn")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0050 (0x0090 - 0x0040)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	unsigned char                                      bUnknown0040_0101 : 1;                                    // 0x0040(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0040_0202 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0040_0404 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0040_0808 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0040_1010 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0040_2020 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0040_4040 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0040_8080 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bAffectsGroupA : 1;                                       // 0x0040(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bAffectsGroupB : 1;                                       // 0x0040(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bAffectsGroupC : 1;                                       // 0x0040(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bAffectsGroupD : 1;                                       // 0x0040(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bAffectsGroupE : 1;                                       // 0x0040(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bAffectsReplacementGroup : 1;                             // 0x0040(0x0001) (CPF_Edit BITFIELD: 2020)
	float                                              UnitScalar;                                               // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0048(0x0038) (CPF_Edit)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              MovementTolerance;                                        // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxFrameDistance;                                         // 0x0088(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                // 0x008C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                // 0x008C(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                // 0x008C(0x0001) (CPF_Edit BITFIELD: 0404)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnPerUnit")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnRepeatPerPoint
// 0x0000 (0x0040 - 0x0040)
class UParticleModuleSpawnRepeatPerPoint : public UParticleModuleSpawnBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSpawnRepeatPerPoint")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0040 (0x0078 - 0x0038)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0038(0x0038) (CPF_Edit)
	unsigned char                                      bUseRealTime : 1;                                         // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUV")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0048 (0x00C0 - 0x0078)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned char                                      bUnknown0078_0101 : 1;                                    // 0x0078(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0078_0202 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0078_0404 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0078_0808 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0078_1010 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0078_2020 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0078_4040 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0078_8080 : 1;                                    // 0x0078(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0078(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       FrameRate;                                                // 0x0080(0x0038) (CPF_Edit)
	int                                                StartingFrame;                                            // 0x00B8(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleSubUVMovie")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0068 (0x00A0 - 0x0038)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       SourceName;                                               // 0x003C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0048(0x0038) (CPF_Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0080(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                SourceOffsetCount;                                        // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0088(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bInheritRotation : 1;                                     // 0x009C(0x0001) (CPF_Edit BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTrailSource")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0038(0x0001) (CPF_Edit BITFIELD: 0404)
	float                                              TilingDistance;                                           // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataAnimTrail")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x00E8 (0x0120 - 0x0038)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0038(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                TextureTile;                                              // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Sheets;                                                   // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Speed;                                                    // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                            // 0x0054(0x0001) (CPF_Edit BITFIELD: 0101)
	int                                                UpVectorStepSize;                                         // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       BranchParentName;                                         // 0x005C(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x0068(0x0038) (CPF_Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x00A0(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x00A8(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00E0(0x0038) (CPF_Edit)
	unsigned char                                      RenderGeometry : 1;                                       // 0x0118(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      RenderDirectLine : 1;                                     // 0x0118(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      RenderLines : 1;                                          // 0x0118(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      RenderTessellation : 1;                                   // 0x0118(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataBeam2")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x0828 (0x0860 - 0x0038)
class UParticleModuleTypeDataGpu : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FGPUSpriteEmitterInfo                       EmitterInfo;                                              // 0x0040(0x02D0) (CPF_Transient)
	struct FGPUSpriteResourceData                      ResourceData;                                             // 0x0310(0x0530) (CPF_Transient)
	float                                              CameraMotionBlurAmount;                                   // 0x0840(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                        // 0x0844(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EParticleAlphaThresholdLevel>          AlphaCullingAggressiveness;                               // 0x0848(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideAlphaThreshold : 1;                              // 0x084C(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              OverriddenAlphaThreshold;                                 // 0x0850(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EInteractionWithKillPlane>             InteractionWithKillPlane;                                 // 0x0854(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0855(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataGpu")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0070 (0x00A8 - 0x0038)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      CastShadows : 1;                                          // 0x0040(0x0001) ( BITFIELD: 0101)
	unsigned char                                      DoCollisions : 1;                                         // 0x0040(0x0001) ( BITFIELD: 0202)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0044(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideMaterial : 1;                                    // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              Pitch;                                                    // 0x004C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Roll;                                                     // 0x0050(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Yaw;                                                      // 0x0054(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRawDistributionVector                      RollPitchYawRange;                                        // 0x0058(0x0038) (CPF_Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x0098(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bCameraFacing : 1;                                        // 0x009C(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x00A0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x00A1(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                         // 0x00A4(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;               // 0x00A4(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                      // 0x00A4(0x0001) (CPF_Edit BITFIELD: 0404)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataMesh")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0068 - 0x0038)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0048(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bClipSourceSegement : 1;                                  // 0x0048(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0048(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0048(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bSpawnInitialParticle : 1;                                // 0x0048(0x0001) (CPF_Edit BITFIELD: 2020)
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x004C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TangentSpawningScalar;                                    // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                                      // 0x0054(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bRenderSpawnPoints : 1;                                   // 0x0054(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bRenderTangents : 1;                                      // 0x0054(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bRenderTessellation : 1;                                  // 0x0054(0x0001) (CPF_Edit BITFIELD: 0808)
	float                                              TilingDistance;                                           // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                        // 0x0060(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              TangentTessellationScalar;                                // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleTypeDataRibbon")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleVectorFieldBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleVectorFieldGlobal : public UParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                  // 0x0038(0x0001) ( BITFIELD: 0101)
	float                                              GlobalVectorFieldScale;                                   // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldGlobal")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (0x0070 - 0x0038)
class UParticleModuleVectorFieldLocal : public UParticleModuleVectorFieldBase
{
public:
	class UVectorField*                                VectorField;                                              // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0040(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x004C(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0058(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Intensity;                                                // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Tightness;                                                // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                            // 0x006C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bTileX : 1;                                               // 0x006C(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bTileY : 1;                                               // 0x006C(0x0001) (CPF_Edit BITFIELD: 0404)
	unsigned char                                      bTileZ : 1;                                               // 0x006C(0x0001) (CPF_Edit BITFIELD: 0808)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldLocal")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0050 - 0x0038)
class UParticleModuleVectorFieldRotation : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                       // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                                       // 0x0044(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotation")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (0x0048 - 0x0038)
class UParticleModuleVectorFieldRotationRate : public UParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                             // 0x0038(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldRotationRate")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleVectorFieldScale : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScale;                                         // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScale")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleVectorFieldScaleOverLife : public UParticleModuleVectorFieldBase
{
public:
	class UDistributionFloat*                          VectorFieldScaleOverLife;                                 // 0x0038(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVectorFieldScaleOverLife")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0040 - 0x0038)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bInWorldSpace : 1;                                        // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEmitterPointVelocity
// 0x0038 (0x0078 - 0x0040)
class UParticleModuleEmitterPointVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0040(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEmitterPointVelocity")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0190 (0x01D0 - 0x0040)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	unsigned char                                      bUnknown0040_0101 : 1;                                    // 0x0040(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0040_0202 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0040_0404 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0040_0808 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0040_1010 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0040_2020 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0040_4040 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0040_8080 : 1;                                    // 0x0040(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bUseGroupAForAll : 1;                                     // 0x0040(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET
	struct FRawDistributionVector                      StartVelocity;                                            // 0x0048(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      AdditionalStartVelocities[0x5];                           // 0x0080(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0198(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x01F0 - 0x01D0)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x01D0(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocity_Seeded")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0090 (0x00D0 - 0x0040)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       Velocity;                                                 // 0x0078(0x0038) (CPF_Edit)
	uint32_t                                           VelocityDistributeOverNPoints;                            // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VelocityNPointsRandomness;                                // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     Direction;                                                // 0x00B8(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     AdditiveVelocity;                                         // 0x00C4(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityCone")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityConeEmitterPoint
// 0x0088 (0x00C8 - 0x0040)
class UParticleModuleVelocityConeEmitterPoint : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x0078(0x0038) (CPF_Edit)
	uint32_t                                           VelocityDistributeOverNPoints;                            // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VelocityNPointsRandomness;                                // 0x00B4(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     AdditiveVelocity;                                         // 0x00B8(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityConeEmitterPoint")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0078 (0x00B8 - 0x0040)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionVector                      CustomParentScale;                                        // 0x0078(0x0038) (CPF_Edit)
	float                                              SpeedCap;                                                 // 0x00B0(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityInheritParent")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0040 (0x0080 - 0x0040)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x0040(0x0038) (CPF_Edit)
	unsigned char                                      Absolute : 1;                                             // 0x0078(0x0001) (CPF_Edit, CPF_ExportObject BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleVelocityOverLifetime")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleWindBase
// 0x0000 (0x0038 - 0x0038)
class UParticleModuleWindBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleWindBase")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleWindInfluence
// 0x0078 (0x00B0 - 0x0038)
class UParticleModuleWindInfluence : public UParticleModuleWindBase
{
public:
	float                                              WindSpeedCap;                                             // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RandomFactorForWindDirection;                             // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRawDistributionFloat                       InfluenceOnAcceleration;                                  // 0x0040(0x0038) (CPF_Edit)
	struct FRawDistributionFloat                       InfluenceOnVelocity;                                      // 0x0078(0x0038) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleWindInfluence")); }
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleModuleEventSendToGame")); }
		return ptr;
	}

};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x002C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ParticleSystemReplay")); }
		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x00C0 - 0x00C0)
class UDemoPendingNetGame : public UPendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DemoPendingNetGame")); }
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0058 (0x0080 - 0x0028)
class UPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                 // 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode;                                      // 0x002C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideFrictionCombineMode;                             // 0x002D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Restitution;                                              // 0x0030(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode;                                   // 0x0034(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bOverrideRestitutionCombineMode;                          // 0x0035(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Density;                                                  // 0x0038(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RaiseMassToPower;                                         // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DestructibleDamageThresholdScale;                         // 0x0040(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                 // 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EPhysicalSurface>                      SurfaceType;                                              // 0x0050(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TireFrictionScale;                                        // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<struct FTireFrictionScalePair>              TireFrictionScales;                                       // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicalMaterial")); }
		return ptr;
	}

};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0028 - 0x0028)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicalMaterialPropertyBase")); }
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x00D0 (0x00F8 - 0x0028)
class UPhysicsAsset : public UObject
{
public:
	TArray<class UBodySetup*>                          BodySetup;                                                // 0x0028(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	TArray<int>                                        BoundsBodies;                                             // 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<class UPhysicsConstraintTemplate*>          ConstraintSetup;                                          // 0x0048(0x0010) (CPF_ExportObject, CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0xA0];                                      // 0x0058(0x00A0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsAsset")); }
		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UPhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0028(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x002C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USoundBase*                                  DefaultImpactSound;                                       // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsCollisionHandler")); }
		return ptr;
	}

};


// Class Engine.PhysicsConstraintTemplate
// 0x0218 (0x0240 - 0x0028)
class UPhysicsConstraintTemplate : public UObject
{
public:
	struct FName                                       JointName;                                                // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FName                                       ConstraintBone1;                                          // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FName                                       ConstraintBone2;                                          // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     Pos1;                                                     // 0x0040(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     PriAxis1;                                                 // 0x004C(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     SecAxis1;                                                 // 0x0058(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     Pos2;                                                     // 0x0064(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     PriAxis2;                                                 // 0x0070(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FVector                                     SecAxis2;                                                 // 0x007C(0x000C) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bEnableProjection : 1;                                    // 0x0088(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              ProjectionLinearTolerance;                                // 0x008C(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              ProjectionAngularTolerance;                               // 0x0090(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearXMotion;                                            // 0x0094(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearYMotion;                                            // 0x0095(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<ELinearConstraintMotion>               LinearZMotion;                                            // 0x0096(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              LinearLimitSize;                                          // 0x0098(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bLinearLimitSoft : 1;                                     // 0x009C(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              LinearLimitStiffness;                                     // 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              LinearLimitDamping;                                       // 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bLinearBreakable : 1;                                     // 0x00A8(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              LinearBreakThreshold;                                     // 0x00AC(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularSwing1Motion;                                      // 0x00B0(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularSwing2Motion;                                      // 0x00B1(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TEnumAsByte<EAngularConstraintMotion>              AngularTwistMotion;                                       // 0x00B2(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bSwingLimitSoft : 1;                                      // 0x00B4(0x0001) (CPF_Deprecated BITFIELD: 0101)
	unsigned char                                      bTwistLimitSoft : 1;                                      // 0x00B4(0x0001) (CPF_Deprecated BITFIELD: 0202)
	float                                              Swing1LimitAngle;                                         // 0x00B8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              Swing2LimitAngle;                                         // 0x00BC(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              TwistLimitAngle;                                          // 0x00C0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              SwingLimitStiffness;                                      // 0x00C4(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              SwingLimitDamping;                                        // 0x00C8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              TwistLimitStiffness;                                      // 0x00CC(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	float                                              TwistLimitDamping;                                        // 0x00D0(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bAngularBreakable : 1;                                    // 0x00D4(0x0001) (CPF_Deprecated BITFIELD: 0101)
	float                                              AngularBreakThreshold;                                    // 0x00D8(0x0004) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FConstraintInstance                         DefaultInstance;                                          // 0x00E0(0x0160) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsConstraintTemplate")); }
		return ptr;
	}

};


// Class Engine.PhysicsSerializer
// 0x00A8 (0x00D0 - 0x0028)
class UPhysicsSerializer : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0028(0x00A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PhysicsSerializer")); }
		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                             // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceBase")); }
		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                          // 0x0038(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                               // 0x0048(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CloudStorageBase")); }
		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                              // 0x0038(0x0001) ( BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                   // 0x0040(0x0010) (CPF_ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                        // 0x0050(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.InGameAdManager")); }
		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                        // 0x0038(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LastError;                                                // 0x0048(0x0010) (CPF_ZeroConstructor)
	struct FString                                     LastErrorSolution;                                        // 0x0058(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MicroTransactionBase")); }
		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TwitterIntegrationBase")); }
		return ptr;
	}


	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                              // 0x0028(0x0010) (CPF_ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0038(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                Tag;                                                      // 0x003C(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FString                                     StringResponse;                                           // 0x0040(0x0010) (CPF_ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0050(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0060(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.PlatformInterfaceWebResponse")); }
		return ptr;
	}


	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};


// Class Engine.ChildConnection
// 0x0008 (0x34410 - 0x34408)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x34408(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ChildConnection")); }
		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0010 (0x34418 - 0x34408)
class UDemoNetConnection : public UNetConnection
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x34408(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DemoNetConnection")); }
		return ptr;
	}

};


// Class Engine.MockNetConnection
// 0x0000 (0x34408 - 0x34408)
class UMockNetConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MockNetConnection")); }
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Polys")); }
		return ptr;
	}

};


// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ReporterBase")); }
		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0078 (0x00A8 - 0x0030)
class UReporterGraph : public UReporterBase
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0030(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ReporterGraph")); }
		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0030 (0x0058 - 0x0028)
class UReverbEffect : public UObject
{
public:
	float                                              Density;                                                  // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Diffusion;                                                // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Gain;                                                     // 0x0030(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              GainHF;                                                   // 0x0034(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayTime;                                                // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ReflectionsDelay;                                         // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LateGain;                                                 // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LateDelay;                                                // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ReverbEffect")); }
		return ptr;
	}

};


// Class Engine.Rig
// 0x0020 (0x0048 - 0x0028)
class URig : public UObject
{
public:
	TArray<struct FTransformBase>                      TransformBases;                                           // 0x0028(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	TArray<struct FNode>                               Nodes;                                                    // 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Rig")); }
		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class USaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SaveGame")); }
		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0030 (0x0058 - 0x0028)
class USimpleConstructionScript : public UObject
{
public:
	TArray<class USCS_Node*>                           RootNodes;                                                // 0x0028(0x0010) (CPF_ZeroConstructor)
	class USCS_Node*                                   DefaultSceneRootNode;                                     // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	class USCS_Node*                                   RootNode;                                                 // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	TArray<class USCS_Node*>                           ActorComponentNodes;                                      // 0x0048(0x0010) (CPF_ZeroConstructor, CPF_Deprecated)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SimpleConstructionScript")); }
		return ptr;
	}

};


// Class Engine.SCS_Node
// 0x0078 (0x00A0 - 0x0028)
class USCS_Node : public UObject
{
public:
	class UActorComponent*                             ComponentTemplate;                                        // 0x0028(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_IsPlainOldData)
	struct FName                                       VariableName;                                             // 0x0030(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       AttachToName;                                             // 0x0038(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                            // 0x0040(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                            // 0x0048(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsParentComponentNative;                                 // 0x0050(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      ServerMigrationFlagSet;                                   // 0x0051(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0052(0x0006) MISSED OFFSET
	TArray<class USCS_Node*>                           ChildNodes;                                               // 0x0058(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       VariableGuid;                                             // 0x0078(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bIsFalseRoot;                                             // 0x0088(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bIsNative;                                                // 0x0089(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	struct FName                                       NativeComponentName;                                      // 0x008C(0x0008) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      bVariableNameAutoGenerated;                               // 0x0094(0x0001) (CPF_ZeroConstructor, CPF_Deprecated, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xB];                                       // 0x0095(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SCS_Node")); }
		return ptr;
	}

};


// Class Engine.Selection
// 0x0030 (0x0058 - 0x0028)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0028(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Selection")); }
		return ptr;
	}

};


// Class Engine.DestructibleMesh
// 0x0098 (0x02C8 - 0x0230)
class UDestructibleMesh : public USkeletalMesh
{
public:
	struct FDestructibleParameters                     DefaultDestructibleParameters;                            // 0x0230(0x0088) (CPF_Edit)
	TArray<struct FFractureEffect>                     FractureEffects;                                          // 0x02B8(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DestructibleMesh")); }
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0038 (0x0060 - 0x0028)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0030(0x0008) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0038(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0050(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bForceAlwaysAnimated;                                     // 0x005C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SkeletalMeshSocket")); }
		return ptr;
	}


	void InitializeSocketFromLocation(class USkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class USkeletalMeshComponent* SkelComp);
};


// Class Engine.SlateBrushAsset
// 0x0088 (0x00B0 - 0x0028)
class USlateBrushAsset : public UObject
{
public:
	struct FSlateBrush                                 Brush;                                                    // 0x0028(0x0088) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SlateBrushAsset")); }
		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0028 (0x0050 - 0x0028)
class USoundBase : public UObject
{
public:
	class USoundClass*                                 SoundClassObject;                                         // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x0030(0x0001) (CPF_Edit BITFIELD: 0101)
	TEnumAsByte<EMaxConcurrentResolutionRule>          MaxConcurrentResolutionRule;                              // 0x0034(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MaxConcurrentPlayCount;                                   // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Duration;                                                 // 0x003C(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0040(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundBase")); }
		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x0068 - 0x0050)
class UDialogueSoundWaveProxy : public USoundBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.DialogueSoundWaveProxy")); }
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x00E0 (0x0130 - 0x0050)
class USoundCue : public USoundBase
{
public:
	unsigned char                                      bUnknown0050_0101 : 1;                                    // 0x0050(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0050_0202 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0050_0404 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0050_0808 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0050_1010 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0050_2020 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0050_4040 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0050_8080 : 1;                                    // 0x0050(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0050(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class USoundNode*                                  FirstNode;                                                // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                                     // 0x0068(0x00C0) (CPF_Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0128(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundCue")); }
		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class USoundGroups : public UObject
{
public:
	TArray<struct FSoundGroup>                         SoundGroupProfiles;                                       // 0x0028(0x0010) (CPF_ZeroConstructor, CPF_Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundGroups")); }
		return ptr;
	}

};


// Class Engine.SoundWave
// 0x01C0 (0x0210 - 0x0050)
class USoundWave : public USoundBase
{
public:
	int                                                CompressionQuality;                                       // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0054(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bStreaming : 1;                                           // 0x0054(0x0001) (CPF_Edit BITFIELD: 0202)
	int                                                StreamingPriority;                                        // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUnknown005C_0101 : 1;                                    // 0x005C(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown005C_0202 : 1;                                    // 0x005C(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown005C_0404 : 1;                                    // 0x005C(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bMature : 1;                                              // 0x005C(0x0001) (CPF_Edit BITFIELD: 0808)
	unsigned char                                      bManualWordWrap : 1;                                      // 0x005C(0x0001) (CPF_Edit BITFIELD: 1010)
	unsigned char                                      bSingleLine : 1;                                          // 0x005C(0x0001) (CPF_Edit BITFIELD: 2020)
	TEnumAsByte<ESoundGroup>                           SoundGroup;                                               // 0x0060(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0068(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              Volume;                                                   // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Pitch;                                                    // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                NumChannels;                                              // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SampleRate;                                               // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                RawPCMDataSize;                                           // 0x0088(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x0090(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                       // 0x00A0(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData02[0x160];                                     // 0x00B0(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundWave")); }
		return ptr;
	}

};


// Class Engine.SoundWaveProcedural
// 0x0018 (0x0228 - 0x0210)
class USoundWaveProcedural : public USoundWave
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0210(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundWaveProcedural")); }
		return ptr;
	}

};


// Class Engine.SoundClass
// 0x0050 (0x0078 - 0x0028)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x0028(0x0024) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	TArray<class USoundClass*>                         ChildClasses;                                             // 0x0050(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	TArray<struct FPassiveSoundMixModifier>            PassiveSoundMixModifiers;                                 // 0x0060(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	class USoundClass*                                 ParentClass;                                              // 0x0070(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundClass")); }
		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0050 (0x0078 - 0x0028)
class USoundMix : public UObject
{
public:
	unsigned char                                      bUnknown0028_0101 : 1;                                    // 0x0028(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0028_0202 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0028_0404 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0028_0808 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0028_1010 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0028_2020 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0028_4040 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0028_8080 : 1;                                    // 0x0028(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bApplyEQ : 1;                                             // 0x0028(0x0001) (CPF_Edit BITFIELD: 0101)
	float                                              EQPriority;                                               // 0x002C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0030(0x0028) (CPF_Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0058(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeInTime;                                               // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Duration;                                                 // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundMix")); }
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x0038 - 0x0028)
class USoundNode : public UObject
{
public:
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0028(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNode")); }
		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0038 - 0x0038)
class USoundNodeAssetReferencer : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAssetReferencer")); }
		return ptr;
	}

};


// Class Engine.SoundNodeWavePlayer
// 0x0030 (0x0068 - 0x0038)
class USoundNodeWavePlayer : public USoundNodeAssetReferencer
{
public:
	TAssetPtr<class USoundWave>                        SoundWaveAssetPtr;                                        // 0x0038(0x0020) (CPF_Edit)
	class USoundWave*                                  SoundWave;                                                // 0x0058(0x0008) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0060(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWavePlayer")); }
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x00D0 (0x0108 - 0x0038)
class USoundNodeAttenuation : public USoundNode
{
public:
	class USoundAttenuation*                           AttenuationSettings;                                      // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FAttenuationSettings                        AttenuationOverrides;                                     // 0x0040(0x00C0) (CPF_Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0100(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeAttenuation")); }
		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeBranch : public USoundNode
{
public:
	struct FName                                       BoolParameterName;                                        // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeBranch")); }
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeConcatenator")); }
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DelayMax;                                                 // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDelay")); }
		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0060 - 0x0038)
class USoundNodeDialoguePlayer : public USoundNode
{
public:
	struct FDialogueWaveParameter                      DialogueWaveParameter;                                    // 0x0038(0x0020) (CPF_Edit)
	unsigned char                                      bLooping : 1;                                             // 0x0058(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDialoguePlayer")); }
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0048 - 0x0038)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x0038(0x0010) (CPF_Edit, CPF_ExportObject, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDistanceCrossFade")); }
		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0050 - 0x0048)
class USoundNodeParamCrossFade : public USoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeParamCrossFade")); }
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0008 (0x0040 - 0x0038)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeDoppler")); }
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0138 (0x0170 - 0x0038)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LoopCount;                                                // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0048(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bLoop : 1;                                                // 0x0048(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                        // 0x0050(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                         // 0x0058(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_InstancedReference, CPF_Deprecated, CPF_IsPlainOldData)
	struct FRuntimeFloatCurve                          VolumeCurve;                                              // 0x0060(0x0080) (CPF_Edit)
	struct FRuntimeFloatCurve                          PitchCurve;                                               // 0x00E0(0x0080) (CPF_Edit)
	float                                              PitchMin;                                                 // 0x0160(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0164(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0168(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMax;                                                // 0x016C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeEnveloper")); }
		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0048 - 0x0038)
class USoundNodeGroupControl : public USoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeGroupControl")); }
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0040 - 0x0038)
class USoundNodeLooping : public USoundNode
{
public:
	int                                                LoopCount;                                                // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x003C(0x0001) (CPF_Edit BITFIELD: 0101)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeLooping")); }
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0038 - 0x0038)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMature")); }
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0048 - 0x0038)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0038(0x0010) (CPF_Edit, CPF_ExportObject, CPF_EditFixedSize, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeMixer")); }
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0048 - 0x0038)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              PitchMax;                                                 // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulator")); }
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0078 - 0x0038)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FModulatorContinuousParams                  PitchModulationParams;                                    // 0x0038(0x0020) (CPF_Edit)
	struct FModulatorContinuousParams                  VolumeModulationParams;                                   // 0x0058(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeModulatorContinuous")); }
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0060 - 0x0038)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned char                                      bUnknown0038_0101 : 1;                                    // 0x0038(0x0001) (CPF_EditMANUAL_ADD_BIT 0101)
	unsigned char                                      bUnknown0038_0202 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0202)
	unsigned char                                      bUnknown0038_0404 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0404)
	unsigned char                                      bUnknown0038_0808 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 0808)
	unsigned char                                      bUnknown0038_1010 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 1010)
	unsigned char                                      bUnknown0038_2020 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 2020)
	unsigned char                                      bUnknown0038_4040 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 4040)
	unsigned char                                      bUnknown0038_8080 : 1;                                    // 0x0038(0x0001) (MANUAL_ADD_BIT 8080)
	unsigned char                                      bModulateVolume : 1;                                      // 0x0038(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bModulatePitch : 1;                                       // 0x0038(0x0001) (CPF_Edit BITFIELD: 0202)
	float                                              AmplitudeMin;                                             // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OffsetMin;                                                // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterMin;                                                // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              CenterMax;                                                // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeOscillator")); }
		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0000 (0x0038 - 0x0038)
class USoundNodeQualityLevel : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeQualityLevel")); }
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0068 - 0x0038)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0038(0x0010) (CPF_Edit, CPF_EditFixedSize, CPF_ZeroConstructor)
	int                                                PreselectAtLevelLoad;                                     // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                         // 0x004C(0x0001) (CPF_Edit BITFIELD: 0101)
	TArray<unsigned char>                              HasBeenUsed;                                              // 0x0050(0x0010) (CPF_ZeroConstructor, CPF_Transient)
	int                                                NumRandomUsed;                                            // 0x0060(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeRandom")); }
		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSoundClass : public USoundNode
{
public:
	class USoundClass*                                 SoundClassOverride;                                       // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSoundClass")); }
		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0040 - 0x0038)
class USoundNodeSwitch : public USoundNode
{
public:
	struct FName                                       IntParameterName;                                         // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeSwitch")); }
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0040 - 0x0038)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x0038(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SoundNodeWaveParam")); }
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x0108 (0x0130 - 0x0028)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET
	int                                                MinLOD;                                                   // 0x0040(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0048(0x0010) (CPF_ZeroConstructor)
	int                                                LightMapResolution;                                       // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UBodySetup*                                  BodySetup;                                                // 0x0060(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)
	int                                                LODForCollision;                                          // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bUseMaximumStreamingTexelRatio : 1;                       // 0x006C(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                     // 0x006C(0x0001) (CPF_Deprecated BITFIELD: 0202)
	unsigned char                                      bHasNavigationData : 1;                                   // 0x006C(0x0001) (CPF_Edit BITFIELD: 0404)
	float                                              StreamingDistanceMultiplier;                              // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LpvBiasMultiplier;                                        // 0x0074(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0078(0x0030) MISSED OFFSET
	TArray<class UStaticMeshSocket*>                   Sockets;                                                  // 0x00A8(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                                  // 0x00C8(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x00D4(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x00E0(0x001C) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TArray<struct FString>                             SourceMaterials;                                          // 0x0100(0x0010) (CPF_ZeroConstructor)
	unsigned char                                      bEnableAutomaticInstancing;                               // 0x0110(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	int                                                ElementToIgnoreForTexFactor;                              // 0x0114(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TArray<class UAssetUserData*>                      AssetUserData;                                            // 0x0118(0x0010) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor)
	class UNavCollision*                               NavCollision;                                             // 0x0128(0x0008) (CPF_Edit, CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_EditConst, CPF_InstancedReference, CPF_DuplicateTransient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StaticMesh")); }
		return ptr;
	}


	int GetNumUVChannels(int LodLevel);
	int GetNumLODsBP();
	struct FBox GetBoundingBox();
};


// Class Engine.StaticMeshSocket
// 0x0040 (0x0068 - 0x0028)
class UStaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (CPF_BlueprintVisible, CPF_BlueprintReadOnly, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0030(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x003C(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0048(0x000C) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FString                                     Tag;                                                      // 0x0058(0x0010) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.StaticMeshSocket")); }
		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x0028 (0x0050 - 0x0028)
class USubsurfaceProfile : public UObject
{
public:
	struct FSubsurfaceProfileStruct                    Settings;                                                 // 0x0028(0x0024) (CPF_Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.SubsurfaceProfile")); }
		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x0078 (0x00A0 - 0x0028)
class UTextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                            // 0x0028(0x0028)
	struct FText                                       UndefaultedText;                                          // 0x0050(0x0028)
	struct FText                                       TransientText;                                            // 0x0078(0x0028)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextPropertyTestObject")); }
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x0050 (0x0188 - 0x0138)
class UTexture2D : public UTexture
{
public:
	int                                                RequestedMips;                                            // 0x0138(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                ResidentMips;                                             // 0x013C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	int                                                StreamingIndex;                                           // 0x0140(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_DuplicateTransient, CPF_IsPlainOldData)
	int                                                FirstResourceMemMip;                                      // 0x0144(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0148(0x0004) MISSED OFFSET
	struct FIntPoint                                   ImportedSize;                                             // 0x014C(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ForceMipLevelsToBeResidentTimestamp;                      // 0x0154(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                         // 0x0158(0x0001) (CPF_Transient BITFIELD: 0101)
	unsigned char                                      bIsStreamable : 1;                                        // 0x0158(0x0001) (CPF_Transient BITFIELD: 0202)
	unsigned char                                      bHasCancelationPending : 1;                               // 0x0158(0x0001) (CPF_Transient BITFIELD: 0404)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                          // 0x0158(0x0001) (CPF_Transient BITFIELD: 0808)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x0158(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 1010)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x015C(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x015D(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                MinimumLoadedMips;                                        // 0x0160(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0x24];                                      // 0x0164(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Texture2D")); }
		return ptr;
	}


	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};


// Class Engine.LightMapTexture2D
// 0x0008 (0x0190 - 0x0188)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0188(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.LightMapTexture2D")); }
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0008 (0x0190 - 0x0188)
class UShadowMapTexture2D : public UTexture2D
{
public:
	TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags;                                           // 0x0188(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0189(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ShadowMapTexture2D")); }
		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0008 (0x0190 - 0x0188)
class UTextureLightProfile : public UTexture2D
{
public:
	float                                              Brightness;                                               // 0x0188(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TextureMultiplier;                                        // 0x018C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureLightProfile")); }
		return ptr;
	}

};


// Class Engine.Texture2DDynamic
// 0x0018 (0x0150 - 0x0138)
class UTexture2DDynamic : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x0140(0x0001) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0141(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.Texture2DDynamic")); }
		return ptr;
	}

};


// Class Engine.TextureCube
// 0x0058 (0x0190 - 0x0138)
class UTextureCube : public UTexture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0138(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureCube")); }
		return ptr;
	}

};


// Class Engine.CanvasRenderTarget2D
// 0x0018 (0x0180 - 0x0168)
class UCanvasRenderTarget2D : public UTextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                               // 0x0168(0x0010) (CPF_ZeroConstructor, CPF_InstancedReference, CPF_BlueprintAssignable)
	TWeakObjectPtr<class UWorld>                       World;                                                    // 0x0178(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.CanvasRenderTarget2D")); }
		return ptr;
	}


	void UpdateResource();
	void ReceiveUpdate(class UCanvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UCanvasRenderTarget2D* CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height, TEnumAsByte<ECanvasRenderTargetMips> Mips, bool HDR, bool CreateTextureResource);
};


// Class Engine.TextureRenderTargetCube
// 0x0020 (0x0160 - 0x0140)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x0140(0x0004) (CPF_Edit, CPF_BlueprintVisible, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x0144(0x0010) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EPixelFormat>                          OverrideFormat;                                           // 0x0154(0x0001) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bHDR : 1;                                                 // 0x0158(0x0001) (CPF_Edit, CPF_BlueprintVisible, CPF_BlueprintReadOnly BITFIELD: 0101)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x0158(0x0001) ( BITFIELD: 0202)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TextureRenderTargetCube")); }
		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.ThumbnailInfo")); }
		return ptr;
	}

};


// Class Engine.TimelineTemplate
// 0x0070 (0x0098 - 0x0028)
class UTimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0028(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<ETimelineLengthMode>                   LengthMode;                                               // 0x002C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAutoPlay : 1;                                            // 0x0030(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      bLoop : 1;                                                // 0x0030(0x0001) (CPF_Edit BITFIELD: 0202)
	unsigned char                                      bReplicated : 1;                                          // 0x0030(0x0001) (CPF_Edit, CPF_BlueprintVisible BITFIELD: 0404)
	unsigned char                                      bValidatedAsWired : 1;                                    // 0x0030(0x0001) ( BITFIELD: 0808)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FTTEventTrack>                       EventTracks;                                              // 0x0038(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTFloatTrack>                       FloatTracks;                                              // 0x0048(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTVectorTrack>                      VectorTracks;                                             // 0x0058(0x0010) (CPF_ZeroConstructor)
	TArray<struct FTTLinearColorTrack>                 LinearColorTracks;                                        // 0x0068(0x0010) (CPF_ZeroConstructor)
	TArray<struct FBPVariableMetaDataEntry>            MetaDataArray;                                            // 0x0078(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                             // 0x0088(0x0010) (CPF_ZeroConstructor, CPF_DuplicateTransient, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TimelineTemplate")); }
		return ptr;
	}

};


// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UTouchInterface : public UObject
{
public:
	TArray<struct FTouchInputControl>                  Controls;                                                 // 0x0028(0x0010) (CPF_Edit, CPF_ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0038(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x003C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bPreventRecenter;                                         // 0x004C(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              StartupDelay;                                             // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.TouchInterface")); }
		return ptr;
	}

};


// Class Engine.UserDefinedEnum
// 0x0010 (0x0068 - 0x0058)
class UUserDefinedEnum : public UEnum
{
public:
	TArray<struct FText>                               DisplayNames;                                             // 0x0058(0x0010) (CPF_ZeroConstructor)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.UserDefinedEnum")); }
		return ptr;
	}

};


// Class Engine.AnimDataEntryStruct
// 0x0000 (0x00A8 - 0x00A8)
class UAnimDataEntryStruct : public UUserDefinedStruct
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.AnimDataEntryStruct")); }
		return ptr;
	}

};


// Class Engine.VectorField
// 0x0020 (0x0048 - 0x0028)
class UVectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                   // 0x0028(0x001C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Intensity;                                                // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VectorField")); }
		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x0088 - 0x0048)
class UVectorFieldAnimated : public UVectorField
{
public:
	class UTexture2D*                                  Texture;                                                  // 0x0048(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp;                                           // 0x0050(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VolumeSizeX;                                              // 0x0054(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0058(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x005C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                SubImagesY;                                               // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	int                                                FrameCount;                                               // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bLoop : 1;                                                // 0x0070(0x0001) (CPF_Edit BITFIELD: 0101)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class UVectorFieldStatic*                          NoiseField;                                               // 0x0078(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseScale;                                               // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldAnimated")); }
		return ptr;
	}

};


// Class Engine.VectorFieldStatic
// 0x0080 (0x00C8 - 0x0048)
class UVectorFieldStatic : public UVectorField
{
public:
	int                                                SizeX;                                                    // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SizeY;                                                    // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_EditConst, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x74];                                      // 0x0054(0x0074) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VectorFieldStatic")); }
		return ptr;
	}

};


// Class Engine.VehicleWheel
// 0x00B0 (0x00D8 - 0x0028)
class UVehicleWheel : public UObject
{
public:
	class UStaticMesh*                                 CollisionMesh;                                            // 0x0028(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bDontCreateShape;                                         // 0x0030(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_DisableEditOnInstance, CPF_IsPlainOldData)
	unsigned char                                      bAutoAdjustCollisionSize;                                 // 0x0031(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	struct FVector                                     Offset;                                                   // 0x0034(0x000C) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShapeRadius;                                              // 0x0040(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              ShapeWidth;                                               // 0x0044(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              Mass;                                                     // 0x0048(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              DampingRate;                                              // 0x004C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SteerAngle;                                               // 0x0050(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      bAffectedByHandbrake;                                     // 0x0054(0x0001) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UTireType*                                   TireType;                                                 // 0x0058(0x0008) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LatStiffMaxLoad;                                          // 0x0060(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LatStiffValue;                                            // 0x0064(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              LongStiffValue;                                           // 0x0068(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionForceOffset;                                    // 0x006C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionMaxRaise;                                       // 0x0070(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionMaxDrop;                                        // 0x0074(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionNaturalFrequency;                               // 0x0078(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              SuspensionDampingRatio;                                   // 0x007C(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxBrakeTorque;                                           // 0x0080(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	float                                              MaxHandBrakeTorque;                                       // 0x0084(0x0004) (CPF_Edit, CPF_ZeroConstructor, CPF_IsPlainOldData)
	class UWheeledVehicleMovementComponent*            VehicleSim;                                               // 0x0088(0x0008) (CPF_ExportObject, CPF_ZeroConstructor, CPF_Transient, CPF_InstancedReference, CPF_IsPlainOldData)
	int                                                WheelIndex;                                               // 0x0090(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLongSlip;                                            // 0x0094(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLatSlip;                                             // 0x0098(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugNormalizedTireLoad;                                  // 0x009C(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugWheelTorque;                                         // 0x00A0(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLongForce;                                           // 0x00A4(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	float                                              DebugLatForce;                                            // 0x00A8(0x0004) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     Location;                                                 // 0x00AC(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     OldLocation;                                              // 0x00B8(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	struct FVector                                     Velocity;                                                 // 0x00C4(0x000C) (CPF_ZeroConstructor, CPF_Transient, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VehicleWheel")); }
		return ptr;
	}


	float GetSuspensionOffset();
	float GetSteerAngle();
	float GetRotationAngle();
};


// Class Engine.VertexAnimBase
// 0x0008 (0x0030 - 0x0028)
class UVertexAnimBase : public UObject
{
public:
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0028(0x0008) (CPF_ZeroConstructor, CPF_IsPlainOldData)

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VertexAnimBase")); }
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0010 (0x0040 - 0x0030)
class UMorphTarget : public UVertexAnimBase
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.MorphTarget")); }
		return ptr;
	}

};


// Class Engine.VertexAnimation
// 0x0018 (0x0048 - 0x0030)
class UVertexAnimation : public UVertexAnimBase
{
public:
	int                                                NumAnimatedVerts;                                         // 0x0030(0x0004) (CPF_ZeroConstructor, CPF_IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0034(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VertexAnimation")); }
		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UVisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static UClass* ptr = 0;
		if(ptr == 0) { ptr = UObject::FindClass(_xor_("Class Engine.VisualLoggerAutomationTests")); }
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
